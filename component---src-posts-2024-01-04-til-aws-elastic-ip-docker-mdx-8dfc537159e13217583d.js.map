{"version":3,"file":"component---src-posts-2024-01-04-til-aws-elastic-ip-docker-mdx-8dfc537159e13217583d.js","mappings":"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","sources":["webpack://aryumka.me/./src/posts/2024-01-04-til-aws-elastic-ip-docker.mdx","webpack://aryumka.me/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    a: \"a\",\n    p: \"p\",\n    img: \"img\",\n    span: \"span\",\n    br: \"br\",\n    del: \"del\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h3, {\n    id: \"aws-탄력적-ip-설정\"\n  }, React.createElement(_components.a, {\n    href: \"#aws-탄력적-ip-설정\"\n  }, \"aws 탄력적 ip 설정\")), \"\\n\", React.createElement(_components.p, null, \"인스턴스를 껐다 켰다 할 때마다 ip가 바뀌어서 너무 불편했다. 고정 ip를 생성해봤다. 너무너무 간단하다.\\n인스턴스 > 네트워크 및 보안 > 탄력적 ip에서 생성\\n\", React.createElement(_components.img, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/285832a5-29dd-4373-97ae-d3e1449495ea/image.png\",\n    alt: \"\"\n  }), \"\\n현재 ec2 인스턴스와 연결\\n\", React.createElement(_components.img, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/fce6cadf-f831-46c9-b225-d01bb70181a4/image.png\",\n    alt: \"\"\n  }), \"\\n성공!\\n\", React.createElement(_components.img, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/74dd0c4d-5c12-49aa-86e0-6c613e3dea22/image.png\",\n    alt: \"\"\n  })), \"\\n\", React.createElement(_components.h3, {\n    id: \"docker-사용해보기\"\n  }, React.createElement(_components.a, {\n    href: \"#docker-사용해보기\"\n  }, \"Docker 사용해보기\")), \"\\n\", React.createElement(_components.p, null, \"사용중인 OS는 윈도우지만 git Bash를 인텔리제이의 기본 터미널로 설정해주었다.\\n\", React.createElement(_components.img, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/4a7e1723-d886-4475-81d7-969eba5185f3/image.png\",\n    alt: \"\"\n  })), \"\\n\", React.createElement(_components.p, null, \"먼저 프로젝트 루트에 dockerfile을 만들어준다. dockerfile은 확장자가 없다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">FROM openjdk:19\\nCMD [\\\"java\\\", \\\"-jar\\\", \\\"./build/libs/vc-erp-0.0.1-SNAPSHOT.jar\\\"]</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">FROM</code>\"\n    }\n  }), \" - 베이스 이미지이다.\", React.createElement(_components.br), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">CMD</code>\"\n    }\n  }), \" - 컨테이너가 시작할 때 실행할 명령어이다.\\n아래 명령어를 실행하여 도커 빌드를 해줬다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ docker build . -t springbootapp</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.img, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/36ab57eb-4491-4564-b98d-80c168270d02/image.png\",\n    alt: \"\"\n  }), \"\\n그리고 실행하기 위해 다음 명령을 입력했다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ docker run springbootapp</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.img, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/7e7cc0e4-5d28-4ccc-adc0-74fd1f21e6fa/image.png\",\n    alt: \"\"\n  }), \"\\n\", React.createElement(_components.p, null, \"위와 같은 에러가 난다.\\n위와 같이 도커에서 해당 어플리케이션을 실행하기 위해서는 빌드한 jar가 도커 컨테이너 안에 있어야 하기 때문이다. 그러나 위 명령어를 통해 빌드한 파일은 현재 내 PC에만 존재한다. 따라서 위 파일을 컨테이너로 copy해주어야 한다.\\n\", React.createElement(_components.del, null, \"원격 서버에 빌드된 jar를 배포하는 것과 비슷하다.\")), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">COPY ./build/libs/vc-erp-0.0.1-SNAPSHOT.jar /build/libs/vc-erp-0.0.1-SNAPSHOT.jar</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"[명령어] [현재파일경로] [복사할경로] 순으로 적어준다.\"), \"\\n\", React.createElement(_components.p, null, \"다시 빌드 후 실행하면 일단 jar 실행은 잘 된다.\\n\", React.createElement(_components.img, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/82bdd78f-b619-4ec7-b254-2fb034763223/image.png\",\n    alt: \"\"\n  })), \"\\n\", React.createElement(_components.p, null, \"하지만 위의 jar가 실행이 안되었던 것과 비슷한 이유로 외부에서 컨테이너의 어플리케이션에 접근하기 위해서는 컨테이너의 포트를 열어줘야 한다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ docker run -p 50000:8080 springbootapp</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"run 명령에 위와같은 -p [로컬 포트번호]:[외부포트] 옵션을 추가해준다\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"http://localhost:8080\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"http://localhost:8080\"), \" 에 잘 접속된다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">WORKDIR /usr/src/app</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"working directory는 위 명령어로 설정해준다. 설정 후 복사될 경로, 실행파일 경로 등을 상대경로로 바꾸어준다(./~~).\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ docker run -p 50000:8080 -v $(pwd):/usr/src/app springbootapp</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"실행 시 volume을 설정할 수도 있다.\\nvolume: volume을 설정하면 호스트머신의 로컬의 파일을 컨테이너가 사용할 수 있으며 컨테이너끼리 데이터를 공유할 수도 있다.\"), \"\\n\", React.createElement(_components.p, null, \"최종 dockerfile은 아래와 같다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">FROM openjdk:19\\nWORKDIR /usr/src/app\\nCOPY ./build/libs/vc-erp-0.0.1-SNAPSHOT.jar ./build/libs/vc-erp-0.0.1-SNAPSHOT.jar\\nCMD [\\\"java\\\", \\\"-jar\\\", \\\"./build/libs/vc-erp-0.0.1-SNAPSHOT.jar\\\"]</code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h3","a","p","img","span","br","del","_provideComponents","components","React","id","href","src","alt","dangerouslySetInnerHTML","__html","rel","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}