"use strict";(self.webpackChunkaryumka_me=self.webpackChunkaryumka_me||[]).push([[9646],{1119:function(n,a,s){s.r(a);var t=s(9128),e=s(9474);function o(n){const a=Object.assign({p:"p",blockquote:"blockquote",h2:"h2",a:"a",span:"span",img:"img",ol:"ol",li:"li"},(0,t.R)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.p,null,"3일차에 공부하다보니 다음과 같은 고민을 하게됐다."),"\n",e.createElement(a.blockquote,null,"\n",e.createElement(a.p,null,"JPA에서 @Transactional을 무조건 붙여야할까?\nKotlin에서 JpaRepository를 쓸 때 Optional을 안쓰는 법이 있을까?"),"\n"),"\n",e.createElement(a.p,null,"그리고 생각보다 시간을 많이 잡아먹었던 문제가 있었다."),"\n",e.createElement(a.blockquote,null,"\n",e.createElement(a.p,null,"WebMvc 테스트가 안됐던 이유"),"\n"),"\n",e.createElement(a.p,null,"위 내용들에 대해 정리해보았다."),"\n",e.createElement(a.h2,{id:"1-jpa에서-transactional을-무조건-붙여야할까"},e.createElement(a.a,{href:"#1-jpa에서-transactional을-무조건-붙여야할까"},"1. JPA에서 @Transactional을 무조건 붙여야할까?")),"\n",e.createElement(a.p,null,"습관적으로 서비스에서 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">@Transactional</code>'}}),"을 붙였었다. 하지만 레포지토리에 저장하는 등 하나만 실행을 한다면 과연 저 애너테이션이 필요할까?\n결론적으로는 필요없다.\n명시적으로 트랜잭션 경계를 구분해야할 필요성이 있을 때, 트랜잭션 격리수준, 예외 등을 설정할 때 등에 사용하면 된다."),"\n",e.createElement(a.h2,{id:"2-kotlin에서-jparepository를-쓸-때-optional-안쓰는-법"},e.createElement(a.a,{href:"#2-kotlin에서-jparepository를-쓸-때-optional-안쓰는-법"},"2. Kotlin에서 JpaRepository를 쓸 때 Optional 안쓰는 법")),"\n",e.createElement(a.img,{src:"https://velog.velcdn.com/images/aryumka/post/0c169fc0-5d98-4cd2-9d50-04672ebc9d84/image.png",alt:""}),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin">    <span class="token keyword">fun</span> <span class="token function">getFundingProposalByIdOrNull</span><span class="token punctuation">(</span>id<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token operator">:</span> FundingProposal<span class="token operator">?</span> <span class="token operator">=</span>\n        repository<span class="token punctuation">.</span><span class="token function">findByIdOrNull</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token keyword">throw</span> <span class="token function">EmptyResultDataAccessException</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"이미 nullable을 리턴하는 메서드들이 다 있다!"),"\n",e.createElement(a.h2,{id:"3-webmvc-테스트가-안됐던-이유"},e.createElement(a.a,{href:"#3-webmvc-테스트가-안됐던-이유"},"3. WebMvc 테스트가 안됐던 이유")),"\n",e.createElement(a.p,null,"이전에 작성했던 kotest+mockk 코드가 작동하지 않았던 이유를 찾았다."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@WebMvcTest</span><span class="token punctuation">(</span>ProposeController<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation builtin">@AutoConfigureMockMvc</span>\n<span class="token keyword">class</span> <span class="token function">ProposeUpdateTest</span><span class="token punctuation">(</span><span class="token annotation builtin">@Autowired</span> <span class="token keyword">val</span> mockMvc<span class="token operator">:</span> MockMvc<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">FunSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token annotation builtin">@MockkBean</span>\n    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> service<span class="token operator">:</span> ProposeService\n\n    <span class="token keyword">init</span> <span class="token punctuation">{</span>\n        beforeTest <span class="token punctuation">{</span>\n            service <span class="token operator">=</span> <span class="token function">mockk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            every <span class="token punctuation">{</span> service<span class="token punctuation">.</span><span class="token function">createFundingProposal</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> returns <span class="token function">FundingProposal</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"제안서 제목"</span></span><span class="token punctuation">)</span>\n            every <span class="token punctuation">{</span> service<span class="token punctuation">.</span><span class="token function">updateFundingProposal</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> returns <span class="token function">FundingProposal</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"새로운 제안서 제목"</span></span><span class="token punctuation">)</span>\n        <span class="token operator">..</span><span class="token punctuation">.</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"이유는 mockk 라이브러리의 문제가 아니라 kotest에서 스프링 의존성을 주입하는 방법을 몰랐었기 때문이다."),"\n",e.createElement(a.ol,null,"\n",e.createElement(a.li,null,"클래스 바디의 init 블록 안에 Springextension을 넣어주거나"),"\n"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@WebMvcTest</span><span class="token punctuation">(</span>ProposeController<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation builtin">@AutoConfigureMockMvc</span>\n<span class="token keyword">class</span> <span class="token function">ProposeUpdateTest2</span><span class="token punctuation">(</span><span class="token annotation builtin">@Autowired</span> <span class="token keyword">val</span> mockMvc<span class="token operator">:</span> MockMvc<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">FunSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">extensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span>SpringExtension<span class="token punctuation">)</span> <span class="token comment">//이렇게</span>\n\n    <span class="token annotation builtin">@MockkBean</span>\n    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> service<span class="token operator">:</span> ProposeService\n\t<span class="token operator">..</span><span class="token punctuation">.</span></code></pre></div>'}}),"\n",e.createElement(a.ol,{start:"2"},"\n",e.createElement(a.li,null,"클래스 바디에 테스트 함수를 작성하지 말고 상속받는 Spec의 인자로 넣어준다."),"\n"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@WebMvcTest</span><span class="token punctuation">(</span>ProposeController<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation builtin">@AutoConfigureMockMvc</span>\n<span class="token keyword">class</span> <span class="token function">ProposeUpdateTest2</span><span class="token punctuation">(</span>\n    <span class="token keyword">val</span> mockMvc<span class="token operator">:</span> MockMvc<span class="token punctuation">,</span>\n    <span class="token annotation builtin">@MockkBean</span> <span class="token keyword">private</span> <span class="token keyword">var</span> service<span class="token operator">:</span> ProposeService\n<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">FunSpec</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n<span class="token comment">//테스트할 내용</span>\n<span class="token operator">..</span><span class="token punctuation">.</span></code></pre></div>'}}))}a.default=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.R)(),n.components);return a?e.createElement(a,n,e.createElement(o,n)):o(n)}},5385:function(n,a,s){s.r(a),s.d(a,{default:function(){return h}});var t=s(1119),e=s(5530),o=s(9474),p=s(8844),c=s(1047),l=s(8928),i=s.n(l),u=s(3893),r=s(2887),k=s(5909),d=s(589),m=s(5181),g=s.n(m),f=s(2195),y=s(6810);i().extend(s(1997));const v=n=>{let{data:a,location:s,pageContext:t,children:e}=n;const{tableOfContents:l,fields:m,frontmatter:v,excerpt:h}=a.mdx,{series:E}=t,w=i()(m.date).locale("ko").format(),M={headline:v.title,dateModified:w,datePublished:w,image:""+s.href+v.image,mainEntityOfPage:{"@type":"WebPage","@id":s.href},author:{"@type":"Person",name:"Lee Sun-Hyoup"},url:s.href,description:h,"@type":"BlogPosting","@context":"https://schema.org"};(0,o.useEffect)((()=>{void 0!==typeof document&&g()((function(){g()(".post-container a[data-footnote-ref]").each(((n,a)=>{var s;const t=null===(s=g()(a).attr("href"))||void 0===s?void 0:s.slice(1),e=g()("#"+t).text().replace("↩","");g()(a).attr("data-tooltip",e)}))}))}),[]);const{0:P,1:x}=(0,o.useState)();(0,o.useEffect)((()=>{x(a.allMdx.edges.filter((n=>n.node.fields.slug!==m.slug)).sort((()=>Math.random()-.5)).slice(0,6))}),[]);const S=v.draft&&!0;return(0,y.Y)(p.A,null,(0,y.Y)(c.A,{title:v.title,description:h,meta:[{name:"article:published_time",content:i()(m.date).locale("ko").format()},{name:"image",content:"https://aryumka.me"+v.image},{property:"og:image",content:"https://aryumka.me"+v.image},{property:"og:image:secure_url",content:"https://aryumka.me"+v.image}]}),(0,y.Y)(d.m,null,(0,y.Y)("script",{type:"application/ld+json"},JSON.stringify(M))),(0,y.Y)("h1",{className:"post-title"},v.title),(0,y.Y)("span",{className:"post-date"},"Written on ",i()(m.date).locale("en").format("LL")),(0,y.Y)("img",{src:v.image,style:{objectFit:"cover",maxHeight:300,width:"100%"}}),S||l.items&&(0,y.Y)(k.A,{items:l.items}),S||(null==E?void 0:E.items)&&(0,y.Y)(f.A,{title:E.title,items:E.items,currentItem:v.title}),(0,y.Y)("div",{className:"post-content"},S?(0,y.Y)(b,null,"Not yet published"):e),(0,y.Y)(u.A,{tags:v.tags,comment:v.comments}),P&&(0,y.Y)(r.A,{posts:P,current:m.slug}))};function h(n){return o.createElement(v,n,o.createElement(t.default,n))}const b=(0,e.A)("div",{target:"ezegrm70"})({name:"xl5zip",styles:"margin:16px 0;font-weight:bold;font-size:20px;text-align:center"})}}]);
//# sourceMappingURL=component---src-templates-post-tsx-content-file-path-src-posts-2023-12-31-holiday-til-3-mdx-2c3f700c67ee3b0b3768.js.map