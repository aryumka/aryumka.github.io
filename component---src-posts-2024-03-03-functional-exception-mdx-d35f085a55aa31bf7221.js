"use strict";(self.webpackChunkaryumka_me=self.webpackChunkaryumka_me||[]).push([[2962,4164,4646,1482,7824,6638,3284,8995,4926],{9674:function(n,s,a){a.r(s);var t=a(9128),p=a(9474);function o(n){const s=Object.assign({p:"p",span:"span"},(0,t.R)(),n.components);return p.createElement(p.Fragment,null,p.createElement(s.p,null,"이런 유틸을 만들어놓고"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">throwIfNull</span><span class="token punctuation">(</span>throwable<span class="token operator">:</span> Throwable<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token operator">=</span>\n  <span class="token keyword">this</span> <span class="token operator">?:</span> <span class="token keyword">throw</span> throwable\n\n<span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token punctuation">.</span><span class="token function">throwIf</span><span class="token punctuation">(</span>throwable<span class="token operator">:</span> Throwable<span class="token punctuation">,</span> predicate<span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-></span> Boolean<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token operator">=</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">predicate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> throwable <span class="token keyword">else</span> <span class="token keyword">this</span>\n\n<span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">defaultIfNull</span><span class="token punctuation">(</span>default<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token operator">=</span>\n  <span class="token keyword">this</span> <span class="token operator">?:</span> default\n\n<span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">defaultIfNull</span><span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> T<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token operator">=</span>\n  <span class="token keyword">this</span> <span class="token operator">?:</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"이렇게 사용하면 코드를 위에서부터 아래로 차례로 읽을 수 있어 가독성이 올라간다."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">getMember</span><span class="token punctuation">(</span>id<span class="token operator">:</span> MemberId<span class="token punctuation">)</span><span class="token operator">:</span> MemberDTO <span class="token operator">=</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>memberRepository\n    <span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">throwIfNull</span><span class="token punctuation">(</span><span class="token function">MemberNotFoundException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"멤버를 찾을 수 없습니다."</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">(</span>MemberDTO<span class="token operator">::</span>from<span class="token punctuation">)</span> </code></pre></div>'}}))}s.default=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.R)(),n.components);return s?p.createElement(s,n,p.createElement(o,n)):o(n)}},9128:function(n,s,a){a.d(s,{R:function(){return e}});var t=a(9474);const p={},o=t.createContext(p);function e(n){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(s):{...s,...n}}),[s,n])}}}]);
//# sourceMappingURL=component---src-posts-2024-03-03-functional-exception-mdx-d35f085a55aa31bf7221.js.map