{"version":3,"file":"94c88481a57182f2e7aa723b3b6cce4f7eecf718-b21362bdc5c5d88a7d2f.js","mappings":"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","sources":["webpack://aryumka.me/./src/components/Image/index.tsx","webpack://aryumka.me/./src/posts/2024-01-25-kotlin-reflection.mdx"],"sourcesContent":["import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width}\n        style={{ cursor: expandable ? 'zoom-in' : 'default' }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)'\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <div\n              style={{\n                borderRadius: 8,\n                maxWidth: 1200,\n                width: '80%',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            >\n              <img src={src} width=\"100%\" />\n            </div>\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\",\n    span: \"span\",\n    h3: \"h3\",\n    h4: \"h4\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, {\n    id: \"리플렉션이란\"\n  }, React.createElement(_components.a, {\n    href: \"#리플렉션이란\"\n  }, \"리플렉션이란?\")), \"\\n\", React.createElement(_components.p, null, \"런타임에 동적으로 클래스의 인스턴스를 \", React.createElement(_components.strong, null, \"생성 및 조작\"), \"할 수 있는 기술이다. 리플렉션을 사용하면 클래스에 대한 정보를 미리 알지 못해도 객체를 조작할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"주로 프로그램 내 특정 클래스나 함수에 대해 알지 못하는 라이브러리나 프레임워크 등에서 런타임에 동적으로 객체를 생성, 조작, 참조할 때 사용된다 (일반적인 코드를 작성할 때는 이미 클래스들의 정보를 알고 있으므로 사용할 일이 거의 없다).\\n대표적으로 스프링에서 빈을 생성, 주입할 때 리플렉션을 사용한다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"리플렉션의-작동원리\"\n  }, React.createElement(_components.a, {\n    href: \"#리플렉션의-작동원리\"\n  }, \"리플렉션의 작동원리\")), \"\\n\", React.createElement(_components.p, null, \"이게 어떻게 가능한걸까?\\nJVM 기반 언어에서 리플렉션 API는 컴파일 후 런타임에 로드된 \", React.createElement(_components.strong, null, \"JVM의 스태틱 영역(메서드 영역 또는 클래스 영역)에 접근\"), \"하여 일급시민들의 메타데이터를 조작하기 때문이다.\"), \"\\n\", React.createElement(_components.p, null, \"따라서 클래스나 함수의 이름만 알고 있다면 클래스의 생성자, 메서드, 멤버와 속성들까지도 거의 무한에 가까운 자유도로 객체를 제어할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"예를 들어 아래와 같은 private 생성자를 가진 클래스를\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">class</span> Foo <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">val</span> name<span class=\\\"token operator\\\">:</span> String <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Foo\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> String <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Foo(name='</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">$</span><span class=\\\"token expression\\\">name</span></span><span class=\\\"token string\\\">')\\\"</span></span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"아래와 같이 접근성을 조작하여 직접 생성할 수도 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">val</span> ctor <span class=\\\"token operator\\\">=</span> Foo<span class=\\\"token operator\\\">::</span><span class=\\\"token keyword\\\">class</span><span class=\\\"token punctuation\\\">.</span>primaryConstructor\\n    ctor<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">.</span>isAccessible <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span>\\n    <span class=\\\"token keyword\\\">val</span> foo <span class=\\\"token operator\\\">=</span> ctor<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Bar\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//Foo(name='Bar')</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"코틀린-리플렉션-api\"\n  }, React.createElement(_components.a, {\n    href: \"#코틀린-리플렉션-api\"\n  }, \"코틀린 리플렉션 API\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"gradle-의존성-추가\"\n  }, React.createElement(_components.a, {\n    href: \"#gradle-의존성-추가\"\n  }, \"gradle 의존성 추가\")), \"\\n\", React.createElement(_components.p, null, \"코틀린은 자바 리플렉션 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">java.lang.reflect</code>\"\n    }\n  }), \"과 코틀린 리플렉션 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">kotlin.reflect</code>\"\n    }\n  }), \"의 두 가지 방식을 제공한다.\\n자바에 존재하지 않는 nullable 타입이나 속성 등을 리플렉션하기 위해 아래와 같이 별도의 의존성을 추가해주어야 한다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token comment\\\">//gradle</span>\\ndependencies <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">implementation</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">kotlin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"reflect\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"코틀린의 리플렉션 API는 코틀린 뿐만이 아닌 다른 JVM 기반 언어들과 호환된다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"리플렉션이-가능한-대상\"\n  }, React.createElement(_components.a, {\n    href: \"#리플렉션이-가능한-대상\"\n  }, \"리플렉션이 가능한 대상\")), \"\\n\", React.createElement(Image, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/2352d0a0-9fa0-44c9-b037-acec8dcd887e/image.png\"\n  }), \"\\n\", React.createElement(_components.p, null, \"코틀린 리플렉션은 위와 같은 계층구조를 갖고 있다.\\n클래스의 리플렉션인 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">KClass</code>\"\n    }\n  }), \", 함수 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">KFunction</code>\"\n    }\n  }), \"와 변수\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">KProperty</code>\"\n    }\n  }), \", 그리고 이들을 포함하는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">KCallable</code>\"\n    }\n  }), \"과 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">KParameter</code>\"\n    }\n  }), \"로 이루어져 있다\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"클래스\"\n  }, React.createElement(_components.a, {\n    href: \"#클래스\"\n  }, \"클래스\")), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">val</span> c <span class=\\\"token operator\\\">=</span> MyClass<span class=\\\"token operator\\\">::</span><span class=\\\"token keyword\\\">class</span>\\n<span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">.</span>simpleName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//클래스 이름 출력</span>\\n<span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">.</span>qualifiedName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//패키지 경로를 포함한 클래스 이름 출력</span>\\n<span class=\\\"token keyword\\\">val</span> ctors <span class=\\\"token operator\\\">=</span> c<span class=\\\"token punctuation\\\">.</span>constructors <span class=\\\"token comment\\\">//클래스의 생성자들을 모두 가져옴</span>\\nc<span class=\\\"token punctuation\\\">.</span>isSealed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token comment\\\">// sealed class인지 여부. 재할당 가능</span>\\n<span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">.</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">::</code>\"\n    }\n  }), \"를 사용하여 사용해 클래스를 참조하며 위의 예시 이외에도 참조된 클래스를 제어하는 방법이 \", React.createElement(_components.a, {\n    href: \"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"KClass API 문서\"), \"에 자세히 설명되어 있다.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"함수\"\n  }, React.createElement(_components.a, {\n    href: \"#함수\"\n  }, \"함수\")), \"\\n\", React.createElement(_components.p, null, \"함수도 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">::</code>\"\n    }\n  }), \"를 활용하여 KFuntion으로 참조할 수 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">val</span> f <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">::</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nf<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Hello\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\nf<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">callBy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">mapOf</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token punctuation\\\">.</span>parameters<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">to</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Hello\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\nf<span class=\\\"token punctuation\\\">.</span>isInline\\nf<span class=\\\"token punctuation\\\">.</span>isExternal\\nf<span class=\\\"token punctuation\\\">.</span>visibility</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"리플렉션으로 가져온 함수를 바로 인자로 넘겨줄 수도 있다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">isOdd</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> x <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token keyword\\\">val</span> numbers <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>numbers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">::</span>isOdd<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"생성자인 Constructor도 KFuntion타입이다.\\n\", React.createElement(_components.a, {\n    href: \"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-function/\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"KFunction API 문서\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"인자\"\n  }, React.createElement(_components.a, {\n    href: \"#인자\"\n  }, \"인자\")), \"\\n\", React.createElement(_components.p, null, \"함수의 인자인 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">KParameter</code>\"\n    }\n  }), \"도 리플렉션이 가능하다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">val</span> param <span class=\\\"token operator\\\">=</span> MyClass<span class=\\\"token operator\\\">::</span>Class<span class=\\\"token punctuation\\\">.</span>primaryConstructor<span class=\\\"token operator\\\">!!</span><span class=\\\"token punctuation\\\">.</span>parameters<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">firstOrNull</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nparam<span class=\\\"token punctuation\\\">.</span>name\\nparam<span class=\\\"token punctuation\\\">.</span>type\\nparam<span class=\\\"token punctuation\\\">.</span>isOptional\\nparam<span class=\\\"token punctuation\\\">.</span>isVararg\\nparam<span class=\\\"token punctuation\\\">.</span>index\\nparam<span class=\\\"token punctuation\\\">.</span>annotations</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-parameter/\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"KParameter API 문서\")), \"\\n\", React.createElement(_components.h4, {\n    id: \"변수\"\n  }, React.createElement(_components.a, {\n    href: \"#변수\"\n  }, \"변수\")), \"\\n\", React.createElement(_components.p, null, \"변수도 위와 같이 제어가 가능하다. val로 선언된 변수도 수정이 가능하다.\\n\", React.createElement(_components.a, {\n    href: \"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-property/\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"KProperty API 문서\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"주의할-점\"\n  }, React.createElement(_components.a, {\n    href: \"#주의할-점\"\n  }, \"주의할 점\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"동적으로 생성되기 때문에 예측이 어렵다. 어떤 객체가 생성되며 어떤 메서드가 호출될 지. 따라서 컴파일타임과 런타임 시에 JVM 최적화가 어렵다.\"), \"\\n\", React.createElement(_components.li, null, \"런타임에 조작된 속성은 실행 중 계속 유지된다. 따라서 accessibility등을 조작 시 보안 이슈가 발생할 수 있다.\"), \"\\n\", React.createElement(_components.li, null, \"플랫폼 종속적이다. 리플렉션을 사용하여 만든 프로그램은 jvm 위에서만 동작한다.\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_ref","src","caption","width","expandable","isExpanded","toggleExpanded","useState","___EmotionJSX","style","cursor","onClick","undefined","dangerouslySetInnerHTML","__html","ReactDOM","position","top","left","height","backgroundColor","borderRadius","maxWidth","transform","document","body","_createMdxContent","props","_components","Object","assign","h2","a","p","strong","span","h3","h4","ul","li","_provideComponents","components","React","id","href","Image","rel","wrapper","MDXLayout"],"sourceRoot":""}