{"version":3,"file":"component---src-posts-2024-04-03-til-json-mdx-cca110546dd55dfcba53.js","mappings":"sKAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,OACNC,GAAI,KACJC,GAAI,KACJC,EAAG,MACFC,EAAAA,EAAAA,KAAsBT,EAAMU,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,0BAA2BO,EAAAA,cAAoBV,EAAYI,KAAM,CACzJO,wBAAyB,CACvBC,OAAQ,6CAER,cAAe,KAAMF,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,mBAAoBO,EAAAA,cAAoBV,EAAYI,KAAM,CAC1HO,wBAAyB,CACvBC,OAAQ,kDAER,wBAAyBF,EAAAA,cAAoBV,EAAYI,KAAM,CACjEO,wBAAyB,CACvBC,OAAQ,8CAER,+CAAgDF,EAAAA,cAAoBV,EAAYI,KAAM,CACxFO,wBAAyB,CACvBC,OAAQ,8CAER,sDAAuD,KAAMF,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,+BAAgCO,EAAAA,cAAoBV,EAAYI,KAAM,CAC9KO,wBAAyB,CACvBC,OAAQ,mDAER,KAAMF,EAAAA,cAAoBV,EAAYI,KAAM,CAC9CO,wBAAyB,CACvBC,OAAQ,sDAER,4BAA6B,KAAMF,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,kDAAmD,KAAMO,EAAAA,cAAoBV,EAAYK,GAAI,KAAM,KAAMK,EAAAA,cAAoBV,EAAYM,GAAI,KAAM,qBAAsB,KAAMI,EAAAA,cAAoBV,EAAYM,GAAI,KAAM,UAAW,KAAMI,EAAAA,cAAoBV,EAAYM,GAAI,KAAM,2EAA6EI,EAAAA,cAAoBV,EAAYO,EAAG,CACldM,KAAM,8EACNC,IAAK,gCACJ,sBAAuB,MAAO,KAAMJ,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,6DAA8DO,EAAAA,cAAoBV,EAAYI,KAAM,CAClLO,wBAAyB,CACvBC,OAAQ,mDAER,6DAA8DF,EAAAA,cAAoBV,EAAYI,KAAM,CACtGO,wBAAyB,CACvBC,OAAQ,sDAER,sCAAuC,KAAMF,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,kEAAmEO,EAAAA,cAAoBV,EAAYO,EAAG,CAC9LM,KAAM,yEACNC,IAAK,gCACJ,iBAAkB,KAAMJ,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,cAAeO,EAAAA,cAAoBV,EAAYI,KAAM,CACvHO,wBAAyB,CACvBC,OAAQ,iDAER,6BAA8B,KAAMF,EAAAA,cAAoBV,EAAYI,KAAM,CAC5EO,wBAAyB,CACvBC,OAAQ,y7BAER,KAAMF,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,oEACrD,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOgB,QAASC,GAAaf,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,KAAsBT,EAAMU,YAC3E,OAAOO,EAAYN,EAAAA,cAAoBM,EAAWjB,EAAOW,EAAAA,cAAoBZ,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECnCA,MAAMkB,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBV,GAC/B,MAAMW,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfT,EACFA,EAAWW,GAGb,IAAIA,KAAsBX,EACnC,GACA,CAACW,EAAmBX,GAExB,C","sources":["webpack://aryumka.me/./src/posts/2024-04-03-til-json.mdx","webpack://aryumka.me/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"시스템끼리 통신할 때(특히 web 기반) \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">JSON</code>\"\n    }\n  }), \" 포맷을 사용한다.\"), \"\\n\", React.createElement(_components.p, null, \"이 때 발신하는 측에서 직렬화\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">stringify</code>\"\n    }\n  }), \"가 발생하고 수신하는 측에서는 역직렬화\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">parse</code>\"\n    }\n  }), \"가 필요하다.\\n데이터를 수신하는 측에서 JSON을 다시 객체로 사용하기 위해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">parse</code>\"\n    }\n  }), \"하게 되는데 이 때 유효하지 않은 문자가 포함된 경우 parsing error가 발생한다.\"), \"\\n\", React.createElement(_components.p, null, \"따라서 데이터의 json에서 유효하지 않은 문자열을\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">validation</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">normalization</code>\"\n    }\n  }), \" 등 후처리 작업을 통해 처리해주어야 한다.\"), \"\\n\", React.createElement(_components.p, null, \"JSON에서 parsing 오류가 발생하는 경우는 다음과 같은 경우들이 대표적이다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"JSON 문법에 맞지 않는 경우\"), \"\\n\", React.createElement(_components.li, null, \"인코딩 이슈\"), \"\\n\", React.createElement(_components.li, null, \"유효하지 않은 문자열이 포함된 경우 - 키와 밸류를 둘러싼 따옴표를 제외한 따옴표(\\\")나 제어문자 등 출력문자가 아닌 문자 등\\n\", React.createElement(_components.a, {\n    href: \"https://www.geeksforgeeks.org/what-is-json-parsing-error-invalid-character/\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"출처: geeksforgeeks\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"만약 JSON 문법에 맞지 않거나 인코딩 이슈가 발생하는 등 데이터 역직렬화에 심각한 지장이 있는 경우 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">validation</code>\"\n    }\n  }), \"을 통해 예외를 리턴하는 것이 더 적절할 수 있지만 일부 문자열만 제거해주면 데이터 표현이 가능한 경우 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">normalization</code>\"\n    }\n  }), \"을 통해 문자열을 직접 수정해주는 것도 좋은 방법일 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"제어문자는 아래 유니코드 표에서 U+0000부터 U+001F까지, U+007F부터 U+009F까지를 포함한다.\\n\", React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/List_of_Unicode_characters#Control_codes\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"유니코드표 - 제어문자\")), \"\\n\", React.createElement(_components.p, null, \"자바에서는 간단하게 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">p{Cntrl}</code>\"\n    }\n  }), \"와 같은 정규식으로 제어문자 체크가 가능하다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">private</span> <span class=\\\"token class-name\\\">String</span> <span class=\\\"token function\\\">getValidJsonString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">String</span> jsonString<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token comment\\\">//\\\\p{Cntrl} : 제어문자, \\\\\\\" : 큰따옴표</span>\\n\\t<span class=\\\"token keyword\\\">return</span> jsonString<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replaceAll</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"[\\\\\\\\p{Cntrl}\\\\\\\"]\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"그러나 위와 같이 표현할 경우 개행문자(\\\\n)나 캐리지리턴(\\\\r) 같은 문자들이 모두 삭제되므로 주의해야 한다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","ul","li","a","_provideComponents","components","React","dangerouslySetInnerHTML","__html","href","rel","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}