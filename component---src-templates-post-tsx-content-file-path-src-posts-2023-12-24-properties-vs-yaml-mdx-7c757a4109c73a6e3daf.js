"use strict";(self.webpackChunkaryumka_me=self.webpackChunkaryumka_me||[]).push([[8803],{1978:function(n,e,a){a.r(e);var s=a(9128),t=a(9474);function l(n){const e=Object.assign({h2:"h2",a:"a",p:"p",strong:"strong",span:"span",h3:"h3",img:"img"},(0,s.R)(),n.components);return t.createElement(t.Fragment,null,t.createElement(e.h2,{id:"개요"},t.createElement(e.a,{href:"#개요"},"개요")),"\n",t.createElement(e.p,null,"스프링부트는 어플리케이션 코드의 변경을 최소화하기 위하여 설정파일, CLI Argument 등 다양한 방법으로 외부 설정을 주입받습니다."),"\n",t.createElement(e.p,null,"그리고 이러한 외부 설정은 운영, 테스트, 개발 등 실행환경에 따라 달라지게 됩니다.\n이를 위해 프로필 별 설정(Profile-specific Properties)이 필요하게 됩니다. 대개 프로필 별 설정파일을 통해 관리하게 됩니다."),"\n",t.createElement(e.p,null,t.createElement(e.a,{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto.properties-and-configuration",rel:"nofollow noopener noreferrer"},"스프링부트 공식 문서"),"에서는 설정 파일을 이용할 때 두 가지 방법을 권장합니다.\n첫 번째로는 전통적인 방식으로 ",t.createElement(e.strong,null,"properties"),"를 이용하는 방법과 두 번째로는 ",t.createElement(e.strong,null,"yaml")," 파일을 이용하는 방법입니다.\n공식 문서의 예제 코드 또한 위 두 가지 방법으로 제공됩니다."),"\n",t.createElement(e.p,null,t.createElement(e.strong,null,"properties 예시")),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="properties"><pre class="language-properties"><code class="language-properties"><span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">cruncher</span>\n<span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>\n<span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost/test</span>\n<span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">9000</span></code></pre></div>'}}),"\n",t.createElement(e.p,null,t.createElement(e.strong,null,"yaml 예시")),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"cruncher"</span>\n  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>\n    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> <span class="token string">"com.mysql.jdbc.Driver"</span>\n    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">"jdbc:mysql://localhost/test"</span>\n<span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9000</span></code></pre></div>'}}),"\n",t.createElement(e.p,null,"yaml 파일로 설정 시 장점과 단점은 다음과 같습니다."),"\n",t.createElement(e.h2,{id:"장점"},t.createElement(e.a,{href:"#장점"},"장점")),"\n",t.createElement(e.h3,{id:"1-계층적-표현-가능"},t.createElement(e.a,{href:"#1-계층적-표현-가능"},"1. 계층적 표현 가능")),"\n",t.createElement(e.p,null,"계층적 표현을 통해 코드의 응집도와 가독성이 증가합니다. 같은 계층의 설정이라면 한 곳에 모아서 관리하기에 용이하며 각 설정의 구조도 한 눈에 파악할 수 있습니다.\n여러 번 반복해 쓸 필요 없이 하위의 각 설정으로 들여쓰기를 이용하여 추가할 수 있습니다.\n특히 어플리케이션이 커지고 설정이 복잡해진 경우 더욱 편리합니다."),"\n",t.createElement(e.h3,{id:"2-중복코드-줄여줌"},t.createElement(e.a,{href:"#2-중복코드-줄여줌"},"2. 중복코드 줄여줌")),"\n",t.createElement(e.p,null,"properties로 설정 시 모든 프로필에 동일한 설정이 적용될 경우 각 파일에 반복된 코드를 모두 넣어줘야 합니다.\n하지만 yaml을 이용하면 같은 파일에 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">---</code>'}})," 구분자를 넣어 각 프로필을 설정할 수 있습니다. 프로필이 없는 설정, 즉 디폴트 설정은 모든 프로필에 동일하게 적용됩니다.\n아래 예제와 같이 공통으로 관리하는 설정과 각 프로필 별로 달라지는 설정을 나누어 관리할 수 있습니다."),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token comment">#공통 환경 설정</span>\n<span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">shutdown</span><span class="token punctuation">:</span> graceful\n  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>\n    <span class="token key atrule">jsp</span><span class="token punctuation">:</span>\n      <span class="token key atrule">init-parameters</span><span class="token punctuation">:</span>\n        <span class="token key atrule">mappedfile</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n  <span class="token key atrule">jsp-servlet</span><span class="token punctuation">:</span>\n    <span class="token key atrule">init-parameters</span><span class="token punctuation">:</span>\n      <span class="token key atrule">development</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n  <span class="token key atrule">max-http-header-size</span><span class="token punctuation">:</span> 2MB\n\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>\n    <span class="token key atrule">hikari</span><span class="token punctuation">:</span>\n      <span class="token key atrule">max-lifetime</span><span class="token punctuation">:</span> <span class="token number">180000</span>\n      <span class="token key atrule">maximum-pool-size</span><span class="token punctuation">:</span> <span class="token number">1</span>\n      <span class="token key atrule">minimum-idle</span><span class="token punctuation">:</span> <span class="token number">1</span>\n      <span class="token key atrule">idle-timeout</span><span class="token punctuation">:</span> <span class="token number">600000</span>\n      <span class="token key atrule">pool-name</span><span class="token punctuation">:</span> Logos<span class="token punctuation">-</span>pi\n      <span class="token key atrule">connection-test-query</span><span class="token punctuation">:</span> <span class="token string">"select 1+1"</span>\n  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>\n    <span class="token key atrule">view</span><span class="token punctuation">:</span>\n      <span class="token key atrule">prefix</span><span class="token punctuation">:</span> /WEB<span class="token punctuation">-</span>INF/jsp/\n      <span class="token key atrule">suffix</span><span class="token punctuation">:</span> .jsp\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> ui\n  <span class="token key atrule">devtools</span><span class="token punctuation">:</span>\n    <span class="token key atrule">livereload</span><span class="token punctuation">:</span>\n      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n\n<span class="token punctuation">---</span> <span class="token comment">#local 환경 설정</span>\n\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>\n    <span class="token key atrule">active</span><span class="token punctuation">:</span> local\n  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>\n    <span class="token key atrule">hikari</span><span class="token punctuation">:</span>\n      <span class="token key atrule">jdbc-url</span><span class="token punctuation">:</span> <span class="token string">"jdbc:mariadb://127.0.0.1:3306/local?useUnicode=true&amp;characterEncoding=utf8"</span>\n  <span class="token key atrule">tomcat</span><span class="token punctuation">:</span>\n    <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">5</span>\n\n<span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8011</span>\n\n<span class="token punctuation">---</span> <span class="token comment">#stg 환경 설정</span>\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> stg\n  <span class="token key atrule">server</span><span class="token punctuation">:</span>\n    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8011</span>\n    \n<span class="token punctuation">---</span> <span class="token comment">#prd 환경 설정</span>\n\n<span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>\n\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> prd\n  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>\n    <span class="token key atrule">tomcat</span><span class="token punctuation">:</span>\n      <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">50000</span>\n    <span class="token key atrule">hikari</span><span class="token punctuation">:</span>\n      <span class="token key atrule">jdbc-url</span><span class="token punctuation">:</span> <span class="token string">"jdbc:mariadb://199.999.99.999:3306/prd?useUnicode=true&amp;characterEncoding=utf8"</span></code></pre></div>'}}),"\n",t.createElement(e.h3,{id:"3-기타-유용한-장점"},t.createElement(e.a,{href:"#3-기타-유용한-장점"},"3. 기타 유용한 장점")),"\n",t.createElement(e.p,null,t.createElement(e.strong,null,"- yml 문법 사용 가능")),"\n",t.createElement(e.p,null,"yml은 xml, json처럼 데이터를 표현하는 양식이지만 문법은 상대적으로 이해하기 쉽고, 가독성이 좋도록 디자인 되었습니다. 또 모든 데이터를 리스트, 해쉬, 스칼라 데이터의 조합으로 적절히 표현할 수 있다는 믿음을 가지고 만들어졌습니다.\n",t.createElement(e.img,{src:"https://velog.velcdn.com/images/aryumka/post/9173f985-e7b4-4d03-9996-93a08c517845/image.png",alt:""})),"\n",t.createElement(e.p,null,t.createElement(e.a,{href:"https://ko.wikipedia.org/wiki/YAML",rel:"nofollow noopener noreferrer"},"위키피디아에서 yaml 설명 보기"),"\n이러한 yml의 문법은 스프링부트의 설정문서에서도 사용할 수 있습니다."),"\n",t.createElement(e.p,null,"배열을 예로 들자면 properties 에서는 아래와 같이 표현하던 것들을"),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="properties"><pre class="language-properties"><code class="language-properties"><span class="token key attr-name">my.servers[0]</span><span class="token punctuation">=</span><span class="token value attr-value">dev.example.com</span>\n<span class="token key attr-name">my.servers[1]</span><span class="token punctuation">=</span><span class="token value attr-value">another.example.com</span></code></pre></div>'}}),"\n",t.createElement(e.p,null,"yaml에서는 아래와 같이 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">-</code>'}}),"를 사용하거나"),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">my:\nservers:\n\t- dev.example.com\n\t- another.example.com</code></pre></div>'}}),"\n",t.createElement(e.p,null,"또는 이렇게 한 줄로 표현합니다."),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">my:\n  servers: [dev.example.com, another.example.com]</code></pre></div>'}}),"\n",t.createElement(e.p,null,"자세한 문법은 ",t.createElement(e.a,{href:"https://yaml.org/spec/1.2.2/",rel:"nofollow noopener noreferrer"},"yaml 공식문서"),"또는 구글 검색을 통해 참고 바랍니다."),"\n",t.createElement(e.p,null,t.createElement(e.strong,null,"- UIF-8 인코딩 지원")),"\n",t.createElement(e.p,null,"properties파일에 한글을 쓰면 인식을 못하여 글자가 깨지게 됩니다.\nIDE에서 설정하여 깨지지 않도록 하는 방법도 있지만 한 번 깨진 글자를 복구할 순 없습니다.\nyaml은 UTF-8 인코딩을 지원하므로 깨질 걱정 없이 한글로 주석 등을 달 수 있어 편리합니다."),"\n",t.createElement(e.h2,{id:"단점"},t.createElement(e.a,{href:"#단점"},"단점")),"\n",t.createElement(e.h3,{id:"1--애너테이션-사용-불가능"},t.createElement(e.a,{href:"#1--애너테이션-사용-불가능"},"1. ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">@PropertySource</code>'}})," 애너테이션 사용 불가능")),"\n",t.createElement(e.p,null,"스프링부트 공식문서에 나와있는 yaml의 단점입니다.\n하지만 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">@Value</code>'}})," 애너테이션으로 대체할 수 있으며 설정파일 내 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">placeholder</code>'}}),"(${...}) 등 기본적인 사용 방식은 기존 properties와 동일합니다."),"\n",t.createElement(e.h3,{id:"2-문법이-다소-엄격"},t.createElement(e.a,{href:"#2-문법이-다소-엄격"},"2. 문법이 다소 엄격")),"\n",t.createElement(e.p,null,"개행, 들여쓰기, 띄어쓰기 등을 철저하게 지켜야 합니다.\n특히 특수문자 같은 경우 url 등 일정 형식이 아닌 리터럴(ex. 비밀번호, 이메일)의 경우 리터럴",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">""</code>'}})," 표시를 확실히 해주어야 합니다.\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">boolean</code>'}}),", ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">integer</code>'}}),", ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">float</code>'}})," 등 기본적인 타입은 모두 인식 가능합니다.\n상식 선에서 따라할 수 있는 것들로 몇 번 작성하면 금방 익숙해질만한 것들입니다."))}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,s.R)(),n.components);return e?t.createElement(e,n,t.createElement(l,n)):l(n)}},5936:function(n,e,a){a.r(e),a.d(e,{default:function(){return E}});var s=a(1978),t=a(5530),l=a(9474),p=a(8844),o=a(1047),c=a(8928),r=a.n(c),u=a(3893),i=a(2887),k=a(5909),m=a(589),g=a(5181),d=a.n(g),y=a(2195),h=a(6810);r().extend(a(1997));const f=n=>{let{data:e,location:a,pageContext:s,children:t}=n;const{tableOfContents:c,fields:g,frontmatter:f,excerpt:E}=e.mdx,{series:b}=s,x=r()(g.date).locale("ko").format(),_={headline:f.title,dateModified:x,datePublished:x,image:""+a.href+f.image,mainEntityOfPage:{"@type":"WebPage","@id":a.href},author:{"@type":"Person",name:"Lee Sun-Hyoup"},url:a.href,description:E,"@type":"BlogPosting","@context":"https://schema.org"};(0,l.useEffect)((()=>{void 0!==typeof document&&d()((function(){d()(".post-container a[data-footnote-ref]").each(((n,e)=>{var a;const s=null===(a=d()(e).attr("href"))||void 0===a?void 0:a.slice(1),t=d()("#"+s).text().replace("↩","");d()(e).attr("data-tooltip",t)}))}))}),[]);const{0:L,1:I}=(0,l.useState)();(0,l.useEffect)((()=>{I(e.allMdx.edges.filter((n=>n.node.fields.slug!==g.slug)).sort((()=>Math.random()-.5)).slice(0,6))}),[]);const M=f.draft&&!0;return(0,h.Y)(p.A,null,(0,h.Y)(o.A,{title:f.title,description:E,meta:[{name:"article:published_time",content:r()(g.date).locale("ko").format()},{name:"image",content:"https://aryumka.me"+f.image},{property:"og:image",content:"https://aryumka.me"+f.image},{property:"og:image:secure_url",content:"https://aryumka.me"+f.image}]}),(0,h.Y)(m.m,null,(0,h.Y)("script",{type:"application/ld+json"},JSON.stringify(_))),(0,h.Y)("h1",{className:"post-title"},f.title),(0,h.Y)("span",{className:"post-date"},"Written on ",r()(g.date).locale("en").format("LL")),(0,h.Y)("img",{src:f.image,style:{objectFit:"cover",maxHeight:300,width:"100%"}}),M||c.items&&(0,h.Y)(k.A,{items:c.items}),M||(null==b?void 0:b.items)&&(0,h.Y)(y.A,{title:b.title,items:b.items,currentItem:f.title}),(0,h.Y)("div",{className:"post-content"},M?(0,h.Y)(v,null,"Not yet published"):t),(0,h.Y)(u.A,{tags:f.tags,comment:f.comments}),L&&(0,h.Y)(i.A,{posts:L,current:g.slug}))};function E(n){return l.createElement(f,n,l.createElement(s.default,n))}const v=(0,t.A)("div",{target:"ezegrm70"})({name:"xl5zip",styles:"margin:16px 0;font-weight:bold;font-size:20px;text-align:center"})}}]);
//# sourceMappingURL=component---src-templates-post-tsx-content-file-path-src-posts-2023-12-24-properties-vs-yaml-mdx-7c757a4109c73a6e3daf.js.map