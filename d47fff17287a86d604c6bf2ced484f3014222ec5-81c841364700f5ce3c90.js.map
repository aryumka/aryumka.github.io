{"version":3,"file":"d47fff17287a86d604c6bf2ced484f3014222ec5-81c841364700f5ce3c90.js","mappings":"6IAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,WAAY,aACZC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,OAAQ,SACRC,KAAM,SACLC,EAAAA,EAAAA,KAAsBd,EAAMe,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,4KAA6K,KAAMY,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,sEAAuE,KAAMY,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,SAAUY,EAAAA,cAAoBf,EAAYI,EAAG,CACvdY,KAAM,wHACNC,IAAK,gCACJ,cAAe,4GAA6G,KAAMF,EAAAA,cAAoBf,EAAYK,GAAI,CACvKa,GAAI,eACHH,EAAAA,cAAoBf,EAAYI,EAAG,CACpCY,KAAM,gBACL,iBAAkB,KAAMD,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,uGAAwG,KAAMY,EAAAA,cAAoBf,EAAYK,GAAI,CACpNa,GAAI,SACHH,EAAAA,cAAoBf,EAAYI,EAAG,CACpCY,KAAM,UACL,UAAW,KAAMD,EAAAA,cAAoBf,EAAYM,GAAI,CACtDY,GAAI,WACHH,EAAAA,cAAoBf,EAAYI,EAAG,CACpCY,KAAM,YACL,YAAa,KAAMD,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,yHAA0H,KAAMY,EAAAA,cAAoBf,EAAYO,WAAY,KAAM,KAAMQ,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,gBAAiB,KAAMY,EAAAA,cAAoBf,EAAYQ,GAAI,KAAM,KAAMO,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,yBAA0B,KAAMM,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,iCAAkC,KAAMM,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,YAAa,KAAMM,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,aAAc,KAAMM,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,aAAc,KAAMM,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,YAAa,KAAMM,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,YAAa,KAAMM,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,cAAe,MAAO,MAAO,KAAMM,EAAAA,cAAoBf,EAAYM,GAAI,CACr6BY,GAAI,MACHH,EAAAA,cAAoBf,EAAYI,EAAG,CACpCY,KAAM,OACL,OAAQ,KAAMD,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,oHAAqH,KAAMY,EAAAA,cAAoBf,EAAYM,GAAI,CACvNY,GAAI,iBACHH,EAAAA,cAAoBf,EAAYI,EAAG,CACpCY,KAAM,kBACL,kBAAmB,KAAMD,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,2FAA4F,KAAMY,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,qDAAsD,KAAMY,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,qBAAsBY,EAAAA,cAAoBf,EAAYI,EAAG,CAC5WY,KAAM,2FACNC,IAAK,gCACJ,2BAA4B,wBAAyB,KAAMF,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,4DAA6D,KAAMY,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,qMAAsM,KAAMY,EAAAA,cAAoBf,EAAYU,GAAI,CACjcQ,GAAI,iBACHH,EAAAA,cAAoBf,EAAYI,EAAG,CACpCY,KAAM,kBACL,kBAAmB,KAAMD,EAAAA,cAAoBf,EAAYG,EAAG,KAAMY,EAAAA,cAAoBf,EAAYI,EAAG,CACtGY,KAAM,wDACNC,IAAK,gCACJ,8BAA+B,4EAA6E,KAAMF,EAAAA,cAAoBf,EAAYO,WAAY,KAAM,KAAMQ,EAAAA,cAAoBf,EAAYG,EAAG,KAAMY,EAAAA,cAAoBf,EAAYW,OAAQ,KAAM,yBAA0B,qCAAsCI,EAAAA,cAAoBf,EAAYW,OAAQ,KAAM,0BAA2B,0FAA2F,MAAO,KAAMI,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,iIAAkI,KAAMY,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,6BAA8B,KAAMY,EAAAA,cAAoBf,EAAYO,WAAY,KAAM,KAAMQ,EAAAA,cAAoBf,EAAYQ,GAAI,KAAM,KAAMO,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,iDAAkD,KAAMM,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,iCAAkC,KAAMM,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,YAAa,KAAMM,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,aAAc,KAAMM,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,aAAc,KAAMM,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,YAAa,KAAMM,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,YAAa,KAAMM,EAAAA,cAAoBf,EAAYS,GAAI,KAAMM,EAAAA,cAAoBf,EAAYY,KAAM,CACh5CO,wBAAyB,CACvBC,OAAQ,0CAER,gBAAiB,KAAML,EAAAA,cAAoBf,EAAYS,GAAI,KAAMM,EAAAA,cAAoBf,EAAYY,KAAM,CACzGO,wBAAyB,CACvBC,OAAQ,0CAER,iBAAkB,KAAML,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,YAAa,KAAMM,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,cAAe,KAAMM,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,eAAgB,KAAMM,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,YAAa,MAAO,MAAO,KAAMM,EAAAA,cAAoBf,EAAYK,GAAI,CACrUa,GAAI,QACHH,EAAAA,cAAoBf,EAAYI,EAAG,CACpCY,KAAM,SACL,SAAU,KAAMD,EAAAA,cAAoBf,EAAYQ,GAAI,KAAM,KAAMO,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,KAAMM,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,oCAAqCY,EAAAA,cAAoBf,EAAYW,OAAQ,KAAM,wDAAyD,MAAO,KAAMI,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,KAAMM,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,sKAAuKY,EAAAA,cAAoBf,EAAYI,EAAG,CACtlBY,KAAM,0GACNC,IAAK,gCACJ,aAAc,+DAAgE,MAAO,MAAO,KAAMF,EAAAA,cAAoBf,EAAYK,GAAI,CACvIa,GAAI,MACHH,EAAAA,cAAoBf,EAAYI,EAAG,CACpCY,KAAM,OACL,OAAQ,KAAMD,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,8BAA+B,KAAMY,EAAAA,cAAoBf,EAAYY,KAAM,CACnIO,wBAAyB,CACvBC,OAAQ,gooDAER,KAAML,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,eAAgBY,EAAAA,cAAoBf,EAAYI,EAAG,CACpGY,KAAM,2CACNC,IAAK,gCACJ,gBAAiB,KAAM,KAAMF,EAAAA,cAAoBf,EAAYK,GAAI,CAClEa,GAAI,SACHH,EAAAA,cAAoBf,EAAYI,EAAG,CACpCY,KAAM,UACL,UAAW,KAAMD,EAAAA,cAAoBf,EAAYQ,GAAI,KAAM,KAAMO,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,KAAMM,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,iLAAkL,MAAO,KAAMY,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,KAAMM,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,wCAAyCY,EAAAA,cAAoBf,EAAYI,EAAG,CAC/fY,KAAM,iJACNC,IAAK,gCACJ,oBAAqB,eAAgB,MAAO,KAAMF,EAAAA,cAAoBf,EAAYS,GAAI,KAAM,KAAMM,EAAAA,cAAoBf,EAAYG,EAAG,KAAM,wDAAyD,MAAO,MAChN,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOsB,QAASC,GAAarB,OAAOC,OAAO,CAAC,GAAGW,EAAAA,EAAAA,KAAsBd,EAAMe,YAC3E,OAAOQ,EAAYP,EAAAA,cAAoBO,EAAWvB,EAAOgB,EAAAA,cAAoBjB,EAAmBC,IAAUD,EAAkBC,EAC9H,C","sources":["webpack://aryumka.me/./src/posts/2024-01-14-reinventing-big-integer.mdx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    blockquote: \"blockquote\",\n    ul: \"ul\",\n    li: \"li\",\n    h4: \"h4\",\n    strong: \"strong\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"개발 업계에서 바퀴를 다시 만들지 말라는 말을 흔히 들을 수 있다. 이는 보편적으로 오버엔지니어링을 하지말라는 의미로 볼 수 있지만 공부를 하는 측면에선 바퀴를 재발명해볼 가치가 있다. 평소 별 생각 없이 쓰던 것들을 분해하고 다시 구현해봄으로 CS 원리에 대한 이해와 지식을 얻을 수 있기 때문이다.\"), \"\\n\", React.createElement(_components.p, null, \"여기에 더불어 기존의 것을 기반으로 새로운 것을 만들 수 있는 능력도 얻고 싶다는 기대로 이 시리즈를 시작해보려 한다.\"), \"\\n\", React.createElement(_components.p, null, \"첫 시작은 \", React.createElement(_components.a, {\n    href: \"https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/math/BigInteger.html#multiply(java.math.BigInteger)\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"BigInteger\"), \"로 정했다. 평소 회사에서 큰 수를 다루는 상황이 많아 BigInteger를 많이 사용하는 데 실제로 어떻게 동작하는지는 잘 몰랐기 때문에 이번 기회에 내부 동작 원리를 파악하고자 한다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"biginteger란\"\n  }, React.createElement(_components.a, {\n    href: \"#biginteger란\"\n  }, \"BigInteger란?\")), \"\\n\", React.createElement(_components.p, null, \"Long 범위를 넘어가는 큰 범위의 수 연산을 할 수 있도록 지원하는 클래스이다. Java의 BigInteger는 기본적으로 Integer에서 제공하는 기본적 기능들을 지원한다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"구현-과정\"\n  }, React.createElement(_components.a, {\n    href: \"#구현-과정\"\n  }, \"구현 과정\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"구현할-메서드\"\n  }, React.createElement(_components.a, {\n    href: \"#구현할-메서드\"\n  }, \"구현할 메서드\")), \"\\n\", React.createElement(_components.p, null, \"우선 클라이언트에게 필요할 대략적인 인터페이스를 먼저 README에 정의하며 인터페이스 설계를 시작했다.\\n처음에는 사칙연산과 toString() 정도로 시작했지만 구현과정에서 자연스럽게 확장될 수밖에 없었다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"처음 생각한 인터페이스\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"String을 인자로 받는 기본 생성자\"), \"\\n\", React.createElement(_components.li, null, \"Long, Int, String를 인자로 받는 팩토리\"), \"\\n\", React.createElement(_components.li, null, \"덧셈(plus)\"), \"\\n\", React.createElement(_components.li, null, \"뺄셈(minus)\"), \"\\n\", React.createElement(_components.li, null, \"곱셈(times)\"), \"\\n\", React.createElement(_components.li, null, \"나눗셈(div)\"), \"\\n\", React.createElement(_components.li, null, \"나머지(rem)\"), \"\\n\", React.createElement(_components.li, null, \"toString()\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"성능\"\n  }, React.createElement(_components.a, {\n    href: \"#성능\"\n  }, \"성능\")), \"\\n\", React.createElement(_components.p, null, \"기본적으로 문자열을 연산하기 때문에 실제 숫자를 연산하는 것보다 훨씬 느리다. 구현한 주요기능들의 시간복잡도는 각 덧셈, 뺄셈은 O(n), 곱셈은 O(n^2), 나눗셈은 O(n^2) ~ O(n^3)다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"테스트-작성과-코드-구현\"\n  }, React.createElement(_components.a, {\n    href: \"#테스트-작성과-코드-구현\"\n  }, \"테스트 작성과 코드 구현\")), \"\\n\", React.createElement(_components.p, null, \"구현에 앞서 먼저 정의된 인터페이스를 사용하는 테스트들을 만들었다.\\n컴파일은 되지만 실패하는 메서드를 만들 때 코틀린의 TODO() 메서드가 빛을 발했다.\"), \"\\n\", React.createElement(_components.p, null, \"TDD 방식으로 개발을 하다보니 이런 케이스도 있지 않을까? 라는 생각이 계속 떠올랐다.\"), \"\\n\", React.createElement(_components.p, null, \"예를 들어 minus를 만들면서 \", React.createElement(_components.a, {\n    href: \"https://github.com/aryumka/BigInteger.kt/commit/ae00155354ebb98e9f41659ebe3a9947363dbc34\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"빼기를 당하는 쪽이 더 작은 테스트 케이스\"), \"도 필요하지 않을까? 같은 의문이다.\"), \"\\n\", React.createElement(_components.p, null, \"의문이 생기면 바로 테스트를 만들어 검증하며 진행했다. 통과하지 못하는 테스트들은 통과하게 만들었다.\"), \"\\n\", React.createElement(_components.p, null, \"위와 같은 생각으로 빼기를 만들다보니 부호(sign)를 먼저 만들어야겠다는 생각이 들었다. 부호는 BigInteger 클래스 안의 Enum 클래스로 만들었다.\\n부호를 만들다보니 '-123456789'같은 단항연산자(Unary Operator)도 필요하겠다는 생각까지 미치게 되었다.\\n위와 같은 생각의 흐름을 모두 테스트로 작성 뒤 구현하였다.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"코틀린의-연산자-오버로딩\"\n  }, React.createElement(_components.a, {\n    href: \"#코틀린의-연산자-오버로딩\"\n  }, \"코틀린의 연산자 오버로딩\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://kotlinlang.org/docs/operator-overloading.html\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"코틀린에서는 연산자를 재정의할 수 있게 해준다.\"), \"\\n즉 직접 구현한 메서드를 a.plus(b)가 아닌 a + b로 사용할 수 있다.\\n가능한 연산자는 크게 아래 두가지로 나뉜다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"단항연산자(unary operator)\"), \"\\n+, -, ++, -- 등 하나의 항에 적용되는 연산자\\n\", React.createElement(_components.strong, null, \"이항연산자(binary operator)\"), \"\\n기본적인 산술연산자를 포함하여 포함(contains()), 인덱스, 비교(==, <, >)와 증감연산자(+=, -=) 등 두 개의 항에 적용되는 연산자\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"처음에는 문자열로만 생성해 간단한 int 연산만을 테스트했으나 Long끼리 계산하는 경우 등 점점 복잡한 테스트케이스를 추가해갔다.\\n구현하는 내내 빨간불을 초록불로 만드는 작업은 매우 매우 재밌고 희열감을 주는 작업이었다.\"), \"\\n\", React.createElement(_components.p, null, \"최종적으로 완성된 인터페이스는 다음과 같았다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"String을 인자로 받아 유효성 검사 뒤 부호(sign)도 함께 할당하는 생성자\"), \"\\n\", React.createElement(_components.li, null, \"Long, Int, String를 인자로 받는 팩토리\"), \"\\n\", React.createElement(_components.li, null, \"덧셈(plus)\"), \"\\n\", React.createElement(_components.li, null, \"뺄셈(minus)\"), \"\\n\", React.createElement(_components.li, null, \"곱셈(times)\"), \"\\n\", React.createElement(_components.li, null, \"나눗셈(div)\"), \"\\n\", React.createElement(_components.li, null, \"나머지(rem)\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">+</code>\"\n    }\n  }), \" (unaryPlus)\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">-</code>\"\n    }\n  }), \" (unaryMinus)\"), \"\\n\", React.createElement(_components.li, null, \"절대값(abs)\"), \"\\n\", React.createElement(_components.li, null, \"toString()\"), \"\\n\", React.createElement(_components.li, null, \"compareTo()\"), \"\\n\", React.createElement(_components.li, null, \"equals()\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"배운-점\"\n  }, React.createElement(_components.a, {\n    href: \"#배운-점\"\n  }, \"배운 점\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"TDD를 적용, 다양한 케이스들을 즉시 검증하며 구현했다. \", React.createElement(_components.strong, null, \"눈에 보이지 않는 불안감을 해결 가능하고 눈에 보이는 결과물로 만드는 게 중요하다고 느꼈다.\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"String으로 계산하는 건 마치 손으로 써서 계산하는 과정을 코드로 구현하는 기분이었다. 검색해보니 이미 이를 부르는 grade-school(초등학교) 알고리즘이라는 공식적인 용어도 있었다.\\n큰 수에 대해 시간복잡도를 개선할 수 있는 알고리즘도 있었다. 예를 들어 곱셈의 경우 대표적으로 \", React.createElement(_components.a, {\n    href: \"https://ko.wikipedia.org/wiki/%EC%B9%B4%EB%9D%BC%EC%B6%94%EB%B0%94_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"카라추바 알고리즘\"), \"이 있는데 이는 성능을 O(n^log(3)/log(2))까지 개선할 수 있는 분할, 정복 방법이라고 한다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"결과\"\n  }, React.createElement(_components.a, {\n    href: \"#결과\"\n  }, \"결과\")), \"\\n\", React.createElement(_components.p, null, \"완성된 BigInteger.kt는 아래와 같다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token keyword\\\">package</span> aryumka<span class=\\\"token punctuation\\\">.</span>biginteger\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> integer<span class=\\\"token operator\\\">:</span> String\\n  <span class=\\\"token keyword\\\">val</span> sign<span class=\\\"token operator\\\">:</span> Sign\\n\\n  <span class=\\\"token keyword\\\">init</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isEmpty</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"value must not be empty\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">matches</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">Regex</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"^[+-]?[0-9_]+$\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"value must be a number\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">startsWith</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"-\\\"</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">startsWith</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"+\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer <span class=\\\"token operator\\\">=</span> value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">substring</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"_\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>sign <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">startsWith</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"-\\\"</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> Sign<span class=\\\"token punctuation\\\">.</span>NEGATIVE <span class=\\\"token keyword\\\">else</span> Sign<span class=\\\"token punctuation\\\">.</span>POSITIVE\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer <span class=\\\"token operator\\\">=</span> value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"_\\\"</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>sign <span class=\\\"token operator\\\">=</span> Sign<span class=\\\"token punctuation\\\">.</span>POSITIVE\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// Factory methods</span>\\n  <span class=\\\"token keyword\\\">companion</span> <span class=\\\"token keyword\\\">object</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">of</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">of</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">of</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token operator\\\">:</span> Long<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// Plus</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">plus</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"\\\"</span></span>\\n    <span class=\\\"token keyword\\\">var</span> carry <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n    <span class=\\\"token keyword\\\">var</span> valueLength <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token keyword\\\">var</span> otherLength <span class=\\\"token operator\\\">=</span> other<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span>\\n\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>valueLength <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> otherLength <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> carry <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">val</span> valueDigit <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>valueLength <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">[</span>valueLength<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token char\\\">'0'</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token number\\\">0</span>\\n      <span class=\\\"token keyword\\\">val</span> otherDigit <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>otherLength <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> other<span class=\\\"token punctuation\\\">[</span>otherLength<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token char\\\">'0'</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token number\\\">0</span>\\n\\n      <span class=\\\"token keyword\\\">val</span> sum <span class=\\\"token operator\\\">=</span> valueDigit <span class=\\\"token operator\\\">+</span> otherDigit <span class=\\\"token operator\\\">+</span> carry\\n\\n      result <span class=\\\"token operator\\\">+=</span> <span class=\\\"token punctuation\\\">(</span>sum <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span>\\n      carry <span class=\\\"token operator\\\">=</span> sum <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">10</span>\\n\\n      valueLength<span class=\\\"token operator\\\">--</span>\\n      otherLength<span class=\\\"token operator\\\">--</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reversed</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">plus</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">plus</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">plus</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> Long<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">plus</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">plus</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> BigInteger<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">plus</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">)</span>\\n\\n\\n\\n  <span class=\\\"token comment\\\">// Minus</span>\\n  <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">minus</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">minus</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">minus</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> Long<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">minus</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">minus</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> BigInteger<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">minus</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">minus</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"\\\"</span></span>\\n    <span class=\\\"token keyword\\\">var</span> carry <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n\\n    <span class=\\\"token comment\\\">//find out which is bigger</span>\\n    <span class=\\\"token keyword\\\">var</span> minuend <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"\\\"</span></span>\\n    <span class=\\\"token keyword\\\">var</span> subtrahend <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"\\\"</span></span>\\n    <span class=\\\"token keyword\\\">var</span> sign <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"\\\"</span></span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      minuend <span class=\\\"token operator\\\">=</span> other\\n      subtrahend <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer\\n      sign <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"-\\\"</span></span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      minuend <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer\\n      subtrahend <span class=\\\"token operator\\\">=</span> other\\n      sign <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"\\\"</span></span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"0\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">var</span> minuLength <span class=\\\"token operator\\\">=</span> minuend<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token keyword\\\">var</span> subLength <span class=\\\"token operator\\\">=</span> subtrahend<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>minuLength <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> subLength <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> carry <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">var</span> minuDigit <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>minuLength <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> minuend<span class=\\\"token punctuation\\\">[</span>minuLength<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token char\\\">'0'</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token number\\\">0</span>\\n      <span class=\\\"token keyword\\\">val</span> subDigit <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>subLength <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> subtrahend<span class=\\\"token punctuation\\\">[</span>subLength<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token char\\\">'0'</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token number\\\">0</span>\\n\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>minuDigit <span class=\\\"token operator\\\">&lt;</span> subDigit<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        minuDigit <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">10</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n\\n      <span class=\\\"token keyword\\\">val</span> diff <span class=\\\"token operator\\\">=</span> minuDigit <span class=\\\"token operator\\\">-</span> subDigit <span class=\\\"token operator\\\">-</span> carry\\n\\n      carry <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>minuDigit <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token number\\\">1</span>\\n      <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token number\\\">0</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n\\n      result <span class=\\\"token operator\\\">+=</span> diff <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">10</span>\\n\\n      minuLength<span class=\\\"token operator\\\">--</span>\\n      subLength<span class=\\\"token operator\\\">--</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span>sign <span class=\\\"token operator\\\">+</span> result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reversed</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">trimStart</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token char\\\">'0'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// Times</span>\\n  <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">times</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">times</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">times</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> Long<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">times</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">times</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> BigInteger<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">times</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">times</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> results <span class=\\\"token operator\\\">=</span> mutableListOf<span class=\\\"token operator\\\">&lt;</span>String<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">var</span> carry <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n    <span class=\\\"token keyword\\\">var</span> valueLength <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token keyword\\\">var</span> otherLength <span class=\\\"token operator\\\">=</span> other<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span>\\n\\n    <span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"\\\"</span></span>\\n\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token keyword\\\">in</span> otherLength downTo <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">val</span> otherDigit <span class=\\\"token operator\\\">=</span> other<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token char\\\">'0'</span>\\n      <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>j <span class=\\\"token keyword\\\">in</span> valueLength downTo <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">val</span> valueDigit <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token char\\\">'0'</span>\\n\\n        <span class=\\\"token keyword\\\">val</span> sum <span class=\\\"token operator\\\">=</span> valueDigit <span class=\\\"token operator\\\">*</span> otherDigit <span class=\\\"token operator\\\">+</span> carry\\n\\n        result <span class=\\\"token operator\\\">+=</span> <span class=\\\"token punctuation\\\">(</span>sum <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span>\\n\\n        carry <span class=\\\"token operator\\\">=</span> sum <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">10</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>carry <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        result <span class=\\\"token operator\\\">+=</span> carry\\n        carry <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      results<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reversed</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      result <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"\\\"</span></span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> results<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">mapIndexed</span> <span class=\\\"token punctuation\\\">{</span> index<span class=\\\"token punctuation\\\">,</span> s <span class=\\\"token operator\\\">-></span>\\n      s<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">padEnd</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">+</span> index<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token char\\\">'0'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span> <span class=\\\"token punctuation\\\">{</span> acc<span class=\\\"token punctuation\\\">,</span> bigInteger <span class=\\\"token operator\\\">-></span>\\n      acc <span class=\\\"token operator\\\">+</span> bigInteger\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// Div</span>\\n  <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">div</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">div</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">div</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> Long<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">div</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">div</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> BigInteger<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">div</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">div</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"\\\"</span></span>\\n    <span class=\\\"token keyword\\\">var</span> sign <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>sign <span class=\\\"token operator\\\">==</span> <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>sign<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"\\\"</span></span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"-\\\"</span></span>\\n    <span class=\\\"token keyword\\\">var</span> remainder <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">val</span> divisor <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>other <span class=\\\"token operator\\\">==</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"0\\\"</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">ArithmeticException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Division by zero\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">var</span> count <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>remainder <span class=\\\"token operator\\\">>=</span> divisor <span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">of</span><span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      count<span class=\\\"token operator\\\">++</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    remainder <span class=\\\"token operator\\\">-=</span> divisor <span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">of</span><span class=\\\"token punctuation\\\">(</span>count<span class=\\\"token punctuation\\\">)</span>\\n    result <span class=\\\"token operator\\\">+=</span> count\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span>sign <span class=\\\"token operator\\\">+</span> result<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// Rem</span>\\n  <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> Int<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> Long<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> BigInteger<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> String<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> sign <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>sign <span class=\\\"token operator\\\">==</span> <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>sign<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"\\\"</span></span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"-\\\"</span></span>\\n    <span class=\\\"token keyword\\\">var</span> remainder <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">val</span> divisor <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>other <span class=\\\"token operator\\\">==</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"0\\\"</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">ArithmeticException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"Division by zero\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">var</span> count <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>remainder <span class=\\\"token operator\\\">>=</span> divisor <span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">of</span><span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      count<span class=\\\"token operator\\\">++</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    remainder <span class=\\\"token operator\\\">-=</span> divisor <span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">of</span><span class=\\\"token punctuation\\\">(</span>count<span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span>sign <span class=\\\"token operator\\\">+</span> remainder<span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// Unary</span>\\n  <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">unaryPlus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">this</span>\\n\\n  <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">unaryMinus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>sign <span class=\\\"token operator\\\">==</span> Sign<span class=\\\"token punctuation\\\">.</span>POSITIVE<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"-</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token expression\\\"><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> Any<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Boolean <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">is</span> BigInteger <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> other<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">is</span> String <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> other\\n      <span class=\\\"token keyword\\\">is</span> Int <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> other<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">is</span> Long <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> other<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">else</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token boolean\\\">false</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">operator</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">compareTo</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token operator\\\">:</span> BigInteger<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Int <span class=\\\"token operator\\\">=</span>\\n    <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>sign <span class=\\\"token operator\\\">==</span> Sign<span class=\\\"token punctuation\\\">.</span>POSITIVE <span class=\\\"token operator\\\">&amp;&amp;</span> other<span class=\\\"token punctuation\\\">.</span>sign <span class=\\\"token operator\\\">==</span> Sign<span class=\\\"token punctuation\\\">.</span>NEGATIVE <span class=\\\"token operator\\\">-></span> <span class=\\\"token number\\\">1</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>sign <span class=\\\"token operator\\\">==</span> Sign<span class=\\\"token punctuation\\\">.</span>NEGATIVE <span class=\\\"token operator\\\">&amp;&amp;</span> other<span class=\\\"token punctuation\\\">.</span>sign <span class=\\\"token operator\\\">==</span> Sign<span class=\\\"token punctuation\\\">.</span>POSITIVE <span class=\\\"token operator\\\">-></span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>sign <span class=\\\"token operator\\\">==</span> Sign<span class=\\\"token punctuation\\\">.</span>POSITIVE <span class=\\\"token operator\\\">&amp;&amp;</span> other<span class=\\\"token punctuation\\\">.</span>sign <span class=\\\"token operator\\\">==</span> Sign<span class=\\\"token punctuation\\\">.</span>POSITIVE <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">></span> other<span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token number\\\">1</span>\\n        <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">&lt;</span> other<span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span>\\n        <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareTo</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>sign <span class=\\\"token operator\\\">==</span> Sign<span class=\\\"token punctuation\\\">.</span>NEGATIVE <span class=\\\"token operator\\\">&amp;&amp;</span> other<span class=\\\"token punctuation\\\">.</span>sign <span class=\\\"token operator\\\">==</span> Sign<span class=\\\"token punctuation\\\">.</span>NEGATIVE <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">></span> other<span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span>\\n        <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">&lt;</span> other<span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token number\\\">1</span>\\n        <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareTo</span><span class=\\\"token punctuation\\\">(</span>other<span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token keyword\\\">else</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token number\\\">0</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> String <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>sign <span class=\\\"token operator\\\">==</span> Sign<span class=\\\"token punctuation\\\">.</span>POSITIVE<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer <span class=\\\"token keyword\\\">else</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"-</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token expression\\\"><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span>\\n  <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">abs</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> BigInteger <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">BigInteger</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">enum</span> <span class=\\\"token keyword\\\">class</span> Sign <span class=\\\"token punctuation\\\">{</span>\\n    POSITIVE<span class=\\\"token punctuation\\\">,</span> NEGATIVE\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"테스트 코드를 포함한 \", React.createElement(_components.a, {\n    href: \"https://github.com/aryumka/BigInteger.kt\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"전체 코드 깃헙 저장소\"), \".\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"아쉬운-점\"\n  }, React.createElement(_components.a, {\n    href: \"#아쉬운-점\"\n  }, \"아쉬운 점\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"부호를 Enum이 아닌 정수로 표현할수 있지 않았을까? 곱셈, 나눗셈 연산을 할 때다 if문을 통해 비교한 코드가 조금 맘에 걸린다. 양수는 0, 음수는 1로 논리곱으로 구현하면 될 것 같은데.\\n실제로도 컴퓨터에서 수를 표현 시 non-negative를 0으로 negative를 1로 표현하기도 한다고 한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"아규먼트만 바뀌는데 중복코드가 너무 많은 것 같다.\\n시간을 내서 \", React.createElement(_components.a, {\n    href: \"https://wooooooak.github.io/%EB%B2%88%EC%97%AD%ED%95%98%EB%A9%B0%20%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0/2021/01/04/kotest_data_driven_testing/\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"data-driven test\"), \"로 리팩토링해야겠다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"여유가 생기면 성능 개선 후 power나 Augmented assignment도 구현해야겠다.\"), \"\\n\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","h2","h3","blockquote","ul","li","h4","strong","span","_provideComponents","components","React","href","rel","id","dangerouslySetInnerHTML","__html","wrapper","MDXLayout"],"sourceRoot":""}