{"version":3,"file":"component---src-posts-2024-05-12-kafka-axon-eventsourcing-mdx-867dbb5ab5516477c3f9.js","mappings":"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","sources":["webpack://aryumka.me/./src/posts/2024-05-12-kafka-axon-eventsourcing.mdx","webpack://aryumka.me/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">StreamingEventProcessor</code>\"\n    }\n  }), \"가 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">EventStream</code>\"\n    }\n  }), \"을 열 때 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Token</code>\"\n    }\n  }), \"이 선언되어야 한다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"전체 이벤트 스트림 안에서 특정 이벤트의 위치를 특정하거나 특정한 위치에서 이벤트 스트림을 열기 위해 사용된다.\"), \"\\n\", React.createElement(_components.li, null, \"추후 스트림을 다시 열 때 마지막 이벤트를 고를 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"따라서\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"예상치 못한 셧다운에 마지막 이벤트에 대한 추적이 가능하다.\"), \"\\n\", React.createElement(_components.li, null, \"싱글 스레드에서 특정 이벤트를 처리하도록 보장하거나 여러 스레드에서 - 각 프로세서가 작업을 분배하여 병렬 작업할 수 있도록 한다.\"), \"\\n\", React.createElement(_components.li, null, \"해당 프로세서의 토큰 위치를 조정함으로써 이벤트 replay가 가능하다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Token</code>\"\n    }\n  }), \"에 대한 CRUD가 필요하기에 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">TrackingTokens</code>\"\n    }\n  }), \"는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Token Store</code>\"\n    }\n  }), \"에 저장되어야 한다. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Token Store</code>\"\n    }\n  }), \"는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">InMemoryTokenStore</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">JpaTokenStore</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">JdbcTokenStore</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">MongoTokenStore</code>\"\n    }\n  }), \"를 사용할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"token을 기준으로 원하는 지점에서 replay할 수도 있다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">token</code>\"\n    }\n  }), \"을 못찾거나 타임아웃, 예외 등이 발생하면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">token stealing</code>\"\n    }\n  }), \"이 일어날 수 있다.\\n롤백이 불가능하다면 이벤트 실행이 멱등성을 가지도록 설계해야 한다.\"), \"\\n\", React.createElement(_components.p, null, \"만약 순서가 보장되고 하나의 스레드에서 처리되어야 하는 작업이라면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">AMQP</code>\"\n    }\n  }), \"를 이용한 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">subscribing event processor</code>\"\n    }\n  }), \"를 써야 한다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","ol","li","ul","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}