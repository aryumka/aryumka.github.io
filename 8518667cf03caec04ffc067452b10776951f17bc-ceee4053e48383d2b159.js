"use strict";(self.webpackChunkaryumka_me=self.webpackChunkaryumka_me||[]).push([[688],{941:function(n,e,a){a.r(e);var t=a(9128),s=a(9474),l=a(5799);function c(n){const e=Object.assign({h1:"h1",a:"a",p:"p",span:"span",h2:"h2",h3:"h3",strong:"strong",ul:"ul",li:"li",del:"del",blockquote:"blockquote"},(0,t.R)(),n.components);return s.createElement(s.Fragment,null,s.createElement(e.h1,{id:"기본-개념"},s.createElement(e.a,{href:"#기본-개념"},"기본 개념")),"\n",s.createElement(e.p,null,s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RabbitMQ</code>'}}),"는 송신자",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Publisher</code>'}}),"와 수신자",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Subscriber</code>'}}),"끼리 메시지를 주고 받기 위해 사용되는 메시지 브로커이다."),"\n",s.createElement(e.h1,{id:"메시징-방법"},s.createElement(e.a,{href:"#메시징-방법"},"메시징 방법")),"\n",s.createElement(e.p,null,"아래의 6개 예제를 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">SpringAMQP</code>'}}),"를 사용하여 구현하고 마지막 예제는 코틀린으로 구현할 것이다. 예제는 ",s.createElement(e.a,{href:"https://www.rabbitmq.com/tutorials",rel:"nofollow noopener noreferrer"},"RabbitMQ 공식 튜토리얼"),"을 참고하였다."),"\n",s.createElement(e.h2,{id:"1-hello-world"},s.createElement(e.a,{href:"#1-hello-world"},'1. "Hello World"')),"\n",s.createElement(e.p,null,"가장 간단한 1:1로 메시지를 주고 받는 모델을 만들어보자. 송신자가 수신자의 우편함에 직접 편지를 넣어주는 걸 생각하면 된다."),"\n",s.createElement(l.A,{src:"https://velog.velcdn.com/images/aryumka/post/b83d0b9b-990f-419e-8853-d9c1fa8dde43/image.png"}),"\n",s.createElement(e.p,null,"송신자",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Publisher</code>'}}),'가 특정 큐로 "Hello World!"라는 메시지를 보낸다. 이 때 메시지는 동일한 큐(=우편함)에 연결된 수신자',s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Subscriber</code>'}}),"에게 도착한다. 큐인만큼 메시지는 FIFO 방식으로 전달된다. 큐는 빈으로 생성하여 사용한다."),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="java"><pre class="language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>\n\t<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 큐의 이름을 "hello"라고 지정한다.</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(e.p,null,"끝이다."),"\n",s.createElement(e.p,null,"코드로 살펴보자."),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> void <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// 메시지 정의</span>\n\tString message <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"Hello World!"</span></span><span class="token punctuation">;</span>\n    <span class="token comment">// 지정된 큐로 발송한다</span>\n\t<span class="token keyword">this</span><span class="token punctuation">.</span>template<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 발송한 메시지 출력</span>\n\tSystem<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">" [x] Sent \'"</span></span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">"\'"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(e.p,null,"여기서 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this.template</code>'}}),"으로 참조된 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RabbitTemplate</code>'}}),"은 여러 설정들을 자동으로 지원하는 등 보일러플레이트 코드를 줄이고 가독성 있는 코드를 작성할 수 있게 해준다."),"\n",s.createElement(e.p,null,"전체 코드는 ",s.createElement(e.a,{href:"https://github.com/rabbitmq/rabbitmq-tutorials/tree/main/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut1",rel:"nofollow noopener noreferrer"},"RabbitMQ 공식 튜토리얼 깃헙"),"에서 확인할 수 있다."),"\n",s.createElement(e.h2,{id:"2-work-queues"},s.createElement(e.a,{href:"#2-work-queues"},"2. Work Queues")),"\n",s.createElement(e.p,null,"마치 택배 물류창고처럼 하나의 메시지 생산자",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Producer</code>'}}),"가 메시지를 보내면 임시저장소에 쌓이게 되고 다수의 소비자",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Consumer</code>'}}),"가 분배하여 가져가는 패턴도 있다."),"\n",s.createElement(l.A,{src:"https://velog.velcdn.com/images/aryumka/post/263bb0f7-3d52-444b-9eef-7c2cd61f1d4f/image.png"}),"\n",s.createElement(e.p,null,"이런 모델은 경쟁적 소비자 패턴(",s.createElement(e.a,{href:"https://www.enterpriseintegrationpatterns.com/patterns/messaging/CompetingConsumers.html",rel:"nofollow noopener noreferrer"},"Competing consumer pattern"),")의 기본적인 형태이며 다수의 메시지를 최대한 빠르게 처리해야 할 때 사용된다."),"\n",s.createElement(e.p,null,"1의 기본모델과 무엇이 다를까?"),"\n",s.createElement(e.h3,{id:"qosquality-of-service"},s.createElement(e.a,{href:"#qosquality-of-service"},"QoS(Quality of Service)")),"\n",s.createElement(e.p,null,"가장 먼저 각 컨슈머에게 ",s.createElement(e.strong,null,"어떻게 분배"),"할지를 정해야 한다.\n하나의 소비자가 너무 많은 메시지를 소비하여 지연을 발생시키고 다른 컨슈머들에 할당된 자원을 낭비하는 것은 바람직하지 않기 때문이다."),"\n",s.createElement(e.p,null,"기본적으로 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RabbitMQ</code>'}}),"는 컨슈머가 여러 대일 때 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Round-Robin</code>'}})," 방식으로 클라이언트 사이드 로드밸런싱을 시도한다. 즉, 각 메시지를 차례대로 다음 컨슈머에게 전달한다는 뜻이다."),"\n",s.createElement(l.A,{src:"https://velog.velcdn.com/images/aryumka/post/080a1e9e-498e-4cf8-8d62-22ef4db49d43/image.png"}),"\n",s.createElement(l.A,{src:"https://velog.velcdn.com/images/aryumka/post/8e7c2743-d42b-449e-bf5c-9cc0f2da2d8d/image.png"}),"\n",s.createElement(e.p,null,"위 이미지는 해당 튜토리얼의 실행 결과이다. 별도의 설정이 없어도 1,3,5번 메시지와 2,4,6번 메시지가 각 2 개의 Worker에 나눠서 처리되는 것을 볼 수 있다."),"\n",s.createElement(e.p,null,"그러나 이 방식은 어떤 컨슈머가 아직 작업 중인지 여부는 확인하지 않는다는 문제가 있다. 따라서 균등 분배",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Fair Dispatch</code>'}}),"를 위해서는 컨슈머의 채널",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Channel</code>'}}),"에 한번에 몇 개의 메시지를 받을 것인지를 정의해야 한다."),"\n",s.createElement(e.p,null,s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Spring AMQP</code>'}}),"에서는 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Fair Dispatch</code>'}})," 방식을 디폴트로 제공하고 있다.한번에 받을 수 있는 메시지 개수 ",s.createElement(e.a,{href:"https://docs.spring.io/spring-amqp/reference/amqp/containerAttributes.html#prefetchCount",rel:"nofollow noopener noreferrer"},"Prefetch Count"),"는  디폴트 250개이며  ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">AbstractMessageListenerContainer.setPrefetchCount(int prefetchCount)</code>'}}),"에서 변경할 수 있다."),"\n",s.createElement(e.h3,{id:"메시지-확인ack"},s.createElement(e.a,{href:"#메시지-확인ack"},"메시지 확인(ACK)")),"\n",s.createElement(e.p,null,"만약 여러 대의 컨슈머 중 하나가 죽는다면 어떻게 할까?\n일단 메시지가 성공적으로 수신됐는지 확인을 해야 그 다음의 처리가 가능하다."),"\n",s.createElement(e.p,null,s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RabbitMQ</code>'}}),"에서는 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">autoAck</code>'}}),"을 false로 설정하여 정상적인 메시지에 대해 응답 확인(",s.createElement(e.a,{href:"http://www.ktword.co.kr/test/view/view.php?no=774",rel:"nofollow noopener noreferrer"},"ACK"),")을 보낼 수 있다."),"\n",s.createElement(e.p,null,"큐에 올라간 메시지가 처리되면 리스너에서 아래와 같이 확인",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ACK</code>'}})," 처리를 한다."),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">channel.basicAck()</code></pre></div>'}}),"\n",s.createElement(e.p,null,"응답이 확인되지 않으면 메시지는 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">unack</code>'}})," 상태가 된다."),"\n",s.createElement(e.p,null,"만약 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">autoAck</code>'}})," 설정이 false인 경우 컨슈머가 위 메서드를 호출하지 않으면 메모리에 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">UnAcked</code>'}}),"가 쌓여 심각한 문제가 발생할 수 있다."),"\n",s.createElement(l.A,{src:"https://velog.velcdn.com/images/aryumka/post/3175dc2b-21ae-4cc9-a8ec-7443f6eb5cb4/image.png"}),"\n",s.createElement(e.p,null,s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ACK</code>'}})," 되지 않은 메시지는 위 이미지처럼 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RabbitMQ management UI</code>'}}),"에서도 확인할 수 있고 아래의 명령어로도 확인할 수 있다."),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged</code></pre></div>'}}),"\n",s.createElement(e.p,null,s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Spring AMQP</code>'}}),"에서는 디폴트로 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">channel.basicAck()</code>'}}),"을 호출해 확인 처리를 하므로 위와 같은 이슈를 신경쓰지 않아도 되지만 java 라이브러리 등을 혼합하여 사용한다면 주의해야 한다."),"\n",s.createElement(e.p,null,"응답 확인을 받은 이후 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RabbitMQ</code>'}}),"는 디폴트로 실패한 메시지를 다시 큐에 올린다(Requeue). 큐에 올라간 메시지는 다른 컨슈머 등에 의해 재처리될 수 있다. 동시간 대에 모든 컨슈머가 다운되어도 컨슈머가 복구되는 시점에 해당 큐와 연결되어 메시지를 재전송할 수 있다."),"\n",s.createElement(e.p,null,"이 때 만약 다시 큐에 올리지 않고 예외를 던지도록 하고 싶다면 아래와 같이 프로퍼티에 명시적으로 설정하면"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">defaultRequeueRejected=false</code></pre></div>'}}),"\n",s.createElement(e.p,null,s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">AmqpRejectAndDontRequeueException</code>'}}),"를 던지게 된다."),"\n",s.createElement(e.p,null,"메시지 확인을 하는 쪽에서는 기본적으로 메시지를 보낸 채널과 동일한 채널에 응답을 보낸다. 채널이 다를 경우 예외가 발생한다."),"\n",s.createElement(e.h3,{id:"메시지-보존"},s.createElement(e.a,{href:"#메시지-보존"},"메시지 보존")),"\n",s.createElement(e.p,null,s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Spring AMQP</code>'}}),"의 메시지는 기본적으로 durable(영속화",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">persistence</code>'}})," 되도록)하게 설정된다. 따라서 브로커가 리부팅되어도 큐와 메시지가 복구된다. 물론 이런 설정이 메시지 무손실을 보장하는 것은 아니다. 메시지가 영속화되기 전 다운될 경우도 있기 때문이다."),"\n",s.createElement(e.p,null,"무손실 보장 정도를 높이고 싶다면 7의 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">publisher Confirms</code>'}})," 설정을 이용해야 한다."),"\n",s.createElement(e.p,null,"전체 코드는 ",s.createElement(e.a,{href:"https://github.com/rabbitmq/rabbitmq-tutorials/tree/main/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut2",rel:"nofollow noopener noreferrer"},"RabbitMQ 공식 튜토리얼 깃헙"),"에서 확인할 수 있다."),"\n",s.createElement(e.h2,{id:"3-publishsubscribe"},s.createElement(e.a,{href:"#3-publishsubscribe"},"3. Publish/Subscribe")),"\n",s.createElement(e.p,null,"하나의 메시지 발신자",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Publisher</code>'}}),"와 다수의 구독자",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Subscriber</code>'}}),"로 구성된 Publish/Subscribe 패턴도 있다. SNS 또는 미디어를 구독하는 것과 비슷하다."),"\n",s.createElement(e.p,null,"다수의 메시지 소비자가 있지만 2의 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Work Queue</code>'}})," 모델과 다른 점은 소비자들이 경쟁적으로 메시지를 소비하는 것이 아니라 구독자 모두가 동일한 메시지를 함께 받는다는 점이다."),"\n",s.createElement(e.p,null,"여기서 메시지 발신자는 누가 자신의 메시지를 모르고 또 알 필요도 없이 모든 구독자에게 브로드캐스팅을 한다. 구독자는 언제든 자유롭게 구독/해제를 할 수 있다."),"\n",s.createElement(e.h3,{id:"exchange"},s.createElement(e.a,{href:"#exchange"},"Exchange")),"\n",s.createElement(e.p,null,"그렇다면 구독자를 모르는 채로 어떻게 메시지를 전달할 수 있을까?"),"\n",s.createElement(e.p,null,"여기서 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Exchange</code>'}}),"의 개념이 등장한다."),"\n",s.createElement(e.p,null,"퍼블리셔는 큐가 아닌 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Exchange</code>'}}),"에 메시지를 보낸다. 이 때 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Exchange</code>'}}),"는 큐와 연결되어 있다. 구독자 또한 발신자에게서 메시지를 직접 받는 것이 아닌 자신이 구독하는 큐로부터 메시지를 받는다."),"\n",s.createElement(l.A,{src:"https://velog.velcdn.com/images/aryumka/post/25777f23-a1d4-469a-b80e-e4cd187cf624/image.png"}),"\n",s.createElement(e.p,null,"실제 발신자에게서 메시지를 받고 동시에 구독자와 연결된 큐에 메시지를 푸쉬하는 역할을 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Exchange</code>'}}),"가 담당하며 큐는 메시지를 임시로 저장하는 버퍼의 역할을 한다."),"\n",s.createElement(e.p,null,s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Exchange</code>'}}),"는  ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">direct</code>'}}),", ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">topic</code>'}}),", ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">headers</code>'}}),", ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fanout</code>'}}),"의 4개가 있으며 여기에서는 모든 큐에 무차별적으로 메시지를 보내야 하기에 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fanout</code>'}})," 타입의 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Exchange</code>'}}),"를 사용한다."),"\n",s.createElement(e.p,null,s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Spring AMQP</code>'}}),"에서는 아래와 같이 빈으로 설정 후 주입하여 사용한다."),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="java"><pre class="language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">FanoutExchange</span> <span class="token function">fanout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span><span class="token string">"tut.fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(e.h3,{id:"익명-큐"},s.createElement(e.a,{href:"#익명-큐"},"익명 큐")),"\n",s.createElement(e.p,null,"구독자는 언제든 자유롭게 구독을 시작할 수 있다."),"\n",s.createElement(e.p,null,"또 오래된 메시지는 받을 필요가 없기 때문에 구독을 시작할 때마다 새로운 큐를 할당받아야 한다. 마찬가지로 구독을 끊어 더 이상 연결된 구독자가 없을 때 큐는 삭제된다."),"\n",s.createElement(e.p,null,"하나의 큐를 여러 구독자가 공유할 필요가 없기에 하나의 큐는 하나의 구독자와 연결된다.\n이러한 특성을 가진 큐를 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Spring AMQP</code>'}}),"에서는 아래와 같이 간단하게 생성할 수 있다."),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="java"><pre class="language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">autoDeleteQueue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AnonymousQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(e.p,null,"위와 같이 큐의 이름을 지정하지 않고 서버에서 지정한 익명(server-named)의 자동삭제(auto delete)되면서 하나의 구독자와 연결되는(exclusive) 큐를 만든다."),"\n",s.createElement(e.h3,{id:"바인딩"},s.createElement(e.a,{href:"#바인딩"},"바인딩")),"\n",s.createElement(e.p,null,"이제 위에서 만든 큐와 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Exchange</code>'}}),"와 연결할 차례이다. 이러한 연결정보를 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RabbitMQ</code>'}}),"에서는 바인딩",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Binding</code>'}}),"이라고 부른다."),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="java"><pre class="language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding1</span><span class="token punctuation">(</span><span class="token class-name">FanoutExchange</span> fanout<span class="token punctuation">,</span>\n        <span class="token class-name">Queue</span> autoDeleteQueue1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>autoDeleteQueue1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>fanout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(e.p,null,"구독자는 아래와 같이 익명큐를 리스너에 넘겨줄 수 있다."),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="java"><pre class="language-java"><code class="language-java"><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"#{autoDeleteQueue1.name}"</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n\t<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(e.p,null,"최종적으로 완성되는 형태는 아래와 같다."),"\n",s.createElement(l.A,{src:"https://velog.velcdn.com/images/aryumka/post/8e40100e-6376-41d0-bcdf-77e04e3a3ee2/image.png"}),"\n",s.createElement(e.p,null,"전체 코드는 ",s.createElement(e.a,{href:"https://github.com/rabbitmq/rabbitmq-tutorials/tree/main/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut3",rel:"nofollow noopener noreferrer"},"RabbitMQ 공식 튜토리얼 깃헙"),"에서 확인할 수 있다."),"\n",s.createElement(e.h2,{id:"4-routing"},s.createElement(e.a,{href:"#4-routing"},"4. Routing")),"\n",s.createElement(e.p,null,"만약 메시지 특정 조건에 따라 필터링하여 특정 구독자에게 보내야 한다면 어떻게 해야 할까? 마치 우체국에서 주소에 따라 알맞은 우편함에 편지를 넣어주듯이 말이다."),"\n",s.createElement(l.A,{src:"https://velog.velcdn.com/images/aryumka/post/3659e059-1cbb-4072-bf3b-04e04acf9edd/image.png"}),"\n",s.createElement(e.p,null,"이 때 일괄적으로 모든 구독자에게 메시지를 보내는 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Fanout Exchange</code>'}}),"가 아닌 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Direct Exchange</code>'}}),"를 사용하여 큐를 바인딩하면 된다."),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="java"><pre class="language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">direct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"tut.direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding1a</span><span class="token punctuation">(</span><span class="token class-name">DirectExchange</span> direct<span class="token punctuation">,</span>\n    <span class="token class-name">Queue</span> autoDeleteQueue1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 위에서 정의한 Exchange와 큐를 "orange"라는 routing key로 바인딩</span>\n    <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>autoDeleteQueue1<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>direct<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(e.p,null,s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fanout</code>'}}),"과 다르게 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">with</code>'}}),"를 통해 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">routing key</code>'}}),"를 추가한다."),"\n",s.createElement(e.p,null,"바인딩 정보는 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RabbitMQ management UI</code>'}}),"에서 확인할 수 있다."),"\n",s.createElement(l.A,{src:"https://velog.velcdn.com/images/aryumka/post/820ddb1f-84a5-4813-b2ee-8533061149b1/image.png"}),"\n",s.createElement(e.p,null,"전체 코드는 ",s.createElement(e.a,{href:"https://github.com/rabbitmq/rabbitmq-tutorials/tree/main/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut4",rel:"nofollow noopener noreferrer"},"RabbitMQ 공식 튜토리얼 깃헙"),"에서 확인할 수 있다."),"\n",s.createElement(e.h2,{id:"5-topics"},s.createElement(e.a,{href:"#5-topics"},"5. Topics")),"\n",s.createElement(e.p,null,s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Topics Exchange</code>'}}),"는 지금까지 소개 된 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Exchange</code>'}})," 타입 중 가장 강력한 패턴을 제공한다.\n만약 필터링 기준이 여러개라면 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">direct</code>'}}),"만으로는 관리가 어려울 것이다. 이 때 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">topics</code>'}}),"는 마치 디렉토리를 참조하듯 다양한 단어와 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.</code>'}}),"의 조합으로 경로를 표시한다."),"\n",s.createElement(e.ul,null,"\n",s.createElement(e.li,null,s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">*</code>'}}),"는 정확하게 하나의 단어를 대체한다"),"\n",s.createElement(e.li,null,s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#</code>'}}),"은 하나 이상의 단어를 대체한다."),"\n"),"\n",s.createElement(l.A,{src:"https://velog.velcdn.com/images/aryumka/post/f2266935-81ba-47b8-9b4f-910d28c1aaef/image.png"}),"\n",s.createElement(e.p,null,'만약 위 그림처럼 "speed"."colour"."species"로 이루어진 각기 다른 관심사를 필터링해 각 큐로 전달한다면 ',s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#</code>'}}),", ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">*</code>'}}),"를 적절하게 조합해 원하는 메시지만 받을 수 있다."),"\n",s.createElement(e.p,null,s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">quick.orange.rabbit</code>'}}),"이라는 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">routing key</code>'}}),"를 가진 메시지는 모든 큐로 전달된다. ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">lazy.orange.elephant</code>'}}),"도 모든 큐로 전달된다. 그러나 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">quick.orange.fox</code>'}}),"는 첫 번째 큐로만 전달되고 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">lazy.brown.fox</code>'}}),"는 두 번째 큐로만 전달된다. ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">lazy.pink.rabbit</code>'}}),"는 두 개의 바인딩에 일치하지만 두 번째 큐로만 전달된다. ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">quick.brown.fox</code>'}}),"는 어떤 바인딩과도 일치하지 않으므로 폐기된다."),"\n",s.createElement(e.p,null,"위와 같은 방식으로 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Topics Exchange</code>'}}),"는 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">direct</code>'}}),"와 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fanout</code>'}})," 모두를 대체할 수 있다. ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#</code>'}}),"을 사용하면 전체 컨슈머에 전달되고 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#</code>'}})," 없이 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">*</code>'}}),"만을 사용하면 특정 컨슈머에만 전달할 수 있기 때문이다."),"\n",s.createElement(e.p,null,"전체 코드는 ",s.createElement(e.a,{href:"https://github.com/rabbitmq/rabbitmq-tutorials/tree/main/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut5",rel:"nofollow noopener noreferrer"},"RabbitMQ 공식 튜토리얼 깃헙"),"에서 확인할 수 있다."),"\n",s.createElement(e.h2,{id:"6-rpc"},s.createElement(e.a,{href:"#6-rpc"},"6. RPC")),"\n",s.createElement(e.p,null,"지금까지의 예시들은 모두 퍼블리셔 -> 컨슈머로 메시지가 발송되는 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">one-way</code>'}})," 방식이었다."),"\n",s.createElement(e.p,null,"하지만 클라이언트가 요청하고 서버가 응답하여 다시 클라이언트에게 돌아오는 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">two-way</code>'}})," 방식이 필요할 때가 있다. EIP에서는 ",s.createElement(e.a,{href:"https://www.enterpriseintegrationpatterns.com/patterns/messaging/RequestReply.html",rel:"nofollow noopener noreferrer"},"Request-Reply")," 패턴으로도 부르며 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RabbitMQ</code>'}}),"에서는 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RPC</code>'}})," 패턴으로 소개한다."),"\n",s.createElement(e.p,null,s.createElement(e.del,null,"전부 client-server 패턴인 것 같은데 왜이렇게 용어가 다양한걸까?")),"\n",s.createElement(e.p,null,"메시지 브로커를 이용한 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RPC</code>'}})," 패턴에서 가장 먼저 고려할 점은 고유한 메시지를 서버와 클라이언트 모두가 인식할 수 있도록 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">correlationId</code>'}}),"를 부여하는 것이다."),"\n",s.createElement(e.p,null,"서로 다른 스레드에서 클라이언트와 서버들이 m:n의 관계로 메시지를 주고 받으므로 어떤 메시지가 누구에게서 왔는지 또 해당 응답이 어떤 메시지에 대한 응답인지 정확하게 매칭할 수 있어야 하기 때문이다."),"\n",s.createElement(l.A,{src:"https://velog.velcdn.com/images/aryumka/post/cb2cc7c0-1e32-4f3e-9e5d-9c650e0b25a0/image.png"}),"\n",s.createElement(e.p,null,s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Spring AMQP</code>'}}),"에서는 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">convertSendAndReceive</code>'}}),"라는 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RabbitTemplate</code>'}}),"의 메서드를 활용해 별도의 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">correlationId</code>'}})," 생성 및 설정 또는 매칭 과정 등을 대신 처리해주므로 간단하게 RPC 요청을 보낼 수 있다."),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="java"><pre class="language-java"><code class="language-java"><span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token class-name">Integer</span> response <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> template<span class="token punctuation">.</span><span class="token function">convertSendAndReceive</span><span class="token punctuation">(</span>\n\texchange<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// exchange 이름 </span>\n    <span class="token string">"rpc"</span><span class="token punctuation">,</span> <span class="token comment">// routing key(reply_to)</span>\n    start<span class="token operator">++</span> <span class="token comment">// 메시지</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",s.createElement(e.p,null,"서버에서는 아래와 같이 응답할 메서드에 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">@RabbitListener</code>'}}),"를 붙여준 뒤 리턴하면 클라이언트로 전달된다."),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="java"><pre class="language-java"><code class="language-java"><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"tut.rpc.requests"</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" [x] Received request for "</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" [.] Returned "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(e.p,null,"기본적으로 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RabbitMQ</code>'}}),"의 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RPC</code>'}}),"는 큐에서 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Fair Dispatch</code>'}}),"를 지원하므로 트래픽이 몰릴 때 별도의 서버사이드 로드밸런싱이 없어도 새로운 서버를 가동할 수 있어 스케일업에 용이하다는 장점이 있다."),"\n",s.createElement(e.p,null,"반면 다음과 같이 일반적으로 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RPC</code>'}})," 패턴에서 주의하여야 할 점을 고려하여 적용해야 한다."),"\n",s.createElement(e.ul,null,"\n",s.createElement(e.li,null,"만약 의존성이 문서화가 되어있지 않다면 remote 콜과 local 콜이 구분되지 않을 수 있다."),"\n",s.createElement(e.li,null,"서버에서 실패한 메시지에 대한 retry 정책이나 timeout 등 예외 핸들링이 필요하다. 클라이언트에서도 마찬가지로 timeout 정책을 고려해야 한다."),"\n",s.createElement(e.li,null,"서버에서 예외 전달을 어떻게 해야할 지 고민해야 한다."),"\n",s.createElement(e.li,null,"서버에서 밸리데이션에 대한 고려가 필요하다."),"\n"),"\n",s.createElement(e.p,null,"전체 코드는 ",s.createElement(e.a,{href:"https://github.com/rabbitmq/rabbitmq-tutorials/tree/main/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut6",rel:"nofollow noopener noreferrer"},"RabbitMQ 공식 튜토리얼 깃헙"),"에서 확인할 수 있다."),"\n",s.createElement(e.h2,{id:"7-publisher-confirms"},s.createElement(e.a,{href:"#7-publisher-confirms"},"7. Publisher Confirms")),"\n",s.createElement(e.p,null,s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RabbitMQ</code>'}}),"가 우체국이라면 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Publisher Confirms</code>'}}),"는 등기우편을 보내는 것과 같다. 반드시 수신확인이 되어야 하는 중요한 메시지가 정상적으로 발송되었는지, 수신되었는지를 확인하기 위한 절차이기 때문이다."),"\n",s.createElement(e.p,null,"큐에서 컨슈머로 정상적으로 메시지가 꺼내졌는지를 확인하는 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ACK</code>'}})," 처리 만으로는 충분하지 않으며 퍼블리셔 입장에서 안정적인 메시지 전송 확인을 한 후 예외 처리까지 해야할 경우도 있기 때문이다."),"\n",s.createElement(e.p,null,"다만 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RabbitMQ</code>'}}),"에서 공식적으로 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Spring AMQP</code>'}}),"를 지원하지 않기 때문에 (자바, C#, PHP만 지원) 자바 라이브러리를 활용해 코틀린으로 구현한 예시로 설명한다."),"\n",s.createElement(e.p,null,"기본적으로 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">publisher confirms</code>'}}),"는 채널 단위로 설정된다."),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin">channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",s.createElement(e.blockquote,null,"\n",s.createElement(e.p,null,"Connection - 소켓 연결이 추상화된 객체이다. 물리적으로 단일 소켓을 통한 TCP 연결을 사용한다.\nChannel- Connection을 공유하는 논리적인 개념의 다중화된 경량 연결이다. 실제 api가 메시지를 보내고 받는 작업을 수행한다. Connection의 생명주기에 종속적이다."),"\n"),"\n",s.createElement(e.p,null,"다음은 메시지를 저장할 변수를 만든다."),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token comment">// ConcurrentSkipListMap은 시퀀스 번호 순서로 메시지를 저장할 수 있고 동시성을 지원한다. 메시지의 시퀀스 번호를 키, 메시지의 내용은 값으로 사용된다.</span>\n<span class="token keyword">val</span> outstandingConfirms<span class="token operator">:</span> ConcurrentNavigableMap<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">ConcurrentSkipListMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",s.createElement(e.p,null,s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">outstandingConfirms</code>'}}),"은 확인되지 않은 메시지를 추적하는 데 사용된다. 정상적인 메시지 응답",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Ack</code>'}}),"을 받았을 때의 다음의 콜백을 이용하여 삭제할 것이기 때문에 비정상적인 응답일 경우에 메시지가 남아있게 된다."),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token comment">// 정상적으로 메시지가 확인되면 outstandingConfirms에서 해당 메시지를 제거하는 콜백이다.</span>\n<span class="token keyword">val</span> cleanOutstandingConfirms <span class="token operator">=</span>\n\tConfirmCallback <span class="token punctuation">{</span> sequenceNumber<span class="token operator">:</span> Long<span class="token punctuation">,</span> multiple<span class="token operator">:</span> Boolean <span class="token operator">-></span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>multiple<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 메시지가 다수일 때</span>\n    \t<span class="token keyword">val</span> confirmed <span class="token operator">=</span> outstandingConfirms<span class="token punctuation">.</span><span class="token function">headMap</span><span class="token punctuation">(</span>sequenceNumber<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n    \tconfirmed<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 메시지가 하나일 때</span>\n        outstandingConfirms<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>sequenceNumber<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(e.p,null,"위의 콜백을 컨펌리스너에 추가한다."),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token comment">// ConfirmCallback을 사용하여 확인되지 않은 메시지를 추적하고, nack을 처리한다.</span>\nchannel<span class="token punctuation">.</span><span class="token function">addConfirmListener</span><span class="token punctuation">(</span>\n\tcleanOutstandingConfirms <span class="token comment">// Ack일 경우 콜백</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span> sequenceNumber<span class="token operator">:</span> Long<span class="token punctuation">,</span> multiple<span class="token operator">:</span> Boolean <span class="token operator">-></span> <span class="token comment">// Nack일 경우 콜백</span>\n\t<span class="token keyword">val</span> body <span class="token operator">=</span> outstandingConfirms<span class="token punctuation">[</span>sequenceNumber<span class="token punctuation">]</span>\n    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>\n    \t<span class="token string-literal singleline"><span class="token string">"Message with body %s has been nack-ed. Sequence number: %d, multiple: %b%n"</span></span><span class="token punctuation">,</span>\n    \tbody<span class="token punctuation">,</span> sequenceNumber<span class="token punctuation">,</span> multiple\n    <span class="token punctuation">)</span>\n\tcleanOutstandingConfirms<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>sequenceNumber<span class="token punctuation">,</span> multiple<span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(e.p,null,"아래와 같이 메시지를 발행할 때마다 저장한다."),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="kotlin"><pre class="language-kotlin"><code class="language-kotlin"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span> until MESSAGE_COUNT<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">val</span> body <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 다음 발행 시퀀스 번호를 키로 사용하여 메시지를 outstandingConfirms에 저장한다.</span>\n\toutstandingConfirms<span class="token punctuation">[</span>channel<span class="token punctuation">.</span>nextPublishSeqNo<span class="token punctuation">]</span> <span class="token operator">=</span> body\n    channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">""</span></span><span class="token punctuation">,</span> queue<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> body<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(e.p,null,"한가지 주의하여야 할 점은 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">publishers confirm</code>'}}),"이 비동기적으로 작동할 수 있도록 코드를 작성해야 성능의 저하가 없다는 것이다."),"\n",s.createElement(e.p,null,"전체 코드는 ",s.createElement(e.a,{href:"https://github.com/aryumka/rabbitmq-tutorial",rel:"nofollow noopener noreferrer"},"개인 깃헙"),"에 올려놓았다."))}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,t.R)(),n.components);return e?s.createElement(e,n,s.createElement(c,n)):c(n)}},5799:function(n,e,a){var t=a(9474),s=a(1615),l=a(6810);e.A=n=>{let{src:e,caption:a,width:c,expandable:o}=n;const{0:p,1:r}=(0,t.useState)(!1);return(0,l.Y)("figure",null,(0,l.Y)("img",{src:e,width:c,style:{cursor:o?"zoom-in":"default"},onClick:o?()=>r(!0):void 0}),a&&(0,l.Y)("figcaption",{dangerouslySetInnerHTML:{__html:a}}),p&&s.createPortal((0,l.Y)("div",{style:{position:"fixed",top:0,left:0,width:"100%",height:"100%",cursor:"zoom-out",backgroundColor:"rgba(0, 0, 0, 0.7)"},onClick:()=>r(!1)},(0,l.Y)("div",{style:{borderRadius:8,maxWidth:1200,width:"80%",position:"fixed",top:"50%",left:"50%",transform:"translate(-50%, -50%)",backgroundColor:"white"}},(0,l.Y)("img",{src:e,width:"100%"}))),document.body))}}}]);
//# sourceMappingURL=8518667cf03caec04ffc067452b10776951f17bc-ceee4053e48383d2b159.js.map