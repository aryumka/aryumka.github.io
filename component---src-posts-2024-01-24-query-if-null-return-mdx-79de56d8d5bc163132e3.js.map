{"version":3,"file":"component---src-posts-2024-01-24-query-if-null-return-mdx-79de56d8d5bc163132e3.js","mappings":"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","sources":["webpack://aryumka.me/./src/posts/2024-01-24-query-if-null-return.mdx","webpack://aryumka.me/./src/components/Image/index.tsx","webpack://aryumka.me/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\",\n    a: \"a\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">MySQL</code>\"\n    }\n  }), \"에서 음수가 될 수 있는 칼럼를 쿼리로 피벗할 때 의도된 NULL을 사용한다. \", React.createElement(_components.a, {\n    href: \"https://www.oracle.com/technical-resources/articles/database/sql-11g-pivot.html\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"오라클의 경우 11g 이상부터 내장된 PIVOT() 함수를 제공한다.\"), \"\\n예를 들어 아래와 같은 테이블 A에서 조회한다고 하자.\"), \"\\n\", React.createElement(Image, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/cde0baa0-dccc-410e-9111-72094800f25b/image.png\"\n  }), \"\\n\", React.createElement(_components.p, null, \"위의 형태를 아래와 같이 피벗하는 경우\"), \"\\n\", React.createElement(Image, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/12217603-9856-445a-95ac-565b54c277e9/image.png\"\n  }), \"\\n\", React.createElement(_components.p, null, \"개인적으로 데이터를 피벗할 칼럼만큼의 ROW수 만큼 나오도록 IF()를 사용하여 펼친 후 다시 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">MAX</code>\"\n    }\n  }), \" 또는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">SUM</code>\"\n    }\n  }), \" 등의 집계함수를 통해 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">GROUP BY</code>\"\n    }\n  }), \"로 압축하는 방법을 즐겨 쓴다.\\n쿼리는 아래와 같다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"sql\\\"><pre class=\\\"language-sql\\\"><code class=\\\"language-sql\\\"><span class=\\\"token keyword\\\">SELECT</span> \\n   펀드코드<span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token function\\\">MAX</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">IF</span><span class=\\\"token punctuation\\\">(</span>기간구분코드 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'01'</span><span class=\\\"token punctuation\\\">,</span> 수익률<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">AS</span> 기간<span class=\\\"token number\\\">1</span>별수익률<span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n   <span class=\\\"token function\\\">MAX</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">IF</span><span class=\\\"token punctuation\\\">(</span>기간구분코드 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'06'</span><span class=\\\"token punctuation\\\">,</span> 수익률<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">AS</span> 기간N별수익률<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token keyword\\\">FROM</span> A\\n<span class=\\\"token keyword\\\">GROUP</span> <span class=\\\"token keyword\\\">BY</span> 펀드코드<span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"그러나 위와 같이 IF()함수의 ELSE인자로 0을 넣었을 때 음수를 고려하지 않은 부정확한 값이 나온다. 음수값일 경우 0보다 작으므로 MAX조건으로 걸리지 않기 때문이다.\"), \"\\n\", React.createElement(Image, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/530e0979-f392-419b-8d0f-5ad0739f0f73/image.png\"\n  }), \"\\n\", React.createElement(_components.p, null, \"따라서 아래처럼 의도적으로 NULL을 넣어주면\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"sql\\\"><pre class=\\\"language-sql\\\"><code class=\\\"language-sql\\\"><span class=\\\"token keyword\\\">SELECT</span> \\n   펀드코드<span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token function\\\">MAX</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">IF</span><span class=\\\"token punctuation\\\">(</span>기간구분코드 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'01'</span><span class=\\\"token punctuation\\\">,</span> 수익률<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">NULL</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">AS</span> 기간<span class=\\\"token number\\\">1</span>별수익률<span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n   <span class=\\\"token function\\\">MAX</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">IF</span><span class=\\\"token punctuation\\\">(</span>기간구분코드 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'06'</span><span class=\\\"token punctuation\\\">,</span> 수익률<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">NULL</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">AS</span> 기간N별수익률<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token keyword\\\">FROM</span> A\\n<span class=\\\"token keyword\\\">GROUP</span> <span class=\\\"token keyword\\\">BY</span> 펀드코드<span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(Image, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/35bdb3fa-06e2-4642-ba74-2cc6a4ca1ea2/image.png\"\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"음수가 null보다 상위로 정렬\"), \"되어 원하는 값을 얻을 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"NULL을 리턴하는 것은 대개 바람직하지 않은 practice라고 느껴진다. 그래서 default로 0을 자연스럽게 넣게 된다.\\n때문에 더욱 무의식적으로 실수하기 쉬운 부분이니 기록해두고 잊지 말아야겠다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width}\n        style={{ cursor: expandable ? 'zoom-in' : 'default' }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)'\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <div\n              style={{\n                borderRadius: 8,\n                maxWidth: 1200,\n                width: '80%',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            >\n              <img src={src} width=\"100%\" />\n            </div>\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","a","strong","_provideComponents","components","React","dangerouslySetInnerHTML","__html","href","rel","Image","src","wrapper","MDXLayout","_ref","caption","width","expandable","isExpanded","toggleExpanded","useState","___EmotionJSX","style","cursor","onClick","undefined","ReactDOM","position","top","left","height","backgroundColor","borderRadius","maxWidth","transform","document","body","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}