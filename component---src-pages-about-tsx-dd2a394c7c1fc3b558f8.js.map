{"version":3,"file":"component---src-pages-about-tsx-dd2a394c7c1fc3b558f8.js","mappings":"+IAmBA,MAAMA,EAAMC,IAA6C,IAADC,EAAAC,EAAAC,EAAA,IAA3C,MAAEC,EAAK,YAAEC,EAAW,KAAEC,GAAgBN,EACjD,MAAM,KAAEO,IAASC,EAAAA,EAAAA,gBAAe,YAY1BC,EAAkBJ,GAAeE,EAAKG,aAAaL,YACnDM,EAAYP,IAA0B,QAArBH,EAAIM,EAAKG,oBAAY,IAAAT,OAAA,EAAjBA,EAAmBG,OAE9C,OACEQ,EAAAA,EAAAA,GAACC,EAAAA,EAAM,CACLC,eAAgB,CACdC,GAAI,MAENX,MAAOO,EACPK,cAAeZ,EAAK,uBAAuBa,EAC3CX,KAAM,CACJ,CACEY,KAAK,cACLC,QAASV,GAEX,CACEW,SAAS,SACTD,QAAQ,iBAEV,CACEC,SAAS,WACTD,QAASR,GAEX,CACES,SAAS,iBACTD,QAASV,GAEX,CACEW,SAAS,UACTD,QAAQ,WAEV,CACEC,SAAS,eACTD,QAAQ,cAEV,CACEC,SAAS,YACTD,QAAQ,SAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAAS,gBAEX,CACED,KAAK,gBACLC,QAASR,GAEX,CACEO,KAAK,sBACLC,QAASV,GAEX,CACEW,SAAS,WACTD,QACiE,QAD1DjB,EACiD,QADjDC,EACLG,EAAKe,MAAMC,GAAgC,aAAlBA,EAAKF,kBAAwB,IAAAjB,OAAA,EAAtDA,EAAwDgB,eAAO,IAAAjB,EAAAA,EAC/D,qCAEJqB,OAAOjB,IACT,EAINP,EAAIyB,aAAe,CACjBC,KAAK,KACLnB,KAAM,GACND,YAAY,IAUd,K,gECtGA,MAAMqB,EAAO1B,IAAmC,IAAlC,SAAE2B,EAAQ,KAAEC,GAAiB5B,EACzC,OACEY,EAAAA,EAAAA,GAAA,KAAGgB,KAAMA,EAAMC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,WAAaC,OAAO,UACxEL,EACC,EA+CR,UA3CcM,KAqBVrB,EAAAA,EAAAA,GAACsB,EAAAA,EAAe,MACdtB,EAAAA,EAAAA,GAACb,EAAAA,EAAG,CAACK,MAAM,WAEXQ,EAAAA,EAAAA,GAAA,UAAI,4BACJA,EAAAA,EAAAA,GAAA,WACEA,EAAAA,EAAAA,GAAA,WACEA,EAAAA,EAAAA,GAAA,cAAQ,4BAAiC,gBAAYA,EAAAA,EAAAA,GAAA,cAIzDA,EAAAA,EAAAA,GAAA,UAAI,mBACJA,EAAAA,EAAAA,GAAA,UA/BgB,CAClB,CACEgB,KAAM,uCACNO,KAAM,aAER,CACEP,KAAM,2CACNO,KAAM,iBAER,CACEP,KAAM,0CACNO,KAAM,gBAER,CACEP,KAAM,+CACNO,KAAM,sBAiBSC,KAAId,IACfV,EAAAA,EAAAA,GAAA,MAAIyB,IAAKf,EAAKM,OACZhB,EAAAA,EAAAA,GAACc,EAAI,CAACE,KAAMN,EAAKM,MAAON,EAAKa,U","sources":["webpack://aryumka.me/./src/components/SEO/index.tsx","webpack://aryumka.me/./src/pages/about.tsx"],"sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ninterface SEOProps {\n  title?: string;\n  description?: string;\n  imagePath?: string;\n  meta?: any;\n}\n\nconst SEO = ({ title, description, meta }: SEOProps) => {\n  const { site } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          author\n        }\n      }\n    }\n  `);\n\n  const metaDescription = description || site.siteMetadata.description;\n  const metaTitle = title || site.siteMetadata?.title;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        ko: 'ko'\n      }}\n      title={metaTitle}\n      titleTemplate={title ? `%s | aryumka.me` : undefined}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription\n        },\n        {\n          property: `author`,\n          content: `Lee Sun-Hyoup`\n        },\n        {\n          property: `og:title`,\n          content: metaTitle\n        },\n        {\n          property: `og:description`,\n          content: metaDescription\n        },\n        {\n          property: `og:type`,\n          content: `website`\n        },\n        {\n          property: `og:site_name`,\n          content: `aryumka.me`\n        },\n        {\n          property: `og:locale`,\n          content: `ko_KR`\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`\n        },\n        {\n          name: `twitter:creator`,\n          content: 'Sunhyoup Lee'\n        },\n        {\n          name: `twitter:title`,\n          content: metaTitle\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription\n        },\n        {\n          property: `og:image`,\n          content:\n            meta.find((item: any) => item.property === 'og:image')?.content ??\n            'https://aryumka.me/images/og.png'\n        }\n      ].concat(meta)}\n    />\n  );\n};\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired\n};\n\nexport default SEO;\n","import React from 'react';\nimport DefaultTemplate from '@templates/default';\nimport SEO from '@components/SEO';\n\ninterface LinkProps {\n  children: React.ReactNode;\n  href: string;\n}\n\nconst Link = ({ children, href }: LinkProps) => {\n  return (\n    <a href={href} style={{ textDecoration: 'none', color: '#5c6ac4' }} target=\"_blank\">\n      {children}\n    </a>\n  );\n};\n\nconst About = () => {\n  const opensources = [\n    {\n      href: 'https://github.com/aryumka/kontainer',\n      text: 'kontainer'\n    },\n    {\n      href: 'https://github.com/aryumka/BigInteger.kt',\n      text: 'BigInteger.kt'\n    },\n    {\n      href: 'https://github.com/aryumka/tdd-practice',\n      text: 'tdd-practice'\n    },\n    {\n      href: 'https://github.com/aryumka/rabbitmq-tutorial',\n      text: 'rabbitmq-tutorial'\n    }\n  ];\n\n  return (\n    <DefaultTemplate>\n      <SEO title=\"About\" />\n\n      <h2>üíº Currently working on</h2>\n      <ul>\n        <li>\n          <strong>Venture Capital Projects</strong> 2022. 02 ~ <br />\n        </li>\n      </ul>\n\n      <h2>‚ù§Ô∏è Open Source</h2>\n      <ul>\n        {opensources.map(item => (\n          <li key={item.href}>\n            <Link href={item.href}>{item.text}</Link>\n          </li>\n        ))}\n      </ul>\n    </DefaultTemplate>\n  );\n};\n\nexport default About;\n"],"names":["SEO","_ref","_site$siteMetadata","_meta$find$content","_meta$find","title","description","meta","site","useStaticQuery","metaDescription","siteMetadata","metaTitle","___EmotionJSX","Helmet","htmlAttributes","ko","titleTemplate","undefined","name","content","property","find","item","concat","defaultProps","lang","Link","children","href","style","textDecoration","color","target","About","DefaultTemplate","text","map","key"],"sourceRoot":""}