{"version":3,"file":"component---src-posts-2024-01-07-til-practice-tdd-md-fa800a67e6268f4d24dc.js","mappings":"qKAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,OAAQ,SACRC,EAAG,MACFC,EAAAA,EAAAA,KAAsBT,EAAMU,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBV,EAAYG,GAAI,KAAM,KAAMO,EAAAA,cAAoBV,EAAYI,GAAI,KAAM,wCAAyC,KAAMM,EAAAA,cAAoBV,EAAYI,GAAI,KAAM,6CAA8C,KAAMM,EAAAA,cAAoBV,EAAYI,GAAI,KAAM,uBAAwB,KAAMM,EAAAA,cAAoBV,EAAYI,GAAI,KAAM,0BAA2B,KAAMM,EAAAA,cAAoBV,EAAYI,GAAI,KAAM,yDAA0D,KAAMM,EAAAA,cAAoBV,EAAYK,GAAI,KAAM,KAAMK,EAAAA,cAAoBV,EAAYI,GAAI,KAAM,oCAAqC,KAAMM,EAAAA,cAAoBV,EAAYI,GAAI,KAAM,kBAAmB,MAAO,MAAO,KAAMM,EAAAA,cAAoBV,EAAYI,GAAI,KAAM,2GAA4G,KAAMM,EAAAA,cAAoBV,EAAYI,GAAI,KAAM,mDAAoD,KAAMM,EAAAA,cAAoBV,EAAYI,GAAI,KAAM,sCAAuC,KAAMM,EAAAA,cAAoBV,EAAYK,GAAI,KAAM,KAAMK,EAAAA,cAAoBV,EAAYI,GAAI,KAAM,uCAAwC,KAAMM,EAAAA,cAAoBV,EAAYI,GAAI,KAAM,mBAAoBM,EAAAA,cAAoBV,EAAYM,OAAQ,KAAM,YAAa,+CAAgD,MAAO,MAAO,MAAO,KAAMI,EAAAA,cAAoBV,EAAYO,EAAG,KAAM,iHACz7C,CAKA,UAJA,SAAoBR,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,KAAsBT,EAAMU,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWb,EAAOW,EAAAA,cAAoBZ,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECWA,MAAMc,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,EACnC,GACA,CAACO,EAAmBP,GAExB,C","sources":["webpack://aryumka.me/./src/posts/2024-01-07-til-practice-tdd.md","webpack://aryumka.me/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\",\n    strong: \"strong\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"README에 대략적인 프로젝트의 Feature를 적고 시작했다.\"), \"\\n\", React.createElement(_components.li, null, \"kotlin의 TODO()를 이용하여 인터페이스와 테스트를 먼저 만들었음.\"), \"\\n\", React.createElement(_components.li, null, \"테스트를 통과할 수 있게 구현했음.\"), \"\\n\", React.createElement(_components.li, null, \"새로운 테스트 케이스가 생각나서 적었음.\"), \"\\n\", React.createElement(_components.li, null, \"테스트 케이스에 맞춰 기존 구현 코드를 수정(Fix, Refactor)했음\\n-> TDD의 이점:\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"테스트를 통해 미리 보완할 점을 캐치해서 코드에 바로 적용\"), \"\\n\", React.createElement(_components.li, null, \"테스트를 통과했다는 안도감\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"git CLI 명령어 - add, commit amend, commit -m, push, remote add, git branch -m, push -f, pull, status, log\"), \"\\n\", React.createElement(_components.li, null, \"TODO 앱을 사용하여 할 것을 적립. 하나씩 진행중, 완료로 옮겨가기. 퍼스널 칸반\"), \"\\n\", React.createElement(_components.li, null, \"뭐 부터 해야하지? 어떤 걸 해야 하지?를 해나가는 게 어렵다.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"개발은 Feature 정리, 인터페이스 설계, TDD를 통해서,\"), \"\\n\", React.createElement(_components.li, null, \"커리어는 내가 해야하는 것, \", React.createElement(_components.strong, null, \"할 수 있는 것\"), \"을 정리하고 해나가면서 증명을 하며 다음 스테이지로 간다~~(말이 쉽다)~~.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"할 수 있는 걸 아는 게 제일 어려운 것 같다. 메타인지 필요한 부분이다.. 작은 것부터 하나씩 실행해가면서 내가 뭘 할 수 있는지 감을 잡고 내가 뭘 못하는지 뭘 모르는지 파악해서 보완을 한다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","ol","li","ul","strong","p","_provideComponents","components","React","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}