{"version":3,"file":"03efd3e68cc0138ee3017f1bbb31f41fdcb1f91d-ac2bf8f8d05d63448660.js","mappings":"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","sources":["webpack://aryumka.me/./src/components/Image/index.tsx","webpack://aryumka.me/./src/posts/2023-12-24-properties-vs-yaml.mdx"],"sourcesContent":["import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width}\n        style={{ cursor: expandable ? 'zoom-in' : 'default' }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)'\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <div\n              style={{\n                borderRadius: 8,\n                maxWidth: 1200,\n                width: '80%',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            >\n              <img src={src} width=\"100%\" />\n            </div>\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\",\n    span: \"span\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, {\n    id: \"개요\"\n  }, React.createElement(_components.a, {\n    href: \"#개요\"\n  }, \"개요\")), \"\\n\", React.createElement(_components.p, null, \"스프링부트는 어플리케이션 코드의 변경을 최소화하기 위하여 설정파일, CLI Argument 등 다양한 방법으로 외부 설정을 주입받습니다.\"), \"\\n\", React.createElement(_components.p, null, \"그리고 이러한 외부 설정은 운영, 테스트, 개발 등 실행환경에 따라 달라지게 됩니다.\\n이를 위해 프로필 별 설정(Profile-specific Properties)이 필요하게 됩니다. 대개 프로필 별 설정파일을 통해 관리하게 됩니다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto.properties-and-configuration\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"스프링부트 공식 문서\"), \"에서는 설정 파일을 이용할 때 두 가지 방법을 권장합니다.\\n첫 번째로는 전통적인 방식으로 \", React.createElement(_components.strong, null, \"properties\"), \"를 이용하는 방법과 두 번째로는 \", React.createElement(_components.strong, null, \"yaml\"), \" 파일을 이용하는 방법입니다.\\n공식 문서의 예제 코드 또한 위 두 가지 방법으로 제공됩니다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"properties 예시\")), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"properties\\\"><pre class=\\\"language-properties\\\"><code class=\\\"language-properties\\\"><span class=\\\"token key attr-name\\\">spring.application.name</span><span class=\\\"token punctuation\\\">=</span><span class=\\\"token value attr-value\\\">cruncher</span>\\n<span class=\\\"token key attr-name\\\">spring.datasource.driver-class-name</span><span class=\\\"token punctuation\\\">=</span><span class=\\\"token value attr-value\\\">com.mysql.jdbc.Driver</span>\\n<span class=\\\"token key attr-name\\\">spring.datasource.url</span><span class=\\\"token punctuation\\\">=</span><span class=\\\"token value attr-value\\\">jdbc:mysql://localhost/test</span>\\n<span class=\\\"token key attr-name\\\">server.port</span><span class=\\\"token punctuation\\\">=</span><span class=\\\"token value attr-value\\\">9000</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"yaml 예시\")), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yaml\\\"><pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">spring</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">application</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"cruncher\\\"</span>\\n  <span class=\\\"token key atrule\\\">datasource</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">driver-class-name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"com.mysql.jdbc.Driver\\\"</span>\\n    <span class=\\\"token key atrule\\\">url</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"jdbc:mysql://localhost/test\\\"</span>\\n<span class=\\\"token key atrule\\\">server</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">port</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">9000</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"yaml 파일로 설정 시 장점과 단점은 다음과 같습니다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"장점\"\n  }, React.createElement(_components.a, {\n    href: \"#장점\"\n  }, \"장점\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"1-계층적-표현-가능\"\n  }, React.createElement(_components.a, {\n    href: \"#1-계층적-표현-가능\"\n  }, \"1. 계층적 표현 가능\")), \"\\n\", React.createElement(_components.p, null, \"계층적 표현을 통해 코드의 응집도와 가독성이 증가합니다. 같은 계층의 설정이라면 한 곳에 모아서 관리하기에 용이하며 각 설정의 구조도 한 눈에 파악할 수 있습니다.\\n여러 번 반복해 쓸 필요 없이 하위의 각 설정으로 들여쓰기를 이용하여 추가할 수 있습니다.\\n특히 어플리케이션이 커지고 설정이 복잡해진 경우 더욱 편리합니다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"2-중복코드-줄여줌\"\n  }, React.createElement(_components.a, {\n    href: \"#2-중복코드-줄여줌\"\n  }, \"2. 중복코드 줄여줌\")), \"\\n\", React.createElement(_components.p, null, \"properties로 설정 시 모든 프로필에 동일한 설정이 적용될 경우 각 파일에 반복된 코드를 모두 넣어줘야 합니다.\\n하지만 yaml을 이용하면 같은 파일에 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">---</code>\"\n    }\n  }), \" 구분자를 넣어 각 프로필을 설정할 수 있습니다. 프로필이 없는 설정, 즉 디폴트 설정은 모든 프로필에 동일하게 적용됩니다.\\n아래 예제와 같이 공통으로 관리하는 설정과 각 프로필 별로 달라지는 설정을 나누어 관리할 수 있습니다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yaml\\\"><pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token comment\\\">#공통 환경 설정</span>\\n<span class=\\\"token key atrule\\\">server</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">shutdown</span><span class=\\\"token punctuation\\\">:</span> graceful\\n  <span class=\\\"token key atrule\\\">servlet</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">jsp</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token key atrule\\\">init-parameters</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token key atrule\\\">mappedfile</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">false</span>\\n  <span class=\\\"token key atrule\\\">jsp-servlet</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">init-parameters</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token key atrule\\\">development</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n  <span class=\\\"token key atrule\\\">max-http-header-size</span><span class=\\\"token punctuation\\\">:</span> 2MB\\n\\n<span class=\\\"token key atrule\\\">spring</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">datasource</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">hikari</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token key atrule\\\">max-lifetime</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">180000</span>\\n      <span class=\\\"token key atrule\\\">maximum-pool-size</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span>\\n      <span class=\\\"token key atrule\\\">minimum-idle</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span>\\n      <span class=\\\"token key atrule\\\">idle-timeout</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">600000</span>\\n      <span class=\\\"token key atrule\\\">pool-name</span><span class=\\\"token punctuation\\\">:</span> Logos<span class=\\\"token punctuation\\\">-</span>pi\\n      <span class=\\\"token key atrule\\\">connection-test-query</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"select 1+1\\\"</span>\\n  <span class=\\\"token key atrule\\\">mvc</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">view</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token key atrule\\\">prefix</span><span class=\\\"token punctuation\\\">:</span> /WEB<span class=\\\"token punctuation\\\">-</span>INF/jsp/\\n      <span class=\\\"token key atrule\\\">suffix</span><span class=\\\"token punctuation\\\">:</span> .jsp\\n  <span class=\\\"token key atrule\\\">application</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> ui\\n  <span class=\\\"token key atrule\\\">devtools</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">livereload</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token key atrule\\\">enabled</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n\\n<span class=\\\"token punctuation\\\">---</span> <span class=\\\"token comment\\\">#local 환경 설정</span>\\n\\n<span class=\\\"token key atrule\\\">spring</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">profiles</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">active</span><span class=\\\"token punctuation\\\">:</span> local\\n  <span class=\\\"token key atrule\\\">datasource</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">hikari</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token key atrule\\\">jdbc-url</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"jdbc:mariadb://127.0.0.1:3306/local?useUnicode=true&amp;characterEncoding=utf8\\\"</span>\\n  <span class=\\\"token key atrule\\\">tomcat</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">maxActive</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span>\\n\\n<span class=\\\"token key atrule\\\">server</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">port</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">8011</span>\\n\\n<span class=\\\"token punctuation\\\">---</span> <span class=\\\"token comment\\\">#stg 환경 설정</span>\\n<span class=\\\"token key atrule\\\">spring</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">profiles</span><span class=\\\"token punctuation\\\">:</span> stg\\n  <span class=\\\"token key atrule\\\">server</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">port</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">8011</span>\\n    \\n<span class=\\\"token punctuation\\\">---</span> <span class=\\\"token comment\\\">#prd 환경 설정</span>\\n\\n<span class=\\\"token key atrule\\\">server</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">port</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">80</span>\\n\\n<span class=\\\"token key atrule\\\">spring</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">profiles</span><span class=\\\"token punctuation\\\">:</span> prd\\n  <span class=\\\"token key atrule\\\">datasource</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">tomcat</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token key atrule\\\">maxActive</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">50000</span>\\n    <span class=\\\"token key atrule\\\">hikari</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token key atrule\\\">jdbc-url</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"jdbc:mariadb://199.999.99.999:3306/prd?useUnicode=true&amp;characterEncoding=utf8\\\"</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, {\n    id: \"3-기타-유용한-장점\"\n  }, React.createElement(_components.a, {\n    href: \"#3-기타-유용한-장점\"\n  }, \"3. 기타 유용한 장점\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"- yml 문법 사용 가능\")), \"\\n\", React.createElement(_components.p, null, \"yml은 xml, json처럼 데이터를 표현하는 양식이지만 문법은 상대적으로 이해하기 쉽고, 가독성이 좋도록 디자인 되었습니다. 또 모든 데이터를 리스트, 해쉬, 스칼라 데이터의 조합으로 적절히 표현할 수 있다는 믿음을 가지고 만들어졌습니다.\"), \"\\n\", React.createElement(Image, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/9173f985-e7b4-4d03-9996-93a08c517845/image.png\"\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://ko.wikipedia.org/wiki/YAML\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"위키피디아에서 yaml 설명 보기\"), \"\\n이러한 yml의 문법은 스프링부트의 설정문서에서도 사용할 수 있습니다.\"), \"\\n\", React.createElement(_components.p, null, \"배열을 예로 들자면 properties 에서는 아래와 같이 표현하던 것들을\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"properties\\\"><pre class=\\\"language-properties\\\"><code class=\\\"language-properties\\\"><span class=\\\"token key attr-name\\\">my.servers[0]</span><span class=\\\"token punctuation\\\">=</span><span class=\\\"token value attr-value\\\">dev.example.com</span>\\n<span class=\\\"token key attr-name\\\">my.servers[1]</span><span class=\\\"token punctuation\\\">=</span><span class=\\\"token value attr-value\\\">another.example.com</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"yaml에서는 아래와 같이 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">-</code>\"\n    }\n  }), \"를 사용하거나\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">my:\\nservers:\\n\\t- dev.example.com\\n\\t- another.example.com</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"또는 이렇게 한 줄로 표현합니다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">my:\\n  servers: [dev.example.com, another.example.com]</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"자세한 문법은 \", React.createElement(_components.a, {\n    href: \"https://yaml.org/spec/1.2.2/\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"yaml 공식문서\"), \"또는 구글 검색을 통해 참고 바랍니다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"- UIF-8 인코딩 지원\")), \"\\n\", React.createElement(_components.p, null, \"properties파일에 한글을 쓰면 인식을 못하여 글자가 깨지게 됩니다.\\nIDE에서 설정하여 깨지지 않도록 하는 방법도 있지만 한 번 깨진 글자를 복구할 순 없습니다.\\nyaml은 UTF-8 인코딩을 지원하므로 깨질 걱정 없이 한글로 주석 등을 달 수 있어 편리합니다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"단점\"\n  }, React.createElement(_components.a, {\n    href: \"#단점\"\n  }, \"단점\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"1--애너테이션-사용-불가능\"\n  }, React.createElement(_components.a, {\n    href: \"#1--애너테이션-사용-불가능\"\n  }, \"1. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">@PropertySource</code>\"\n    }\n  }), \" 애너테이션 사용 불가능\")), \"\\n\", React.createElement(_components.p, null, \"스프링부트 공식문서에 나와있는 yaml의 단점입니다.\\n하지만 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">@Value</code>\"\n    }\n  }), \" 애너테이션으로 대체할 수 있으며 설정파일 내 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">placeholder</code>\"\n    }\n  }), \"(${...}) 등 기본적인 사용 방식은 기존 properties와 동일합니다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"2-문법이-다소-엄격\"\n  }, React.createElement(_components.a, {\n    href: \"#2-문법이-다소-엄격\"\n  }, \"2. 문법이 다소 엄격\")), \"\\n\", React.createElement(_components.p, null, \"개행, 들여쓰기, 띄어쓰기 등을 철저하게 지켜야 합니다.\\n특히 특수문자 같은 경우 url 등 일정 형식이 아닌 리터럴(ex. 비밀번호, 이메일)의 경우 리터럴\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">\\\"\\\"</code>\"\n    }\n  }), \" 표시를 확실히 해주어야 합니다.\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">boolean</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">integer</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">float</code>\"\n    }\n  }), \" 등 기본적인 타입은 모두 인식 가능합니다.\\n상식 선에서 따라할 수 있는 것들로 몇 번 작성하면 금방 익숙해질만한 것들입니다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_ref","src","caption","width","expandable","isExpanded","toggleExpanded","useState","___EmotionJSX","style","cursor","onClick","undefined","dangerouslySetInnerHTML","__html","ReactDOM","position","top","left","height","backgroundColor","borderRadius","maxWidth","transform","document","body","_createMdxContent","props","_components","Object","assign","h2","a","p","strong","span","h3","_provideComponents","components","React","id","href","rel","Image","wrapper","MDXLayout"],"sourceRoot":""}