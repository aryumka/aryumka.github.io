{"version":3,"file":"e14df2f985ca089feb4024a9cb0c65f30b0d5387-f72eda4552a221d8292f.js","mappings":"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","sources":["webpack://aryumka.me/./src/posts/2023-12-25-mysql-date-type.mdx","webpack://aryumka.me/./src/components/Image/index.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    h3: \"h3\",\n    a: \"a\",\n    del: \"del\",\n    em: \"em\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"년월일의 날짜정보를 저장할 때 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">varchar(8)</code>\"\n    }\n  }), \"을 이용하여 표현하는 것을 종종 볼 수 있는데요.\\nMySQL의 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">date</code>\"\n    }\n  }), \" 타입을 이용하면 더욱 효율적으로 정보를 저장하고 조회할 수 있어 이에 대해 공유 드리고자 합니다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">date</code>\"\n    }\n  }), \"타입은 'YYYY-MM-DD' 형식의 날짜 타입입니다. 시간을 저장하지 않습니다.\"), \"\\n\", React.createElement(Image, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/3e4419ba-3859-4dd1-8588-2dacf815ab55/image.png\",\n    caption: \"테이블에 저장된 date 타입\"\n  }), \"\\n\", React.createElement(_components.p, null, \"먼저 표를 통해 간략한 차이점을 알아보겠습니다.\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th), React.createElement(_components.th, null, \"varchar(8)\"), React.createElement(_components.th, null, \"date\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.strong, null, \"size\")), React.createElement(_components.td, null, \"9byte\"), React.createElement(_components.td, null, \"3byte\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.strong, null, \"validation\")), React.createElement(_components.td, null, \"X\"), React.createElement(_components.td, null, \"△\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.strong, null, \"타 언어와 호환\")), React.createElement(_components.td, null, \"X\"), React.createElement(_components.td, null, \"O\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.strong, null, \"비교 및 연산\")), React.createElement(_components.td, null, \"△\"), React.createElement(_components.td, null, \"O\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.strong, null, \"가독성\")), React.createElement(_components.td, null, \"낮음\"), React.createElement(_components.td, null, \"높음\")))), \"\\n\", React.createElement(_components.p, null, \"아래에서 하나씩 살펴보겠습니다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"1-size\"\n  }, React.createElement(_components.a, {\n    href: \"#1-size\"\n  }, \"1. size\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">varchar(8)</code>\"\n    }\n  }), \" 사용 시 언뜻 하이픈(-) 없이 데이터를 압축, 저장할 수 있을 것만 같지만 실제로는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">date</code>\"\n    }\n  }), \" 타입에 비해 3배 큰 용량을 차지하게 됩니다.\"), \"\\n\", React.createElement(_components.p, null, \"MySQL에서 varchar는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \" 데이타 타입 중 하나로 가변(variable) 문자(character) 타입을 의미합니다. 고정된 용량을 사용하는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">char</code>\"\n    }\n  }), \"와 달리 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">varchar</code>\"\n    }\n  }), \"는 실제 용량을 표현하기 위한 prefix를 필요로 합니다.\\n따라서 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">varchar(255)</code>\"\n    }\n  }), \" 이하에서는 1 byte, 이상에서는 2 byte의 용량이 필요합니다. \", React.createElement(_components.del, null, \"(1 byte = 8 bit, 즉 2^8=256, 0부터 255까지)\"), \"\\nUTF-8 인코딩방식에서는 하나의 문자 당 1바이트에서 최대 4바이트를 지원하지만 우리가 사용할 숫자로만 구성된 년월일의 경우 각 1바이트 * 8에 prefix인 1byte까지 \", React.createElement(_components.strong, null, \"총 9 byte\"), \"를 필요로 합니다.\"), \"\\n\", React.createElement(_components.p, null, \"반면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">date</code>\"\n    }\n  }), \" 타입은 '1000-01-01' 부터 '9999-12-31' 까지의 값을 지원하며 3 byte의 용량을 필요로 합니다. 년, 월, 일을 나누어 인식하므로 최대 값('9999-12-31')도 \", React.createElement(_components.strong, null, \"3 byte\"), \"로 충분히 표현할 수 있습니다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"2-validation\"\n  }, React.createElement(_components.a, {\n    href: \"#2-validation\"\n  }, \"2. validation\")), \"\\n\", React.createElement(_components.p, null, \"값 입력 시 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">varchar(8)</code>\"\n    }\n  }), \" 문자열은 각 문자열을 년, 월, 일로 잘라 각각이 유효한 값인지 검사하여야 하지만 실제 저희 프로그램에서는 자리 수 체크 정도만 진행되고 있습니다. '88888888'도 유효한 날짜로 인식됩니다.\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">date</code>\"\n    }\n  }), \" 타입은 날짜 타입인 만큼 월과 년,월에 따른 일에 대해 유효하지 않은 경우 예외가 발생합니다. 예를 들어 \", React.createElement(_components.strong, null, \"'1990-02-29' 또는 '2000-11-31' 같은 값은 입력할 수 없습니다.\"), \"\\n그러나 모든 유효하지 않은 날짜를 막는 것은 아닙니다(00월이나 00일은 허용). 또 비즈니스마다 유효한 연도의 범위도 필요하므로 이 이상의 validation은 어플리케이션 단에서 로직을 통해 통제하는 것이 합리적으로 보입니다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"3-타-언어와-호환\"\n  }, React.createElement(_components.a, {\n    href: \"#3-타-언어와-호환\"\n  }, \"3. 타 언어와 호환\")), \"\\n\", React.createElement(_components.p, null, \"MySQL \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">date</code>\"\n    }\n  }), \" 타입은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">java.sql.Date</code>\"\n    }\n  }), \"로 리턴됩니다. 또 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">java.lang.String</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">java.sql.Date</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">java.sql.Timestamp</code>\"\n    }\n  }), \"와 같은 \", React.createElement(_components.strong, null, \"객체\"), \"로 변환이 가능합니다.\"), \"\\n\", React.createElement(Image, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/e84fde44-1e6e-436e-bf62-6749c6ca1845/image.png\"\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://dev.mysql.com/doc/connector-j/8.1/en/connector-j-reference-type-conversions.html\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"Java, JDBC, and MySQL Types\")), \"\\n\", React.createElement(_components.p, null, \"즉 라이브러리에서 지원되는 \", React.createElement(_components.strong, null, \"연산\"), \"이나 \", React.createElement(_components.strong, null, \"비교\"), \" 등의 작업이 가능하다는 얘기입니다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \" 타입으로 받더라도 저희 프로그램에서 사용하는 java와 javascript에서 날짜를 표현하는 객체는 'YYYY-MM-DD' 포맷의 문자열로 객체 생성 및 초기화가 가능합니다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"java 예시\")), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token class-name\\\">LocalDate</span> date <span class=\\\"token operator\\\">=</span> <span class=\\\"token class-name\\\">LocalDate</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"2022-01-13\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"javascript 예시\")), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">    Date <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"2022-01-13\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"비즈니스 로직에서 \", React.createElement(_components.strong, null, \"validation, 날짜 연산\"), \" 등을 위해 객체를 이용해야 할 경우가 많습니다. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">date</code>\"\n    }\n  }), \" 타입의 경우 \", React.createElement(_components.strong, null, \"DB에서 조회한 문자열 그대로 별도의 가공 없이\"), \" 사용할 수 있습니다. 생산성과 코드 가독성이 향상됩니다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"java 로직 예시\")), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">try</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token class-name\\\">LocalDate</span> date <span class=\\\"token operator\\\">=</span> <span class=\\\"token class-name\\\">LocalDate</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"2022-00-00\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//DateTimeParseException 발생</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">DateTimeParseException</span> e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//...예외 처리 내용</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"반면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">varchar</code>\"\n    }\n  }), \"를 이용한다면 문자열을 자른 후 각각 별도의 로직 구현을 통해 연산 및 계산하거나, 문자열을 다시 객체로 만들 수 있도록 별도의 가공을 해야합니다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"4-비교-및-연산\"\n  }, React.createElement(_components.a, {\n    href: \"#4-비교-및-연산\"\n  }, \"4. 비교 및 연산\")), \"\\n\", React.createElement(_components.p, null, \"MySQL에서는 날짜 연산을 위해 자체적으로 다양한 함수들을 제공합니다 \", React.createElement(_components.a, {\n    href: \"https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"MYSQL 날짜 및 시간 함수\"), \".\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">date</code>\"\n    }\n  }), \"타입은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">datetime</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">timestamp</code>\"\n    }\n  }), \" 등의 날짜 타입과 호환되므로 위 링크의 모든 함수 사용이 가능합니다.\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">varchar(8)</code>\"\n    }\n  }), \"의 경우 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">String</code>\"\n    }\n  }), \" 타입이므로 바로 함수를 사용할 수 없습니다. \", React.createElement(_components.em, null, \"DATE()\"), \" 함수나 \", React.createElement(_components.em, null, \"STR_TO_DATE()\"), \" 함수로 가공 후 사용해야 합니다. 단순 문자열 비교는 가능하지만 더 구체적인 월 비교, 일 비교나 더 나아가 연산은 지원되지 않습니다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"5-가독성\"\n  }, React.createElement(_components.a, {\n    href: \"#5-가독성\"\n  }, \"5. 가독성\")), \"\\n\", React.createElement(_components.p, null, \"YYYY-MM-DD는 일반적으로 년, 월, 일을 인식하는 포맷입니다.\\n현재 사용자가 보는 화면 또한 가독성을 위해 포맷팅 작업을 일일이 별도로 해주고 있는데 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">date</code>\"\n    }\n  }), \"를 사용하면 문자열 그대로 받아 사용하면 됩니다.\"), \"\\n\", React.createElement(_components.p, null, \"위처럼 별도의 포맷팅이 없어도 아래와 같이 표현됩니다.\"), \"\\n\", React.createElement(Image, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/f489f591-951c-41fd-bc7c-c3991509a9f5/image.png\"\n  }), \"\\n\", React.createElement(_components.p, null, \"사용자와 개발자 모두에게 가독성과 편의성을 향상시켜줍니다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"date-타입-칼럼에-입력-가능한-형식들\"\n  }, React.createElement(_components.a, {\n    href: \"#date-타입-칼럼에-입력-가능한-형식들\"\n  }, \"date 타입 칼럼에 입력 가능한 형식들\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"YYYYMMDD, YYMMDD, YYYY-MM-DD, YYYY#MM#DD\"), \" 등 다양한 문자열 포맷으로 입력이 가능합니다. 사실상 년, 월, 일 사이 구분자가 어떤 것이어도 무관하며 연월일 6 자리도 인식 가능합니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"입력값\"), React.createElement(_components.th, null, \"출력값\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"'20200101', '2020#01#01', '200101', '20200101'\"), React.createElement(_components.td, null, \"2020-01-01\")))), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"숫자, String\"), \" 타입으로 입력이 가능합니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"입력값\"), React.createElement(_components.th, null, \"출력값\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"'20200101', 20200101\"), React.createElement(_components.td, null, \"'2020-01-01'\")))), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"0\"), \"도 입력 가능합니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"입력값\"), React.createElement(_components.th, null, \"출력값\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"0\"), React.createElement(_components.td, null, \"'0000-00-00'\")))), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"datetime타입\"), \"도 입력할 수 있습니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"입력값\"), React.createElement(_components.th, null, \"출력값\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"'2023-10-19 20:06:38'\"), React.createElement(_components.td, null, \"'2023-10-19'\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.em, null, \"NOW()\")), React.createElement(_components.td, null, \"'2023-10-25' (오늘 날짜)\")))), \"\\n\", React.createElement(_components.p, null, \"만약 드물지만 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">date</code>\"\n    }\n  }), \"를 'YYYYMMDD'의 plain한 문자열로 사용해야 한다면 \", React.createElement(_components.em, null, \"date_format()\"), \" 함수를 통해 문자열을 변환해 내려줄 수 있습니다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"sql\\\"><pre class=\\\"language-sql\\\"><code class=\\\"language-sql\\\"><span class=\\\"token keyword\\\">select</span> date_format<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'2022-11-11'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'%Y%m%d'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">-- 20221111 출력</span></code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width}\n        style={{ cursor: expandable ? 'zoom-in' : 'default' }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)'\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <div\n              style={{\n                borderRadius: 8,\n                maxWidth: 1200,\n                width: '80%',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            >\n              <img src={src} width=\"100%\" />\n            </div>\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","table","thead","tr","th","tbody","td","strong","h3","a","del","em","ul","li","_provideComponents","components","React","dangerouslySetInnerHTML","__html","Image","src","caption","id","href","rel","wrapper","MDXLayout","_ref","width","expandable","isExpanded","toggleExpanded","useState","___EmotionJSX","style","cursor","onClick","undefined","ReactDOM","position","top","left","height","backgroundColor","borderRadius","maxWidth","transform","document","body"],"sourceRoot":""}