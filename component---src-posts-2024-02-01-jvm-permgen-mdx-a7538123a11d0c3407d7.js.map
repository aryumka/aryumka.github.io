{"version":3,"file":"component---src-posts-2024-02-01-jvm-permgen-mdx-a7538123a11d0c3407d7.js","mappings":"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","sources":["webpack://aryumka.me/./src/posts/2024-02-01-jvm-permgen.mdx","webpack://aryumka.me/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    strong: \"strong\",\n    blockquote: \"blockquote\",\n    img: \"img\",\n    del: \"del\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h3, {\n    id: \"의문의-서막-permgen-space\"\n  }, React.createElement(_components.a, {\n    href: \"#의문의-서막-permgen-space\"\n  }, \"의문의 서막: PermGen Space\")), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">java.lang.OutOfMemoryError : PermGen space </code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"레거시 시스템에서 java7 또는 이전 버젼을 쓸때 늘 보던 에러다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">-XX:PermSize=128m -XX:MaxPermSize=128m</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위와 같은 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">vm arguments</code>\"\n    }\n  }), \"를 넣어 메모리를 늘려주면 해결됐는데 이걸 깜빡할 때마다 OOME가 발생하곤 했다.\\nJVM 내 메모리가 부족하다는 정도로만 이해했는데 왜 고정사이즈로 되어있는 건지 또 디폴트 사이즈는 어째 이리 작은건지 어리둥절했다.\"), \"\\n\", React.createElement(_components.p, null, \"이후 사내 솔루션 웹 전환을 맡고 나서는 위 오류를 볼 수 없었고 금새 기억에서 사라졌다.\\n그리고 이제 와서야 왜 저 에러를 다시 볼 수 없었는지를 알게 되었다.\"), \"\\n\", React.createElement(_components.p, null, \"이유는 바로 \", React.createElement(_components.strong, null, \"자바 8 이후로 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">PermGen</code>\"\n    }\n  }), \"이 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Metaspace</code>\"\n    }\n  }), \"로 대체되었고 8.0이후에는 자동으로 동적으로 조절되기\"), \" 때문이었다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"jvm의-메모리-구조\"\n  }, React.createElement(_components.a, {\n    href: \"#jvm의-메모리-구조\"\n  }, \"JVM의 메모리 구조\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">PermGen</code>\"\n    }\n  }), \"과 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Metaspace</code>\"\n    }\n  }), \"에 대해 알아보기 전에 먼저 간략한 JVM의 메모리 구조부터 정리해보자.\"), \"\\n\", React.createElement(_components.p, null, \"JVM 메모리 풀은 크게 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">on-heap</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">off-heap</code>\"\n    }\n  }), \" 두 가지로 나뉜다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">on-heap</code>\"\n    }\n  }), \" 영역은 우리가 흔히 알고 있는 힙 영역으로 \", React.createElement(_components.strong, null, \"동적으로\"), \" 생성되는 객체들이 저장되는 영역이다. JVM의 메인 영역이라 볼 수 있으며 \", React.createElement(_components.strong, null, \"GC(가비지 컬렉터)의 주요 관리 대상\"), \"이다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">off-heap</code>\"\n    }\n  }), \" 영역은 메인 힙 영역을 제외한 영역으로 대개 GC의 관리 대상이 아니다. 주로 생명주기가 긴 \", React.createElement(_components.strong, null, \"정적 데이터\"), \"들이 저장된다.\\n위에서 언급한 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">PermGen</code>\"\n    }\n  }), \"과 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Metaspace</code>\"\n    }\n  }), \"가 바로 여기에 속한다. 그리고 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">off-heap</code>\"\n    }\n  }), \" 중에서도 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">메서드 영역</code>\"\n    }\n  }), \"에 속한다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"** JVM 메모리 풀**\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"힙 영역\"), \" 일반적인 자바 힙. JVM 실행 중 생성되는 자바 객체들이 저장된다. 모든 JVM 쓰레드에 의해 전역적으로 참조된다.\\n\", React.createElement(_components.strong, null, \"메서드 영역\"), \" 클래스, 메서드, 필드 등의 클래스와 관련된 모든 메타데이터, 그리고 런타임 상수 풀(runtime constant pool)이 저장된다. 모든 JVM 쓰레드에 의해 전역적으로 참조된다.\\n\", React.createElement(_components.strong, null, \"코드 캐시\"), \" JIT 컴파일러에 의해 컴파일된 코드들이 저장되는 영역이다.\\n\", React.createElement(_components.strong, null, \"네이티브 메모리 영역\"), \" OS에 의해 관리되는 가용 시스템 메모리이다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"메서드-영역\"\n  }, React.createElement(_components.a, {\n    href: \"#메서드-영역\"\n  }, \"메서드 영역\")), \"\\n\", React.createElement(_components.p, null, \"JVM 공식 스펙에서는 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">메서드 영역</code>\"\n    }\n  }), \"으로 일컫어지지만 흔히 클래스 정보를 저장하기에 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">클래스 영역</code>\"\n    }\n  }), \" 또는 정적인 정보를 저장하기에 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">스태틱 영역</code>\"\n    }\n  }), \"이라고 불리기도 한다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">메서드 영역</code>\"\n    }\n  }), \"은 JVM 실행 후 클래스 로딩 단계에서 클래스로더에 의해 *.class 파일들의 바이트코드가 메모리로 로딩될 때 할당된다. 이 때 JVM의 런타임 데이터 영역(Runtime Data area)에 바이트코드에 담긴 데이타를 배치한다.\"), \"\\n\", React.createElement(_components.p, null, \"이후 힙 영역의 객체들이 클래스의 메타데이타를 참조할 때 바로 이 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">메서드 영역</code>\"\n    }\n  }), \"을 찾아가 참조한다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.img, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/5d229294-1008-49d1-be40-cf13d9f9604c/image.png\",\n    alt: \"\"\n  }), \"\\n그림을 통해 최대한 추상적으로 표현해보았다.\\n세부 구조는 위와 같이 단순하지 \", React.createElement(_components.del, null, \"허접하지\"), \" 않으며 JVM 공식 스펙에서 힙과 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">메서드 영역</code>\"\n    }\n  }), \"의 내부 디자인에 대해 관여하지 않기 때문에 벤더마다 상이할 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"메서드 영역은 다음과 같은 클래스별 정보를 저장한다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"클래스로더에 대한 참조\"), \"\\n\", React.createElement(_components.li, null, \"런타임 상수 풀(Run Time Constant Pool)\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"숫자 상수값\"), \"\\n\", React.createElement(_components.li, null, \"필드 참조: 클래스 내부의 필드 참조\"), \"\\n\", React.createElement(_components.li, null, \"메서드 참조: 클래스 내부의 메서드 참조\"), \"\\n\", React.createElement(_components.li, null, \"속성: 클래스 또는 메서드에 대한 부가 정보\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"각 필드의 이름, 타입, 접근제어자, 속성\"), \"\\n\", React.createElement(_components.li, null, \"각 메서드의 이름, 리턴 타입, 파라미터 타입 (순서대로), 접근제어자, 속성\"), \"\\n\", React.createElement(_components.li, null, \"메서드 코드\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"바이트코드\"), \"\\n\", React.createElement(_components.li, null, \"피연산자 스택 크기(Operand stack size)\"), \"\\n\", React.createElement(_components.li, null, \"지역 변수 크기\"), \"\\n\", React.createElement(_components.li, null, \"지역 변수 테이블\"), \"\\n\", React.createElement(_components.li, null, \"예외 테이블\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"이렇게 저장된 정보는 런타임동안 계속 존재하며 모든 스레드에 의해 지속적으로 참조된다.\\n일반적으로는 클래스 메타데이타는 클래스가 로드될 때 정적으로 저장되기 때문에 동시성의 문제가 발생하지 않는다.. \", React.createElement(_components.del, null, \"리플렉션 등을 통해 프로그램 실행 중 동적으로 바뀌지 않는다면...\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"그래서-permgenspace와-metaspace는-뭐가-다를까\"\n  }, React.createElement(_components.a, {\n    href: \"#그래서-permgenspace와-metaspace는-뭐가-다를까\"\n  }, \"그래서 PermGenSpace와 MetaSpace는 뭐가 다를까\")), \"\\n\", React.createElement(_components.p, null, \"둘 다 메서드 영역이지만 다르다. 가장 큰 차이점은 바로 사용하는 메모리 영역이다.\"), \"\\n\", React.createElement(_components.img, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/06a9cbce-cb02-4956-8b17-b1d359b9357d/image.png\",\n    alt: \"\"\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">PermGenSpace</code>\"\n    }\n  }), \"는 힙 영역이며 따라서 앞에서 언급했듯 고정된 메모리를 사용, 가능한 최대 크기는 힙의 크기라고 볼 수 있다. 기본 사이즈는 32비트 JVM에서 64 MB, 64비트 버젼에서 82 MB이다.\\n이와 반대로 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Metaspace</code>\"\n    }\n  }), \"는 네이티브 영역, 즉 OS에 의해 관리되는 메모리에 존재하며 그 크기가 가변적이다. 가능한 최대 크기는 시스템의 가용 메모리가 된다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Metaspace</code>\"\n    }\n  }), \"는 비록 네이티브 영역에 존재하며 상대적으로 용량이 넉넉하지만, 최대 용량이 찰 경우 GC가 발동한다. 참조되지 않는 클래스 메타데이터는 삭제된다.\"), \"\\n\", React.createElement(_components.p, null, \"관련 옵션은 아래와 같은 VM 옵션으로 설정할 수 있다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">MetaspaceSize</code>\"\n    }\n  }), \": 초기 크기를 설정. JVM은 이 크기를 초과하면 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Metaspace</code>\"\n    }\n  }), \"의 크기를 동적으로 조정할 수 있다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">MaxMetaspaceSize</code>\"\n    }\n  }), \": 최대 크기를 설정. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Metaspace</code>\"\n    }\n  }), \"가 이 크기를 초과하면 OutOfMemoryError가 발생.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">MinMetaspaceFreeRatio</code>\"\n    }\n  }), \": 가비지 컬렉션 후에 클래스 메타데이터 용량의 최소 비율. 즉, 가비지 컬렉션 이후 특정 비율 이상의 여유 공간이 있어야 한다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">MaxMetaspaceFreeRatio</code>\"\n    }\n  }), \": 가비지 컬렉션 후에 클래스 메타데이터 용량의 최대 비율.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"참고로 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">PermGenSpace</code>\"\n    }\n  }), \"의 경우 java 8 이후 제거되면서 관련된 VM 옵션들도 모두 Deprecated되었다.\"), \"\\n\", React.createElement(_components.p, null, \"결론적으로는 시스템 가용메모리를 모두 사용할 수 있고 GC까지 작동하니 메모리 관점에서 아주 편해졌다고 할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"하지만 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Metaspace</code>\"\n    }\n  }), \" 또한 언제든 메모리 누수가 발생할 수 있으며 최악의 경우 어플리케이션 뿐만이 아닌 전체 시스템에 영향을 미친다는 점에서 주의를 기울여야 관리해야 한다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.img, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/651716c8-bc12-4b2c-a462-06dc5f49cf81/image.png\",\n    alt: \"\"\n  }), \"\\nVisual VM에서 확인한 metaspace\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"마치며\"\n  }, React.createElement(_components.a, {\n    href: \"#마치며\"\n  }, \"마치며\")), \"\\n\", React.createElement(_components.p, null, \"리플렉션을 공부하다가 글로 배운 jvm의 메서드 영역이 알고보니 구면이었다니 너무 신기했다. 레가시 시스템을 해봤기에 더욱 와닿았던 것 같다.\\n역시 도움이 되지 않는 경험이란 건 없는 듯 하다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"출처\"\n  }, React.createElement(_components.a, {\n    href: \"#출처\"\n  }, \"출처\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://www.oracle.com/webfolder/technetwork/tutorials/mooc/JVM_Troubleshooting/week1/lesson1.pdf\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"https://www.oracle.com/webfolder/technetwork/tutorials/mooc/JVM_Troubleshooting/week1/lesson1.pdf\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://docs.oracle.com/javase/specs/jvms/se8/html/index.html\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"https://docs.oracle.com/javase/specs/jvms/se8/html/index.html\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://blog.jamesdbloom.com/JVMInternals.html#dynamic_linking\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"https://blog.jamesdbloom.com/JVMInternals.html#dynamic_linking\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://www.baeldung.com/java-permgen-metaspace\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"https://www.baeldung.com/java-permgen-metaspace\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h3","a","span","p","strong","blockquote","img","del","ul","li","_provideComponents","components","React","id","href","dangerouslySetInnerHTML","__html","src","alt","rel","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}