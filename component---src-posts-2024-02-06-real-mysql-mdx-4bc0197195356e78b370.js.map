{"version":3,"file":"component---src-posts-2024-02-06-real-mysql-mdx-4bc0197195356e78b370.js","mappings":"oLAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,KAAM,OACNC,EAAG,MACFC,EAAAA,EAAAA,KAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,GAAI,KAAM,KAAMM,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,gPAAiP,MAAO,KAAMK,EAAAA,cAAoBT,EAAYK,KAAM,CAC7aK,wBAAyB,CACvBC,OAAQ,uMAER,KAAMF,EAAAA,cAAoBT,EAAYM,EAAG,KAAM,8GAA+G,KAAMG,EAAAA,cAAoBT,EAAYG,GAAI,KAAM,KAAMM,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,KAAMK,EAAAA,cAAoBT,EAAYM,EAAG,KAAM,oNAAqN,MAAO,KAAMG,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,KAAMK,EAAAA,cAAoBT,EAAYM,EAAG,KAAM,0CAA2CG,EAAAA,cAAoBT,EAAYK,KAAM,CAC3rBK,wBAAyB,CACvBC,OAAQ,uDAER,6BAA8BF,EAAAA,cAAoBT,EAAYK,KAAM,CACtEK,wBAAyB,CACvBC,OAAQ,4CAER,yFAA0F,MAAO,MAAO,KAAMF,EAAAA,cAAoBT,EAAYM,EAAG,KAAM,eAC7J,CAKA,UAJA,SAAoBP,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,KAAsBR,EAAMS,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWd,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECAA,MAAMe,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBR,GAC/B,MAAMS,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfP,EACFA,EAAWS,GAGb,IAAIA,KAAsBT,EACnC,GACA,CAACS,EAAmBT,GAExB,C","sources":["webpack://aryumka.me/./src/posts/2024-02-06-real-mysql.mdx","webpack://aryumka.me/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ul: \"ul\",\n    li: \"li\",\n    span: \"span\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"운영중인 DB에 Foreign Key를 떼고 운영하는 것은 굉장히 흔한 사례다. 반면 이게 올바른 프랙티스인지는 늘 논란의 여지가 있다. 여러가지 전략을 가져갈 수 있겠지만 Foreign key를 달고 운영한다면 분명히 Foreign Key가 적용된 칼럼을 긴급하게 수정해야할 때가 있을 것인데 연관관계가 복잡하다면 시간이 오래걸릴 것이다.\\nMySQL에서는 이럴 때 글로벌 혹은 세션 설정으로 외래키 검사를 끌 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">SET foreign_key_checks = OFF;\\nSET SESSION foreign_key_checks = OFF;</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 두 가지 명령어 모두 현재 실행 중인 세션의 설정을 변경한다(글로벌이면 전체 설정이 변경됨).\\n주의할 점: 작업이 끝나면 부모키와 자식키의 정합성을 모두 맞춘 후 설정을 원복해야 한다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"DB에서도 command와 query의 처리는 다르다. InnoDB에서는 쓰기 작업은 지연(버퍼)되어 처리될 수 있지만 읽기 작업은 즉시 처리된다. 읽기 작업은 대부분 포그라운드 스레드(클라이언트)에서 담당하지만 쓰기 작업은 백그라운드 스레드에서 담당한다. 백그라운드 스레드는 락을 모니터링하거나, 버퍼에 있는 데이터로 내리거나 디스크로 쓰는 등 복잡한 작업들을 처리한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"스프링에서 트랜잭션을 메서드 마다 개별설정해야하는 이유:\\n메서드마다 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">@Transactional</code>\"\n    }\n  }), \" 애너테이션을 사용한 개별 트랜잭션 적용 vs \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">AOP</code>\"\n    }\n  }), \"를 이용한 서비스 일괄 적용.\\n항상 의문이던 부분이었다. 인프런에 DB관련 강의를 들을 때도 질문을 했었지만 어떤 게 더 바람직한지 명쾌하지는 않았다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"트랜잭션의 설정 범위\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","ul","li","span","p","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}