{"version":3,"file":"component---src-posts-2024-05-04-til-test-container-mdx-ead019610ee03a38b271.js","mappings":"8LAIA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,KAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,uGAAwG,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,2BAA4B,KAAMI,EAAAA,cAAoBC,EAAAA,EAAO,CAC5SC,IAAK,gGACH,KAAMF,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,kCAAmC,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CAChIM,wBAAyB,CACvBC,OAAQ,qkBAER,KAAMJ,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,aAAc,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CAC3GM,wBAAyB,CACvBC,OAAQ,smCAER,KAAMJ,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,kDAAmD,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CAChJM,wBAAyB,CACvBC,OAAQ,y2CAER,KAAMJ,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,iCACrD,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,KAAsBN,EAAMO,YAC3E,OAAOO,EAAYN,EAAAA,cAAoBM,EAAWd,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,C,yDC6BA,IA/Cce,IAAsD,IAArD,IAAEL,EAAG,QAAEM,EAAO,MAAEC,EAAK,WAAEC,GAAwBH,EAC5D,MAAM,EAACI,EAAW,EAACC,IAAkBC,EAAAA,EAAAA,WAAS,GAE9C,OACEC,EAAAA,EAAAA,GAAA,eACEA,EAAAA,EAAAA,GAAA,OACEZ,IAAKA,EACLO,MAAOA,EACPM,MAAO,CAAEC,OAAQN,EAAa,UAAY,WAC1CO,QAASP,EAAa,IAAME,GAAe,QAAQM,IAEpDV,IAAWM,EAAAA,EAAAA,GAAA,cAAYX,wBAAyB,CAAEC,OAAQI,KAC1DG,GACCQ,EAAAA,cACEL,EAAAA,EAAAA,GAAA,OACEC,MAAO,CACLK,SAAU,QACVC,IAAK,EACLC,KAAM,EACNb,MAAO,OACPc,OAAQ,OACRP,OAAQ,WACRQ,gBAAiB,sBAEnBP,QAASA,IAAML,GAAe,KAE9BE,EAAAA,EAAAA,GAAA,OACEC,MAAO,CACLU,aAAc,EACdC,SAAU,KACVjB,MAAO,MACPW,SAAU,QACVC,IAAK,MACLC,KAAM,MACNK,UAAW,wBACXH,gBAAiB,WAGnBV,EAAAA,EAAAA,GAAA,OAAKZ,IAAKA,EAAKO,MAAM,WAGzBmB,SAASC,MAEN,C,qEC1Bb,MAAMC,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBjC,GAC/B,MAAMkC,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfhC,EACFA,EAAWkC,GAGb,IAAIA,KAAsBlC,EACnC,GACA,CAACkC,EAAmBlC,GAExB,C","sources":["webpack://aryumka.me/./src/posts/2024-05-04-til-test-container.mdx","webpack://aryumka.me/./src/components/Image/index.tsx","webpack://aryumka.me/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Image from '@components/Image';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"In-memory service나 mock 없이 통합 테스트 환경에서 Docker 이미지 기반으로 DB, 메시지 브로커, 검색엔진 등의 테스트 인프라를 간단하게 구성할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"특히 클라우드 환경의 MSA에서 유용하다.\"), \"\\n\", React.createElement(Image, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/9fcbd346-bd6e-4097-bce9-b7c9468b5cfc/image.png\"\n  }), \"\\n\", React.createElement(_components.p, null, \"JUnit을 이용한 테스트에서는 아래와 같이 사용한다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\">testImplementation <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"org.junit.jupiter:junit-jupiter:5.8.1\\\"</span></span>\\ntestImplementation <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"org.testcontainers:testcontainers:1.19.7\\\"</span></span>\\ntestImplementation <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"org.testcontainers:junit-jupiter:1.19.7\\\"</span></span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"의존성을 설정하고\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token annotation punctuation\\\">@Testcontainers</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">TokenReplayIntegrationTest</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n    <span class=\\\"token annotation punctuation\\\">@Container</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token class-name\\\">RedpandaContainer</span> <span class=\\\"token constant\\\">REDPANDA_CONTAINER</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">RedpandaContainer</span><span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token string\\\">\\\"docker.redpanda.com/vectorized/redpanda:v22.2.1\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 처럼 kafka 통합 테스트 환경을 RedPanda를 이용하여 구성할 수도 있고\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token class-name\\\">OracleContainer</span> oracleContainer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">OracleContainer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"gvenzl/oracle-xe:21-slim-faststart\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">withDatabaseName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"testDB\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">withUsername</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"testUser\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">withPassword</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"testPassword\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"위 처럼 DB 통합 테스트 환경을 구성할 수도 있다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface ImageProps {\n  src: string;\n  caption?: string;\n  width?: number;\n  expandable?: boolean;\n}\n\nconst Image = ({ src, caption, width, expandable }: ImageProps) => {\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  return (\n    <figure>\n      <img\n        src={src}\n        width={width}\n        style={{ cursor: expandable ? 'zoom-in' : 'default' }}\n        onClick={expandable ? () => toggleExpanded(true) : undefined}\n      />\n      {caption && <figcaption dangerouslySetInnerHTML={{ __html: caption }} />}\n      {isExpanded &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'zoom-out',\n              backgroundColor: 'rgba(0, 0, 0, 0.7)'\n            }}\n            onClick={() => toggleExpanded(false)}\n          >\n            <div\n              style={{\n                borderRadius: 8,\n                maxWidth: 1200,\n                width: '80%',\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: 'white'\n              }}\n            >\n              <img src={src} width=\"100%\" />\n            </div>\n          </div>,\n          document.body\n        )}\n    </figure>\n  );\n};\n\nexport default Image;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","Image","src","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","_ref","caption","width","expandable","isExpanded","toggleExpanded","useState","___EmotionJSX","style","cursor","onClick","undefined","ReactDOM","position","top","left","height","backgroundColor","borderRadius","maxWidth","transform","document","body","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}