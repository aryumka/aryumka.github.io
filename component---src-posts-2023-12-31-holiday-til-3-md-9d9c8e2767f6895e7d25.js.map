{"version":3,"file":"component---src-posts-2023-12-31-holiday-til-3-md-9d9c8e2767f6895e7d25.js","mappings":"qKAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,WAAY,aACZC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,IAAK,MACLC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,KAAsBZ,EAAMa,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBb,EAAYG,EAAG,KAAM,gCAAiC,KAAMU,EAAAA,cAAoBb,EAAYI,WAAY,KAAM,KAAMS,EAAAA,cAAoBb,EAAYG,EAAG,KAAM,uFAAwF,MAAO,KAAMU,EAAAA,cAAoBb,EAAYG,EAAG,KAAM,kCAAmC,KAAMU,EAAAA,cAAoBb,EAAYI,WAAY,KAAM,KAAMS,EAAAA,cAAoBb,EAAYG,EAAG,KAAM,sBAAuB,MAAO,KAAMU,EAAAA,cAAoBb,EAAYG,EAAG,KAAM,qBAAsB,KAAMU,EAAAA,cAAoBb,EAAYK,GAAI,CACroBS,GAAI,oCACHD,EAAAA,cAAoBb,EAAYM,EAAG,CACpCS,KAAM,qCACL,wCAAyC,KAAMF,EAAAA,cAAoBb,EAAYG,EAAG,KAAM,eAAgBU,EAAAA,cAAoBb,EAAYO,KAAM,CAC/IS,wBAAyB,CACvBC,OAAQ,uDAER,6IAA8I,KAAMJ,EAAAA,cAAoBb,EAAYK,GAAI,CAC1LS,GAAI,gDACHD,EAAAA,cAAoBb,EAAYM,EAAG,CACpCS,KAAM,iDACL,kDAAmD,KAAMF,EAAAA,cAAoBb,EAAYQ,IAAK,CAC/FU,IAAK,8FACLC,IAAK,KACH,KAAMN,EAAAA,cAAoBb,EAAYO,KAAM,CAC9CS,wBAAyB,CACvBC,OAAQ,s7BAER,KAAMJ,EAAAA,cAAoBb,EAAYG,EAAG,KAAM,iCAAkC,KAAMU,EAAAA,cAAoBb,EAAYK,GAAI,CAC7HS,GAAI,wBACHD,EAAAA,cAAoBb,EAAYM,EAAG,CACpCS,KAAM,yBACL,0BAA2B,KAAMF,EAAAA,cAAoBb,EAAYG,EAAG,KAAM,+CAAgD,KAAMU,EAAAA,cAAoBb,EAAYO,KAAM,CACvKS,wBAAyB,CACvBC,OAAQ,8vGAER,KAAMJ,EAAAA,cAAoBb,EAAYG,EAAG,KAAM,kEAAmE,KAAMU,EAAAA,cAAoBb,EAAYS,GAAI,KAAM,KAAMI,EAAAA,cAAoBb,EAAYU,GAAI,KAAM,6CAA8C,MAAO,KAAMG,EAAAA,cAAoBb,EAAYO,KAAM,CACrTS,wBAAyB,CACvBC,OAAQ,usDAER,KAAMJ,EAAAA,cAAoBb,EAAYS,GAAI,CAC5CW,MAAO,KACN,KAAMP,EAAAA,cAAoBb,EAAYU,GAAI,KAAM,gDAAiD,MAAO,KAAMG,EAAAA,cAAoBb,EAAYO,KAAM,CACrJS,wBAAyB,CACvBC,OAAQ,8tCAGd,CAKA,UAJA,SAAoBlB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOsB,QAASC,GAAarB,OAAOC,OAAO,CAAC,GAAGS,EAAAA,EAAAA,KAAsBZ,EAAMa,YAC3E,OAAOU,EAAYT,EAAAA,cAAoBS,EAAWvB,EAAOc,EAAAA,cAAoBf,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qEC7BA,MAAMwB,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBb,GAC/B,MAAMc,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfZ,EACFA,EAAWc,GAGb,IAAIA,KAAsBd,EACnC,GACA,CAACc,EAAmBd,GAExB,C","sources":["webpack://aryumka.me/./src/posts/2023-12-31-holiday-til-3.md","webpack://aryumka.me/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    blockquote: \"blockquote\",\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    img: \"img\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"3일차에 공부하다보니 다음과 같은 고민을 하게됐다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"JPA에서 @Transactional을 무조건 붙여야할까?\\nKotlin에서 JpaRepository를 쓸 때 Optional을 안쓰는 법이 있을까?\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"그리고 생각보다 시간을 많이 잡아먹었던 문제가 있었다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"WebMvc 테스트가 안됐던 이유\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"위 내용들에 대해 정리해보았다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"1-jpa에서-transactional을-무조건-붙여야할까\"\n  }, React.createElement(_components.a, {\n    href: \"#1-jpa에서-transactional을-무조건-붙여야할까\"\n  }, \"1. JPA에서 @Transactional을 무조건 붙여야할까?\")), \"\\n\", React.createElement(_components.p, null, \"습관적으로 서비스에서 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">@Transactional</code>\"\n    }\n  }), \"을 붙였었다. 하지만 레포지토리에 저장하는 등 하나만 실행을 한다면 과연 저 애너테이션이 필요할까?\\n결론적으로는 필요없다.\\n명시적으로 트랜잭션 경계를 구분해야할 필요성이 있을 때, 트랜잭션 격리수준, 예외 등을 설정할 때 등에 사용하면 된다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"2-kotlin에서-jparepository를-쓸-때-optional-안쓰는-법\"\n  }, React.createElement(_components.a, {\n    href: \"#2-kotlin에서-jparepository를-쓸-때-optional-안쓰는-법\"\n  }, \"2. Kotlin에서 JpaRepository를 쓸 때 Optional 안쓰는 법\")), \"\\n\", React.createElement(_components.img, {\n    src: \"https://velog.velcdn.com/images/aryumka/post/0c169fc0-5d98-4cd2-9d50-04672ebc9d84/image.png\",\n    alt: \"\"\n  }), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\">    <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">getFundingProposalByIdOrNull</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token operator\\\">:</span> Long<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> FundingProposal<span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">=</span>\\n        repository<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findByIdOrNull</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?:</span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">EmptyResultDataAccessException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"이미 nullable을 리턴하는 메서드들이 다 있다!\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"3-webmvc-테스트가-안됐던-이유\"\n  }, React.createElement(_components.a, {\n    href: \"#3-webmvc-테스트가-안됐던-이유\"\n  }, \"3. WebMvc 테스트가 안됐던 이유\")), \"\\n\", React.createElement(_components.p, null, \"이전에 작성했던 kotest+mockk 코드가 작동하지 않았던 이유를 찾았다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token annotation builtin\\\">@WebMvcTest</span><span class=\\\"token punctuation\\\">(</span>ProposeController<span class=\\\"token operator\\\">::</span><span class=\\\"token keyword\\\">class</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token annotation builtin\\\">@AutoConfigureMockMvc</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">ProposeUpdateTest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token annotation builtin\\\">@Autowired</span> <span class=\\\"token keyword\\\">val</span> mockMvc<span class=\\\"token operator\\\">:</span> MockMvc<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">FunSpec</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token annotation builtin\\\">@MockkBean</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">lateinit</span> <span class=\\\"token keyword\\\">var</span> service<span class=\\\"token operator\\\">:</span> ProposeService\\n\\n    <span class=\\\"token keyword\\\">init</span> <span class=\\\"token punctuation\\\">{</span>\\n        beforeTest <span class=\\\"token punctuation\\\">{</span>\\n            service <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">mockk</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            every <span class=\\\"token punctuation\\\">{</span> service<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createFundingProposal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">any</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span> returns <span class=\\\"token function\\\">FundingProposal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1L</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"제안서 제목\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n            every <span class=\\\"token punctuation\\\">{</span> service<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">updateFundingProposal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">any</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">any</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span> returns <span class=\\\"token function\\\">FundingProposal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1L</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"새로운 제안서 제목\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">.</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"이유는 mockk 라이브러리의 문제가 아니라 kotest에서 스프링 의존성을 주입하는 방법을 몰랐었기 때문이다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"클래스 바디의 init 블록 안에 Springextension을 넣어주거나\"), \"\\n\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token annotation builtin\\\">@WebMvcTest</span><span class=\\\"token punctuation\\\">(</span>ProposeController<span class=\\\"token operator\\\">::</span><span class=\\\"token keyword\\\">class</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token annotation builtin\\\">@AutoConfigureMockMvc</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">ProposeUpdateTest2</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token annotation builtin\\\">@Autowired</span> <span class=\\\"token keyword\\\">val</span> mockMvc<span class=\\\"token operator\\\">:</span> MockMvc<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">FunSpec</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">extensions</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">listOf</span><span class=\\\"token punctuation\\\">(</span>SpringExtension<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//이렇게</span>\\n\\n    <span class=\\\"token annotation builtin\\\">@MockkBean</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">lateinit</span> <span class=\\\"token keyword\\\">var</span> service<span class=\\\"token operator\\\">:</span> ProposeService\\n\\t<span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">.</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"클래스 바디에 테스트 함수를 작성하지 말고 상속받는 Spec의 인자로 넣어준다.\"), \"\\n\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token annotation builtin\\\">@WebMvcTest</span><span class=\\\"token punctuation\\\">(</span>ProposeController<span class=\\\"token operator\\\">::</span><span class=\\\"token keyword\\\">class</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token annotation builtin\\\">@AutoConfigureMockMvc</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token function\\\">ProposeUpdateTest2</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">val</span> mockMvc<span class=\\\"token operator\\\">:</span> MockMvc<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token annotation builtin\\\">@MockkBean</span> <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">var</span> service<span class=\\\"token operator\\\">:</span> ProposeService\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">FunSpec</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token comment\\\">//테스트할 내용</span>\\n<span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">.</span></code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","blockquote","h2","a","span","img","ol","li","_provideComponents","components","React","id","href","dangerouslySetInnerHTML","__html","src","alt","start","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}