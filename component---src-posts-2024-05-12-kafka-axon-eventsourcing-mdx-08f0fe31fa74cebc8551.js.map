{"version":3,"file":"component---src-posts-2024-05-12-kafka-axon-eventsourcing-mdx-08f0fe31fa74cebc8551.js","mappings":"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","sources":["webpack://aryumka.me/./src/posts/2024-05-12-kafka-axon-eventsourcing.mdx","webpack://aryumka.me/./node_modules/.pnpm/@mdx-js+react@3.0.1_@types+react@18.2.79_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    ol: \"ol\",\n    li: \"li\",\n    h3: \"h3\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, {\n    id: \"이벤트-소싱\"\n  }, React.createElement(_components.a, {\n    href: \"#이벤트-소싱\"\n  }, \"이벤트 소싱\")), \"\\n\", React.createElement(_components.p, null, \"이벤트 소싱(Event Sourcing)은 도메인의 상태를 변경하는 모든 사건을 이벤트 스트림으로 저장하는 방식이다.\"), \"\\n\", React.createElement(_components.p, null, \"계좌 잔액 관리를 예로 들어보자.\"), \"\\n\", React.createElement(_components.p, null, \"전통적인 방식이라면 거래 내역을 따로 저장하고 해당 거래로 인해 발생한 잔액을 별도의 테이블에 저장할 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"이벤트 소싱으로 계좌 잔액을 관리한다면 거래내역이 아니라 거래내역으로 인해 발생한 이벤트를 저장하게 된다.\\n현재 내 계좌에 남은 잔액은 수많은 거래(이벤트)들의 결과라고 볼 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"이 때 잔액을 계산하는 로직은 이벤트 스트림을 통해 계산할 수 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"kafka를-이용한-이벤트-스트리밍\"\n  }, React.createElement(_components.a, {\n    href: \"#kafka를-이용한-이벤트-스트리밍\"\n  }, \"Kafka를 이용한 이벤트 스트리밍\")), \"\\n\", React.createElement(_components.p, null, \"이벤트는 다양한 방법으로 처리할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"만약 이벤트를 발동하는 JVM과 이벤트를 처리하는 JVM이 다른 분산 환경이라면 브로커등의 미들웨어를 도입하여 안정적이고 효율적인 구현이 가능하다.\\nKafka는 분산형 스트리밍 플랫폼으로 특히 대용량 이벤트 스트림을 처리하는데 적합하다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"axon-framework의-이벤트-처리-방식\"\n  }, React.createElement(_components.a, {\n    href: \"#axon-framework의-이벤트-처리-방식\"\n  }, \"Axon Framework의 이벤트 처리 방식\")), \"\\n\", React.createElement(_components.p, null, \"Axon Framework는 이벤트 소싱을 통한 CQRS(Command Query Responsibility Segregation)와 DDD(Domain Driven Design)을 지원하는 프레임워크이다.\"), \"\\n\", React.createElement(_components.p, null, \"Axon Framework는 이벤트를 처리하는 방식으로 크게 2가지 방식을 제공한다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Subscribing Event Processor - 순서가 보장되고 하나의 스레드에서 처리되어야 하는 작업에 적합하다. 연동된 미들웨어가 실패할 경우 이벤트 발행 자체가 실패하도록 강제한다. AMQP를 이용하는 경우 적절하다.\"), \"\\n\", React.createElement(_components.li, null, \"Tracking Event Processor - 여러 스레드에서 각 프로세서가 작업을 분배하여 병렬 작업할 수 있도록 한다. Kafka가 실패해도 이벤트 발행 자체에는 영향을 주지 않는다. Kafka를 이용할 때 적합하다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"예제에는 Tracking Event Processor를 사용하였다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"예제\"\n  }, React.createElement(_components.a, {\n    href: \"#예제\"\n  }, \"예제\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"0-docker-composeyml\"\n  }, React.createElement(_components.a, {\n    href: \"#0-docker-composeyml\"\n  }, \"0. docker-compose.yml\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://github.com/aryumka/axonkafka/blob/master/docker-compose.yaml\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"docker-compose.yaml\"), \"를 이용하여 Kafka와 Zookeeper를 설정한다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"1-spring-boot-kafka-설정\"\n  }, React.createElement(_components.a, {\n    href: \"#1-spring-boot-kafka-설정\"\n  }, \"1. Spring Boot Kafka 설정\")), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yaml\\\"><pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">axon</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">axonserver</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">enabled</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">false</span>\\n  <span class=\\\"token key atrule\\\">serializer</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">events</span><span class=\\\"token punctuation\\\">:</span> jackson\\n  <span class=\\\"token key atrule\\\">kafka</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">fetcher</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token key atrule\\\">enabled</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n    <span class=\\\"token key atrule\\\">clientid</span><span class=\\\"token punctuation\\\">:</span> kafka<span class=\\\"token punctuation\\\">-</span>axon<span class=\\\"token punctuation\\\">-</span>example\\n    <span class=\\\"token key atrule\\\">producer</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token key atrule\\\">retries</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span>\\n      <span class=\\\"token key atrule\\\">bootstrap-servers</span><span class=\\\"token punctuation\\\">:</span> localhost<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">29092</span>\\n    <span class=\\\"token key atrule\\\">consumer</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token key atrule\\\">event-processor-mode</span><span class=\\\"token punctuation\\\">:</span> tracking\\n      <span class=\\\"token key atrule\\\">bootstrap-servers</span><span class=\\\"token punctuation\\\">:</span> localhost<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">29092</span>\\n    <span class=\\\"token key atrule\\\">properties</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token key atrule\\\">security.protocol</span><span class=\\\"token punctuation\\\">:</span> PLAINTEXT</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, {\n    id: \"2-axon-설정\"\n  }, React.createElement(_components.a, {\n    href: \"#2-axon-설정\"\n  }, \"2. Axon 설정\")), \"\\n\", React.createElement(_components.p, null, \"기본적으로 JPA를 Event Store로 사용하고 Tracking Event Processor를 사용한다. DB는 H2를 사용한다.\\nToken Store는 InMemoryTokenStore를 사용한다. Token은 이벤트 스트림을 열 때 특정 이벤트의 위치를 특정하거나 특정한 위치에서 이벤트 스트림을 열기 위해 사용된다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token annotation builtin\\\">@SpringBootApplication</span>\\n<span class=\\\"token annotation builtin\\\">@EnableScheduling</span>\\n<span class=\\\"token keyword\\\">class</span> KafkaAxonApplication <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token annotation builtin\\\">@Bean</span>\\n    <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">tokenStore</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">InMemoryTokenStore</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token annotation builtin\\\">@Configuration</span>\\n<span class=\\\"token annotation builtin\\\">@ConditionalOnProperty</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"axon.kafka.consumer.event-processor-mode\\\"</span></span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> havingValue <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"tracking\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">class</span> TrackingConfiguration <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token annotation builtin\\\">@Autowired</span>\\n    <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">configureStreamableKafkaSource</span><span class=\\\"token punctuation\\\">(</span>\\n        configurer<span class=\\\"token operator\\\">:</span> EventProcessingConfigurer<span class=\\\"token punctuation\\\">,</span>\\n        streamableKafkaMessageSource<span class=\\\"token operator\\\">:</span> StreamableKafkaMessageSource<span class=\\\"token operator\\\">&lt;</span>String<span class=\\\"token punctuation\\\">,</span> ByteArray<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// Tracking Event Processor의 이름을 KAFKA_GROUP으로 설정하고 StreamableKafkaMessageSource를 사용하여 등록</span>\\n        configurer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">registerTrackingEventProcessor</span><span class=\\\"token punctuation\\\">(</span>KAFKA_GROUP<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> streamableKafkaMessageSource <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, {\n    id: \"3-bank-client\"\n  }, React.createElement(_components.a, {\n    href: \"#3-bank-client\"\n  }, \"3. Bank Client\")), \"\\n\", React.createElement(_components.p, null, \"1초에 한번씩 입금요청을 처리하도록 한다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"kotlin\\\"><pre class=\\\"language-kotlin\\\"><code class=\\\"language-kotlin\\\"><span class=\\\"token annotation builtin\\\">@Component</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> BankClient <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n    <span class=\\\"token annotation builtin\\\">@Scheduled</span><span class=\\\"token punctuation\\\">(</span>initialDelay <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10_000</span><span class=\\\"token punctuation\\\">,</span> fixedDelay <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">fun</span> <span class=\\\"token function\\\">deposit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        logger<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">debug</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string-literal singleline\\\"><span class=\\\"token string\\\">\\\"depositing </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">$</span><span class=\\\"token expression\\\">amount</span></span><span class=\\\"token string\\\"> from account </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">$</span><span class=\\\"token expression\\\">accountId</span></span><span class=\\\"token string\\\">\\\"</span></span> <span class=\\\"token punctuation\\\">}</span>\\n        commandGateway<span class=\\\"token punctuation\\\">.</span>send<span class=\\\"token operator\\\">&lt;</span>CompletableFuture<span class=\\\"token operator\\\">&lt;</span>String<span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>\\n                <span class=\\\"token function\\\">DepositMoneyCommand</span><span class=\\\"token punctuation\\\">(</span>\\n                        bankAccountId <span class=\\\"token operator\\\">=</span> accountId<span class=\\\"token punctuation\\\">,</span>\\n                        amountOfMoney <span class=\\\"token operator\\\">=</span> amount<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toLong</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">)</span>\\n        amount <span class=\\\"token operator\\\">=</span> amount<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">inc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","a","p","ol","li","h3","span","_provideComponents","components","React","id","href","rel","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}