{"componentChunkName":"component---src-templates-post-tsx-content-file-path-src-posts-2025-04-15-should-exception-be-thrown-mdx","path":"/posts/should-exception-be-thrown/","result":{"data":{"site":{"siteMetadata":{"title":"aryumka.me | devlog"}},"mdx":{"body":"\n# 0. 문제의식\n- 사내 슬랙에 에러 로그가 쌓이는데 어떤 것이 진짜 중요한 오류인지 알 수 없었다.\n- 언제 어떤 예외를 던져야 하는지, 커스텀 예외는 얼마나 만들어 써야 할지 명확한 기준이 없었다.\n\n# 1. 서론\n한가로운 주말 아침, 유튜브 알고리즘이 날 한 영상으로 이끌었다. 왜 리눅스의 창시자인 리누스 토르발즈가 커널 개발에 C++를 극도로 반대하는지에 대한 영상이었다. [**리누스 토르발즈의 C++ 혐오**](https://yarchive.net/comp/linux/c++.html)는 유명한데, 그는 심지어 C++가 **근본적으로 잘못된 언어**라며 대표적인 예로 **예외 처리(Exception Handling)**를 들었다.\n\n> C++의 예외 처리는 근본적으로 망가졌다. 특히 커널 개발용으로는 아예 박살이 나 있다.\n> (_the whole C++ exception handling thing is fundamentally broken. It's **especially** broken for kernels._)\n\n뒤통수를 맞은 느낌이었다. 예외를 던지지 않고 개발을 할 수 있다고?\n그렇다면 C나 전통적인 절차적 프로그래밍에는 **예외**라는 개념이 없었던 걸까?\n\n# 2. 절차적 예외 처리\n그렇다. C 언어에는 자바나 C++ 같은 객체지향 언어들이 가진 `try-catch`나 `Exception` 객체가 없다. 대신 에러 상태를 리턴 값으로 내려주고 호출부에서 이를 검증하는 방식이 일반적이다.\n\n```c\nint main() {\n    FILE *file = fopen(\"data.txt\", \"r\");\n    if (file == NULL) {\n        perror(\"파일 열기 실패\");\n        return 1; // 에러 코드 반환\n    }\n\n    fclose(file);\n    return 0; // 정상 종료\n}\n```\n\n이런 방식은 자바의 오래된 레거시 코드에서도 흔히 볼 수 있다. 하지만 명확한 한계를 갖고 있다.\n- 호출부에서 정상 값과 오류 값을 혼동할 수 있다.\n- 에러가 발생한 이유를 명확히 알기 어렵다.\n\n이를 보완하기 위해 에러 메시지를 문자열로 담은 구조체를 리턴하기도 한다.\n\n```java\npublic class FileReader {\n  public static Map<String, Object> readFile(String path) {\n    Path filePath = Paths.get(path);\n\n    if (!Files.exists(filePath)) {\n      return Map.of(\"success\", false, \"error\", \"파일이 존재하지 않습니다.\");\n    }\n\n    List<String> lines = Files.readAllLines(filePath);\n    return Map.of(\"success\", true, \"content\", String.join(\"\\n\", lines));\n  }\n}\n```\n실제 외부 API와 통신할 때도 이런 식의 문자열 응답을 자주 볼 수 있다. 이런 방식도 몇 가지 문제가 있다.\n\n- 호출 후 결과를 사용하기 전 매번 `if`로 정상 값 검사해야 함 → **보일러 플레이트 증가**\n- 에러 원인이 문자열로 주어져 상황에 맞는 대응이 어려움 → **유연성 저하**\n- 에러가 발생한 경우에도 호출부에서 처리를 강제할 수 없고 복구가 불가능한 상황에서도 계속 진행을 시도할 수 있음 → **예외 처리 강제성 부재**\n- 컴파일 타임에 실수를 알 수 없음 → **치명적 결과로 이어질 수 있음** ☠️\n\n어차피 실패인데 왜 끝까지 실행되어야 할까? 더군다나 한번의 실수가 치명적인 오류 전파로 이어질 수 있다면?\n결국 이런 방식은 실수하기 너무 쉽다. 실패할 상황이라면 차라리 빨리 포기하는 게 낫지 않을까?\n\n# 3. 자바의 예외 처리\n\n## Fail Fast and Throw\n\n리누스가 극혐했던 객체지향 언어들(C++, Java 등)은 예외를 던지고 받는 방식을 쓴다. 특히 자바는 **Fail Fast** 철학을 따른다. 문제가 있을 때 빠르게 실패해 버그를 즉시 드러내는 방식이다.\n\n빨리 실패해야 빨리 고칠 수 있다.\n\n자바의 예외는 크게 두 가지로 나눈다. 바로 `Checked Exception`과 `Unchecked Exception`이다.\n\n## Checked Exception\n\n`Checked Exception`은 C++ 등 대부분 언어에는 존재하지 않는 자바만의 독특한 예외 처리 방식이다. 대표적인 예로 `IOException`이 있다.\n\n`Checked Exception`은 **컴파일러가 반드시** 예외 처리를 요구한다. 주로 일반적, 예측가능한 비즈니스 케이스에서 사용하라고 의도된 디자인이다. 심지어 스프링에서는 아래처럼 던져도 롤백조차 되지 않는다.\n```java\n@Transactional\npublic void doSomething() throws IOException {\n    try {\n        //파일 처리 등\n    } catch (IOException e) {\n        throw e; // Checked Exception → Spring은 롤백 안 함\n    }\n}\n```\n실패 가능한 경우가 메서드 시그니처에 나와있으므로 **API가 어떤 예외를 던질 수 있는지** 명시적이라는 장점이 있다. 코드 자체가 문서화된다.\n\n그러나 오히려 이 때문에 `CheckedException`은 예외가 어플리케이션 전역에 전염된다는 치명적인 단점이 있다. 이를 방지하기 위해 호출부에서 무의미한 `try catch`가 남용되기도 한다.\n```java\ntry {\n    userService.updateLastLogin(userId);\n} catch (Exception e) {\n    // 예외가 발생해도 아무것도 하지 않음.\n}\n```\n위와 비슷한 이유들로 이제는 `Checked Exception`을 사용하지 않는 추세이고 심지어 안티패턴으로 간주, 사용하지 않기를 권장하기도 한다.\n\n> 💡 Scala 3에는 최근 `CheckedException`과 비슷한 `canThrow`가 추가되었다. `canThrow`는 예외가 던져질 수 있음을 타입 시스템으로 강제한다. 즉 예외도 타입의 일부로 취급된다.\n\n## 스프링의 예외 처리\n\n자바의 철학을 이어받은 스프링에서는 주로 `RuntimeException`을 사용한다. 스프링 DB 사용 시 자동 롤백을 지원하고 `@ControllerAdvice`를 통해 전역 예외 처리가 가능하다. 즉 **매우 편리**하다.\n\n비즈니스 맥락을 표현하기 위해 `RuntimeException`을 상속한 커스텀 예외들을 사용하기도 한다.\n\n```java\n@RestControllerAdvice\npublic class GlobalExceptionHandler {\n    @ExceptionHandler(BusinessException.class)\n    public ResponseEntity<ErrorResponse> handleBusinessException(BusinessException e) {\n      return ResponseEntity.badRequest().body(new ErrorResponse(e.getMessage()));\n    }\n}\n```\n하지만 지나치게 세분화된 예외는 가독성을 떨어뜨리고 전역 처리의 의미를 희석시킨다.\n특히 커스텀 예외들은 비즈니스 상황마다 다르게 처리되어야 할 수 있으나 전역으로 처리된 비즈니스 예외들은 그저 메시지 전달이나 로깅 처리에 그치고 만다.\n```java\npublic void login(String inputPassword, String actualPassword) {\n    if (isPasswordMismatch(inputPassword, actualPassword)) {\n       throw new InvalidPasswordException(\"입력한 비밀번호가 올바르지 않습니다.\");\n    }\n}\n```\n사실 이런 커스텀 예외들은 애초에 처리가 필요 없을 수도 있다.\n\n> _사용자가 비밀번호를 틀렸다는 오류를 개발자가 확인해야 할까?_\n\n보통 모니터링 툴은 예외가 던져지고 처리되지 않으면 에러 레벨로 간주한다. 볼 필요가 없는 오류가 쌓이면 정말 처리되어야 하는 예외가 묻힐 확률은 높아진다.\n```java\ntry {\n    userService.login(inputPassword, actualPassword);\n} catch (InvalidPasswordException e) {\n    log.error(\"로그인 실패: \" + e.getMessage());\n}\n```\n`try catch`로 잡는다고 해도 마찬가지다. 가독성은 가독성대로, 성능은 성능대로 희생하는 악수`惡手`다.\n\n모니터링 채널에서 **안봐도 되는 오류라면 그냥 처음부터 던지지 말아야** 한다. 일단 던지고 잡는다? 위에서 본 `CheckedException`의 무의미한 던지고 받기와 다를 바 없다. 로그 한줄 남기려고 던지기에 `try catch`의 비용은 저렴하지 않다.\n\n더 큰 문제는 **제어 상실**에 있다. 처리되지 않은 예외는 즉시 코드 흐름을 중단시키며 전체 프로그램의 예측 가능성을 크게 떨어뜨린다.\n\n자신이 작성한 프로그램이라도 코드레벨에서 각 메서드에서 어떤 예외가 언제 어떻게 발생할지 정확히 파악하기는 어렵다. 예외 발생 경로를 꼼꼼히 문서화하는 경우도 드물다.\n\n# 4. 예외를 바라보는 다른 시각\n\n## 계약 위반\n**Method Signature**는 정말 액면 그대로의 서명`Signature`이라는 뜻이다.\n\n인터페이스를 계약이라고 본다면 **예외는 계약 위반**이라고 봐야 마땅하다. 리턴받기로 약속하고 서명한 값 대신 에러가 돌아왔기 때문이다.\n지금은 무시받는 `CheckedException`이지만 자바 디자이너들의 의도도 비슷했을 것이다.\n```java\npublic String getSomething() throws IOException; // 메서드 시그니처에서 String을 반환하거나 IOException을 던진다는 계약\n```\n\n> 원래 `method signature`는 컴파일러가 메서드를 정확히 찾아가기 위한 서명, 즉 고유 식별자를 뜻한다. 메서드 이름과 인자만 해당되며 리턴 타입은 포함되지 않는다. 컴파일러는 리턴 타입만 가지고 어떤 메서드인지 정확히 판단할 수 없기 때문이다.\n\n물론 계약은 위반될 수 있다. 하지만 쉽게 위반되는 계약은 좋은 계약이 아니다.\n> 상법에도 계약 상 불가항력`Force Majeure`이라는 개념이 있다. 전쟁이나 천재지변 같은 사건이 발생하면 계약은 무효가 된다.\n\n즉, 예외를 아예 안던질 순 없다. 프로그램 부팅 시 포트가 이미 사용 중이라면? 그냥 던져버리고 프로그램을 종료하는 게 맞다.\n\n하지만 찾고 있는 유저의 ID가 DB에 없는 상황이라면? 입력한 날짜가 유효하지 않는 날짜라면? 이건 천재지변보다는 완벽하게 예상 가능한 비즈니스 케이스에 가깝다.\n\n## 값으로서의 예외\n\n**함수형 프로그래밍**에서는 예외 던지기를 **부수 효과`side effect`**라고 여긴다.\n부수효과는 함수가 결과를 리턴하는 것 이외에 다른 일을 하는 행위를 뜻한다. 참조투명성과 순수성을 보장하기 위해서는 실행 중 잘못된 상황이 발생해도 제어 흐름에 영향이 없어야 한다.\n\n그래서 값으로 예외를 리턴한다.\n\n그렇다면 `false`나 `-1` 등의 에러 값을 표현하는 **절차적 프로그래밍**과 무엇이 다를까? 가장 큰 특징은 유효하지 않은 값이라는 것을 컴파일 단계에서 명확하게 알 수 있다는 점이다.\n\n### Null\n무엇인가 잘못되었을 때 가장 직관적으로 떠올릴 리턴 값은 아마도 `null`일 것이다. 실무에서도 해당 없는 값을 화면에 표시할 때 `null`을 리턴하는 경우도 많다.\n\n그러나 많이 사용하는 방법이라고 좋은 방법은 아니다.\n\nnull 직접 참조를 피하기 위해 즉각적인 검사 코드가 필요하다. 결국 절차적 프로그래밍의 예외처리와 유사한 문제들이 발생한다.\n\n### Optional\n자바 8에서 함수형 API들과 함께 도입된 `Optional`은 값이 있을 수도 있고 없을 수도 있다는 것을 표현하는 타입 빌더이다.\n```java\nOptional<String> name = findUserNameById(id);\nname.ifPresent(System.out::println);\n```\n오류가 발생하지 않았다는 가정 하에 null을 직접 다루지 않고 안전한 방식으로 연산을 이어나가고 필요할 때 꺼내 쓸 수 있다.\n\n하지만 `Optional`은 실패에 대한 이유를 담지 못한다는 한계가 있다.\n\n만약 DB에서 무언가 조회하는 메서드에서 `Optional.EMPTY`를 반환한다면 어떤 의미일까? 값이 없다는 의미일까? 아니면 DB 연결이 끊겼다는 의미일까?\n사용자에게 입력을 유도해야 할까? 조금 이따 재시도를 유도해야 할까?\n\n단순한 존재 여부만 표현할 수 있기 때문에, 실패 원인이 중요할 때는 적절하지 않다.\n\n### Result\n우리는 예외로서의 값과 실패 사유를 모두 알고 싶다.\n코틀린에서는 자체적으로 Result 객체를 제공한다. 성공과 실패를 명확히 구분하고 실패의 이유를 전달한다.\n```kotlin\n// runCatching에서 리턴되는 객체가 Result!\nrunCatching { userService.getUser(id) }\n    .onSuccess { user -> println(user.name) }\n    .onFailure { e -> log.error(\"사용자 조회 실패\", e) }\n```\n자바로 구현하면 이런 식으로 생겼다.\n```java\npublic final class Result<T> {\n\n    private final T value;\n    private final Throwable error;\n\t// 생성자 생략\n    public boolean isSuccess() {\n        return error == null;\n    }\n\n    public boolean isFailure() {\n        return error != null;\n    }\n    // ...\n}\n```\n함수형이라고 표현했지만 사실 이거 자바개발자들에게도 익숙한 구조다. http 응답으로 내려주는 `Response` 객체와 비슷하다. 생각해보면 당연하다.\n내 서버의 오류 응답은 null이나 empty로 내리고 코드나 로그로 원인을 확인할 수 있지만 원격으로 내려오는 응답이라면? `Result` 같은 객체 사용은 더 이상 선택 사항이 아니다.\n\n만약 에러 자체도 `RuntimeException`이 아닌 커스텀 객체를 사용하고 싶다면 타입 파라미터를 추가할 수도 있다.\n```java\npublic final class Result<E, T> {\n\n    private final T value;\n    private final E error;\n    // ...\n}\n```\n> 함수형에서 이런 스타일은 `Either<L, R>`라고 통용된다. 일반적으로 오른쪽`Right`에 있는 것이 올바른`Right` 값이다.\n\n`Result` 객체를 이용하면 예외가 발생할 수 있는 메서드를 코틀린으로 아래와 같이 구현할 수 있다.\n```kotlin\ndata class InvalidPasswordError(override val msg: String) : ResultError // 직접 만든 커스텀 에러 인터페이스\n\nfun checkPassword(input: String, actual: String): Result<InvalidPasswordError, String> {\n    return if (input == actual) {\n        input.asSuccess()\n    } else {\n        InvalidPasswordError(\"비밀번호가 일치하지 않습니다.\").asFailure()\n    }\n}\n```\n사용하는 쪽은 다음과 같이 구현된다.\n```kotlin\nval result = checkPassword(inputPassword, actualPassword)\nval password = result.onFailure { error ->\n    println(\"로그인 실패: ${error.msg}\")\n    return  // 여기서 탈출\n}\n\nprintln(\"로그인 성공. 비밀번호: $password\")\n```\n\n단순히 예외가 던져지지 않기에 실패로 끝나지 않고 재처리`retry`, 복구`recover` 등의 사후처리도 쉽고 구조적으로 가능하다.\n\n예를 들어 외부에서 카드 내역 스크래핑 api 요청 로직이라면 실패할 때 재처리가 필요할 수 있다.\n```kotlin\nval message: String = fetchCardHistory()\n\t// 실패 시 재시도\n    .orElseRetry { fetchCardHistory() }\n    // 성공한 경우 결과를 사용\n    .map { list -> \"총 ${list.size}건의 카드 내역이 있습니다.\" }\n    // 실패한 경우 캐시에서 불러옴\n    .recoverWith { error ->\n        println(\"재시도 후에도 실패. 캐시에서 불러옵니다.\")\n        fetchCardHistoryFromCache()\n    }\n}\n```\n제어 흐름이 한눈에 보이고 예외 처리가 더 자유로워진다. 코틀린에서 제공하는 확장함수는 이런 에러처리를 편리하게 구현할 수 있게 도와준다.\n```kotlin\n// Result의 확장함수로 정의\nfun <E : ResultError, T> Result<E, T>.orElseRetry(\n    fallback: () -> Result<E, T>\n    // 실패 시 재처리 로직을 넣어준다. 횟수나 조건 등을 넣어 정교하게 만들 수도 있다.\n): Result<E, T> = when (this) {\n    is Success -> this\n    is Failure -> fallback()\n}\n\nfun <E : ResultError, T> Result<E, T>.recoverWith(\n\tf: (E) -> Result<E, T>\n): Result<Nothing, T> = when (this) {\n    is Success -> this\n    is Failure -> f(error)\n}\n```\n\n하지만 스프링을 사용하는 사람들에게 `RuntimeException`는 포기할 수 없는 편리함이다. 만약 서비스 단에서 예외를 던져 롤백을 발생시키고 싶다면 아래와 같이 예외를 생성해 던질 수 있다.\n```kotlin\n@Transactional\nfun scrapeAndSave(userId: Long) {\n    val result = fetchAllHistories(userId)\n\n    result.onFailure { error ->\n        throw ScrapingException(error.msg)\n    }\n\n    val history = result.onSuccess { it }\n\n    // DB에 저장\n    saveToDb(userId, history)\n}\n```\n\n이런 방식의 제어 흐름을 일종의 선로라고 생각, `try catch` 없이 순차적으로만 개발하는 레일웨이 지향 프로그래밍`Railway-Oriented Programming`이라는 것도 있다.\n관심있는 사람들을 위해 잘 정리된 글 [링크](https://kciter.so/posts/railway-oriented-programming/)를 남긴다.\n\n# 5. 결론\n예외 처리는 곧 프로그램의 신뢰를 다루는 문제다.\n신뢰가 근본적으로 깨진 상황(시스템 실패, DB 연결 오류 등)은 즉시 예외를 던져 빠르게 실패(fail-fast)하고,\n규칙이나 비즈니스 로직 상의 예상 가능한 오류(존재하지 않는 유저 ID, 잘못된 입력 값 등)는 값으로 명시적으로 전달하자.\n\n예외는 예외적으로만 던져야 의미가 있다.\n무의미한 커스텀 예외를 남발하는 대신, 실패의 이유를 명확하게 담을 수 있는 값 기반의 오류 처리를 고려하자.\n결국, 좋은 예외 처리는 개발자의 인지부하를 줄이고, 중요한 오류를 놓치지 않도록 돕는다.\n\n예외 처리에도 맥락이 필요하다. 상황에 따라 현명하게 선택하자.\n\n# 부록: 그래도 나는 던지고 싶다 – Try-Catch의 비용\n그럼에도 불구하고 그냥 던지고 싶을 수 있다. 하지만 던지기 전에 한번쯤 비용이 궁금할 수도 있다.\n`try-catch`의 비용을 분석하기 위해 [벤치마크 실험](https://velog.io/@aryumka/Kotlin-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC-%EC%84%B1%EB%8A%A5-%EB%B9%84%EA%B5%90-Either-vs-Try-catch)을 진행했다.\n\n결론부터 말하자면 `catch` 없는 `throw`는 거의 오버헤드가 없다.\n하지만 **`catch`가 일어날 때 비용이 증가했는데, 정상 대비 throughput이 약 200배 가량 적었고, 반면 값을 사용하여 예외 처리한 경우 정상 대비 약 10배 가량 적은** 것을 확인했다.\n\n`try catch`가 비싼 이유를 간단하게 정리하자면 아래의 두 가지 정도로 요약 가능하다.\n\n1. `Throwable`은 비싼 객체\n- 특히 현재 스레드의 스택 정보를 기록하는 stackTrace 생성이 비쌈.\n- stackTrace 로깅 등을 하게 되면 더욱 성능 저하\n2. JVM은 예외가 자주 발생하는 코드의 최적화를 포기함\n  - 메서드 인라이닝 하지 않음\n  - 무조건적 Heap 할당이 일어나고, 메모리 할당과 GC 비용 증가\n  - 기타 jvm 최적화에서 제외\n\n**성능이 중요한 코드에서는 특히 2번 경우를 조심할 필요가 있다.**\n\n`과부하로 인한 에러 발생 증가` > `최적화 제외` > `성능 저하` > `부하 증가` > `과부하로 인한 에러 발생 증가`> ... > `무한 반복`\n\n부지불식간에 이런 악순환을 부르고 있는지도 모르기 때문이다.","tableOfContents":{"items":[{"url":"#0-문제의식","title":"0. 문제의식"},{"url":"#1-서론","title":"1. 서론"},{"url":"#2-절차적-예외-처리","title":"2. 절차적 예외 처리"},{"url":"#3-자바의-예외-처리","title":"3. 자바의 예외 처리","items":[{"url":"#fail-fast-and-throw","title":"Fail Fast and Throw"},{"url":"#checked-exception","title":"Checked Exception"},{"url":"#스프링의-예외-처리","title":"스프링의 예외 처리"}]},{"url":"#4-예외를-바라보는-다른-시각","title":"4. 예외를 바라보는 다른 시각","items":[{"url":"#계약-위반","title":"계약 위반"},{"url":"#값으로서의-예외","title":"값으로서의 예외","items":[{"url":"#null","title":"Null"},{"url":"#optional","title":"Optional"},{"url":"#result","title":"Result"}]}]},{"url":"#5-결론","title":"5. 결론"},{"url":"#부록-그래도-나는-던지고-싶다--try-catch의-비용","title":"부록: 그래도 나는 던지고 싶다 – Try-Catch의 비용"}]},"excerpt":"사내 슬랙에 에러 로그가 쌓이는데 어떤 것이 진짜 중요한 오류인지 알 수 없었다. 언제 어떤 예외를 던져야 하는지, 커스텀 예외는 얼마나 만들어 써야 할지 명확한 기준이 없었다. 한가로운 주말 아침, 유튜브 알고리즘이 날 한 영상으로 이끌었다.…","fields":{"slug":"/posts/should-exception-be-thrown","date":"2025-04-15"},"frontmatter":{"title":"예외는 던져져야 할까?","categories":"dev","tags":["Java","Kotlin","Spring","Exception"],"image":"https://velog.velcdn.com/images/aryumka/post/c2ff7c02-dbbb-4ca1-913c-b8c040251b78/image.png","comments":true,"draft":false}},"allMdx":{"edges":[{"node":{"fields":{"date":"2023-03-18","slug":"/posts/spring-boot-tomcat"},"frontmatter":{"title":"스프링부트의 톰캣 실행","image":"https://velog.velcdn.com/images/aryumka/post/5b95b704-67df-48b2-bdde-620b629f10ae/image.png"}}},{"node":{"fields":{"date":"2023-04-10","slug":"/posts/jsoup-html-parser"},"frontmatter":{"title":"Jsoup을 이용하여 HTML Parser 만들기","image":"https://velog.velcdn.com/images/aryumka/post/251571e0-9d24-4ef3-aa0d-f4d8654212c3/image.png"}}},{"node":{"fields":{"date":"2023-12-24","slug":"/posts/properties-vs-yaml"},"frontmatter":{"title":"Properties vs YAML - 스프링부트 외부설정","image":"https://velog.velcdn.com/images/aryumka/post/9173f985-e7b4-4d03-9996-93a08c517845/image.png"}}},{"node":{"fields":{"date":"2023-12-25","slug":"/posts/mysql-date-type"},"frontmatter":{"title":"MySQL date 타입에 대하여: varchar(8)과의 비교를 중점으로","image":"https://velog.velcdn.com/images/aryumka/post/e84fde44-1e6e-436e-bf62-6749c6ca1845/image.png"}}},{"node":{"fields":{"date":"2023-12-28","slug":"/posts/holiday-til-1"},"frontmatter":{"title":"[연휴개발TIL] DAY1 - kotiln + kotest + Spring Data JPA","image":"https://velog.velcdn.com/images/aryumka/post/9173f985-e7b4-4d03-9996-93a08c517845/image.png"}}},{"node":{"fields":{"date":"2023-12-29","slug":"/posts/holiday-til-2"},"frontmatter":{"title":"[연휴개발TIL] DAY2 - Github Action + Mockk","image":"https://velog.velcdn.com/images/aryumka/post/6e45e3ee-1592-433f-a0e8-e69b23738caf/image.png"}}},{"node":{"fields":{"date":"2023-12-31","slug":"/posts/holiday-til-3"},"frontmatter":{"title":"[연휴개발TIL] DAY3","image":"https://velog.velcdn.com/images/aryumka/post/0c169fc0-5d98-4cd2-9d50-04672ebc9d84/image.png"}}},{"node":{"fields":{"date":"2024-01-02","slug":"/posts/holiday-til-4"},"frontmatter":{"title":"[연휴개발TIL] DAY3","image":"https://velog.velcdn.com/images/aryumka/post/3e146a87-d66d-4ff3-953f-9da5e5c92441/image.png"}}},{"node":{"fields":{"date":"2024-01-03","slug":"/posts/github-actions"},"frontmatter":{"title":"GitHub Actions 정리","image":"https://velog.velcdn.com/images/aryumka/post/07ec2107-424c-4a8c-9c11-005508653ee2/image.png"}}},{"node":{"fields":{"date":"2024-01-07","slug":"/posts/til-practice-tdd"},"frontmatter":{"title":"[TIL] README, 테스트 작성과 코드 구현","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-04","slug":"/posts/til-aws-elastic-ip-docker"},"frontmatter":{"title":"[TIL] aws 탄력적 ip + Docker 사용해보기","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-10","slug":"/posts/til-java-static-block-kotlin-companion-object"},"frontmatter":{"title":"[TIL] Java의 static block vs Kotlin의 companion object","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-09","slug":"/posts/til-kotlin-binary"},"frontmatter":{"title":"[TIL] 코틀린 이진수 변환","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-14","slug":"/posts/reinventing-big-integer"},"frontmatter":{"title":"[바퀴의 재발명] BigInteger","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-15","slug":"/posts/til-resource"},"frontmatter":{"title":"[TIL] 리소스 위치 참조 시 / 쓰지 않기","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-16","slug":"/posts/til-gradle-build-error"},"frontmatter":{"title":"[TIL] 인텔리제이 gradle 빌드 오류(feat. JDK 버젼 호환)","image":"https://velog.velcdn.com/images/aryumka/post/14ac2014-f469-4a23-b3cd-d95c2e912efe/image.png"}}},{"node":{"fields":{"date":"2024-01-17","slug":"/posts/til-kotlin-inline-reflection"},"frontmatter":{"title":"[TIL] 코틀린 inline, reflection","image":"https://velog.velcdn.com/images/aryumka/post/14ac2014-f469-4a23-b3cd-d95c2e912efe/image.png"}}},{"node":{"fields":{"date":"2024-01-24","slug":"/posts/query-if-null-return"},"frontmatter":{"title":"[TIL] 쿼리로 피벗 시 if 함수에서 의도된 Null 리턴","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-25","slug":"/posts/kotlin-reflection"},"frontmatter":{"title":"[JVM 톺아보기] 코틀린의 리플렉션(Reflection)","image":"https://velog.velcdn.com/images/aryumka/post/c9d716a4-0eef-4663-90e1-69631029d564/image.png"}}},{"node":{"fields":{"date":"2024-02-01","slug":"/posts/jvm-permgen"},"frontmatter":{"title":"[JVM 톺아보기] JVM의 메서드 영역 (feat. PermGen space)","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-02-06","slug":"/posts/real-mysql"},"frontmatter":{"title":"[TIL] Real MySQL","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-02-07","slug":"/posts/til-kotlin-sort"},"frontmatter":{"title":"[TIL] Kotlin - sortedWith과 compareBy를 이용한 다중조건 정렬","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-02-18","slug":"/posts/reinventing-di-framework"},"frontmatter":{"title":"[바퀴의 재발명] DI 프레임워크 직접 만들어보기","image":"https://velog.velcdn.com/images/aryumka/post/94394c32-2228-4acb-8be0-a82e13fa78a1/image.png"}}},{"node":{"fields":{"date":"2024-03-03","slug":"/posts/functional-exception"},"frontmatter":{"title":"[TIL] 예외를 함수로 처리","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-03-02","slug":"/posts/til-kotlin-jpa-test"},"frontmatter":{"title":"[TIL] Kotlin + JPA + Kotest + H2 DB","image":"https://velog.velcdn.com/images/aryumka/post/af776ead-b672-4d57-80bb-fe6fac180764/image.png"}}},{"node":{"fields":{"date":"2024-04-03","slug":"/posts/til-json"},"frontmatter":{"title":"[TIL] JSON 유효하지 않은 문자열 제거","image":"https://velog.velcdn.com/images/aryumka/post/ed5979e8-49ef-4be8-9a1c-5b9203d2574f/image.png"}}},{"node":{"fields":{"date":"2024-04-22","slug":"/posts/rabbitmq-seven-patterns"},"frontmatter":{"title":"RabbitMQ 7가지 설계 패턴 (with Spring AMQP tutorial)","image":"https://velog.velcdn.com/images/aryumka/post/f2266935-81ba-47b8-9b4f-910d28c1aaef/image.png"}}},{"node":{"fields":{"date":"2024-05-04","slug":"/posts/til-test-container"},"frontmatter":{"title":"[TIL] Test Container","image":"https://velog.velcdn.com/images/aryumka/post/9fcbd346-bd6e-4097-bce9-b7c9468b5cfc/image.png"}}},{"node":{"fields":{"date":"2024-05-05","slug":"/posts/til-axon-framework"},"frontmatter":{"title":"[TIL] Axon Framework - Token","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-05-12","slug":"/posts/kafka-axon-eventsourcing"},"frontmatter":{"title":"Kafka와 Axon Framework를 이용한 이벤트 소싱 - 1","image":"/images/og.png"}}},{"node":{"fields":{"date":"2025-04-15","slug":"/posts/should-exception-be-thrown"},"frontmatter":{"title":"예외는 던져져야 할까?","image":"https://velog.velcdn.com/images/aryumka/post/c2ff7c02-dbbb-4ca1-913c-b8c040251b78/image.png"}}}]}},"pageContext":{"slug":"/posts/should-exception-be-thrown","series":{"title":"Exception","items":[{"title":"예외는 던져져야 할까?","url":"/posts/should-exception-be-thrown"}]},"frontmatter":{"title":"예외는 던져져야 할까?","categories":"dev","tags":["Java","Kotlin","Spring","Exception"],"series":"Exception","cover":"","image":"https://velog.velcdn.com/images/aryumka/post/c2ff7c02-dbbb-4ca1-913c-b8c040251b78/image.png","comments":true,"draft":false,"hide":false}}},"staticQueryHashes":["595849736","63159454"],"slicesMap":{}}