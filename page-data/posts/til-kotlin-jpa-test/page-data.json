{"componentChunkName":"component---src-templates-post-tsx-content-file-path-src-posts-2024-03-02-til-kotlin-jpa-test-mdx","path":"/posts/til-kotlin-jpa-test/","result":{"data":{"site":{"siteMetadata":{"title":"aryumka.me | devlog"}},"mdx":{"body":"\nimport Image from '@components/Image';\n\n## 1. Kotlin의 data class는 JPA에서 사용하지 않는다\n영속성 계층의 `Entity`가 되려면 아래를 포함한 조건이 갖춰져야 한다.\n>- non-final 최상위 클래스이거나 정적 이너클래스일 것\n- public 또는 protected, no-args 생성자를 가질 것\n- final 메서드나 persistent한 인스턴스 변수를 가지지 않을 것\n...\n(이하 생략)\n\n>[출처: javadoc - jakarta.persistence.entity](https://jakarta.ee/specifications/persistence/3.2/apidocs/jakarta.persistence/jakarta/persistence/entity)\n\n`JPA`는 객체의 상태 변경을 기본 전제로 만들어진 패러다임이다.\n반면 함수형을 지향하는 코틀린에서는 기본 속성이 `val(read-only)` 즉 `immutable`인 것을 전제로 한다.\n\n내 경우 `Entity`를 기본 속성이 `val(read-only)`로 설정되는 `data class`로 설계했다가 모두 `var`을 가진 일반 클래스로 바꿔야 했다. 수정자가 추가되며 리턴타입도 `copy`된 객체를 리턴하던 것이 `void`로 바뀌었고 테스트도 모두 바꿔야 했다.\n\n이는 [스프링 공식 가이드](https://spring.io/guides/tutorials/spring-boot-kotlin)에도 기술된 바이다.\n`Spring Data JPA`가 아닌 다른 `Spring Data`의 경우 data class의 사용이 문제되지 않는다고 한다.\n\n<Image src=\"https://velog.velcdn.com/images/aryumka/post/af776ead-b672-4d57-80bb-fe6fac180764/image.png\" />\n\n위 가이드의 샘플 코드에서 속성들의 접근제어자는 그냥 디폴트이다. 그래서 나도 따로 private var로 만들지는 않았다. 검색을 해봐도 많은 경우 Entity의 속성을 private으로 따로 지정하지 않는 것 같았다. 조금 의아하지만 일단 공식문서에 기술된 대로 따라보기로 했다.\n\n그리고 그래들 플러그인을 다음과 같이 추가해주었다.\n```kotlin\nplugins {\n  kotlin(\"plugin.allopen\") version \"1.9.22\"\n  kotlin(\"plugin.noarg\") version \"1.9.22\"\n}\n\nallOpen {\n  annotation(\"jakarta.persistence.Entity\")\n  annotation(\"jakarta.persistence.Embeddable\")\n  annotation(\"jakarta.persistence.MappedSuperclass\")\n}\n```\n매 엔티티 클래스마다 `open`을 선언해주거나 no-arg 생성자를 만들지 않아도 영속성 `Entity`가 될 수 있도록 해준다.\n\n<Image src=\"https://velog.velcdn.com/images/aryumka/post/d01091b3-9e97-4b7f-872e-34a63f9fbbdb/image.png\" />\n\n별도로 지정해주지 않아도 `open class`로 바뀌어있다\n\n`data class`일 때는 자동으로 만들어줬던 `hashcode`와 `equals`, `toString`은 직접 구현해줘야 했다.\n\n\n## 2. Key Generation?\n\n`insert` 하기 전에 `select`가 실행되지만 실제 쿼리가 실행되는 건 아니다.\n`insert` 후 `select`를 실행하면 영속성 계층에 `select`하는 대상의 id를 가진 객체가 있는지 먼저 탐색한다고 한다. \n`GenerationType.SEQUENCE` 전략으로 키를 생성하기로 했다.\n하지만 매번 키 탐색을 위해 DB를 다녀오는게 이상하다. 기본적으로 50개가 할당된다고 들었는데.\n\n그런데 키 생성전략을 위해서는 이렇게 DB를 이용하는게 최선일까?\n좋은 방법이 있을 것 같은데.\n\n## 3. H2 DB와 테스트 환경\n\n`H2 db`로 테스트하면 매 테스트마다 롤백이 된다고 한다. 즉 실제 DB에 들어가지 않는다는 말이다.\n테스트마다 아이디를 일부러 중복으로 넣어도 무결성 에러도 나지 않고 디버깅으로 멈춰 놓고 콘솔에 접속해도 아무것도 없어서 어리둥절했다. \n그럼 DB가 초기화될 때 DDL도 실행되지 않는 것인가..?","tableOfContents":{"items":[{"url":"#1-kotlin의-data-class는-jpa에서-사용하지-않는다","title":"1. Kotlin의 data class는 JPA에서 사용하지 않는다"},{"url":"#2-key-generation","title":"2. Key Generation?"},{"url":"#3-h2-db와-테스트-환경","title":"3. H2 DB와 테스트 환경"}]},"excerpt":"1. Kotlin의 data class는 JPA에서 사용하지 않는다 영속성 계층의 가 되려면 아래를 포함한 조건이 갖춰져야 한다.\n\nnon-final 최상위 클래스이거나 정적 이너클래스일 것\npublic 또는 protected, no-args…","fields":{"slug":"/posts/til-kotlin-jpa-test","date":"2024-03-02"},"frontmatter":{"title":"[TIL] Kotlin + JPA + Kotest + H2 DB","categories":"dev","tags":["TIL","Kotlin","JPA","Test","Kotest","H2"],"image":"https://velog.velcdn.com/images/aryumka/post/af776ead-b672-4d57-80bb-fe6fac180764/image.png","comments":true,"draft":false}},"allMdx":{"edges":[{"node":{"fields":{"date":"2023-04-10","slug":"/posts/jsoup-html-parser"},"frontmatter":{"title":"Jsoup을 이용하여 HTML Parser 만들기","image":"https://velog.velcdn.com/images/aryumka/post/251571e0-9d24-4ef3-aa0d-f4d8654212c3/image.png"}}},{"node":{"fields":{"date":"2023-12-24","slug":"/posts/properties-vs-yaml"},"frontmatter":{"title":"Properties vs YAML - 스프링부트 외부설정","image":"https://velog.velcdn.com/images/aryumka/post/9173f985-e7b4-4d03-9996-93a08c517845/image.png"}}},{"node":{"fields":{"date":"2023-03-18","slug":"/posts/spring-boot-tomcat"},"frontmatter":{"title":"스프링부트의 톰캣 실행","image":"https://velog.velcdn.com/images/aryumka/post/5b95b704-67df-48b2-bdde-620b629f10ae/image.png"}}},{"node":{"fields":{"date":"2023-12-25","slug":"/posts/mysql-date-type"},"frontmatter":{"title":"MySQL date 타입에 대하여: varchar(8)과의 비교를 중점으로","image":"https://velog.velcdn.com/images/aryumka/post/e84fde44-1e6e-436e-bf62-6749c6ca1845/image.png"}}},{"node":{"fields":{"date":"2023-12-28","slug":"/posts/holiday-til-1"},"frontmatter":{"title":"[연휴개발TIL] DAY1 - kotiln + kotest + Spring Data JPA","image":"https://velog.velcdn.com/images/aryumka/post/9173f985-e7b4-4d03-9996-93a08c517845/image.png"}}},{"node":{"fields":{"date":"2024-01-02","slug":"/posts/holiday-til-4"},"frontmatter":{"title":"[연휴개발TIL] DAY3","image":"https://velog.velcdn.com/images/aryumka/post/3e146a87-d66d-4ff3-953f-9da5e5c92441/image.png"}}},{"node":{"fields":{"date":"2023-12-31","slug":"/posts/holiday-til-3"},"frontmatter":{"title":"[연휴개발TIL] DAY3","image":"https://velog.velcdn.com/images/aryumka/post/0c169fc0-5d98-4cd2-9d50-04672ebc9d84/image.png"}}},{"node":{"fields":{"date":"2023-12-29","slug":"/posts/holiday-til-2"},"frontmatter":{"title":"[연휴개발TIL] DAY2 - Github Action + Mockk","image":"https://velog.velcdn.com/images/aryumka/post/6e45e3ee-1592-433f-a0e8-e69b23738caf/image.png"}}},{"node":{"fields":{"date":"2024-01-03","slug":"/posts/github-actions"},"frontmatter":{"title":"GitHub Actions 정리","image":"https://velog.velcdn.com/images/aryumka/post/07ec2107-424c-4a8c-9c11-005508653ee2/image.png"}}},{"node":{"fields":{"date":"2024-01-04","slug":"/posts/til-aws-elastic-ip-docker"},"frontmatter":{"title":"[TIL] aws 탄력적 ip + Docker 사용해보기","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-09","slug":"/posts/til-kotlin-binary"},"frontmatter":{"title":"[TIL] 코틀린 이진수 변환","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-07","slug":"/posts/til-practice-tdd"},"frontmatter":{"title":"[TIL] README, 테스트 작성과 코드 구현","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-15","slug":"/posts/til-resource"},"frontmatter":{"title":"[TIL] 리소스 위치 참조 시 / 쓰지 않기","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-10","slug":"/posts/til-java-static-block-kotlin-companion-object"},"frontmatter":{"title":"[TIL] Java의 static block vs Kotlin의 companion object","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-17","slug":"/posts/til-kotlin-inline-reflection"},"frontmatter":{"title":"[TIL] 코틀린 inline, reflection","image":"https://velog.velcdn.com/images/aryumka/post/14ac2014-f469-4a23-b3cd-d95c2e912efe/image.png"}}},{"node":{"fields":{"date":"2024-01-16","slug":"/posts/til-gradle-build-error"},"frontmatter":{"title":"[TIL] 인텔리제이 gradle 빌드 오류(feat. JDK 버젼 호환)","image":"https://velog.velcdn.com/images/aryumka/post/14ac2014-f469-4a23-b3cd-d95c2e912efe/image.png"}}},{"node":{"fields":{"date":"2024-01-14","slug":"/posts/reinventing-big-integer"},"frontmatter":{"title":"[바퀴의 재발명] BigInteger","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-24","slug":"/posts/query-if-null-return"},"frontmatter":{"title":"[TIL] 쿼리로 피벗 시 if 함수에서 의도된 Null 리턴","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-02-06","slug":"/posts/real-mysql"},"frontmatter":{"title":"[TIL] Real MySQL","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-02-07","slug":"/posts/til-kotlin-sort"},"frontmatter":{"title":"[TIL] Kotlin - sortedWith과 compareBy를 이용한 다중조건 정렬","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-02-01","slug":"/posts/jvm-permgen"},"frontmatter":{"title":"[JVM 톺아보기] JVM의 메서드 영역 (feat. PermGen space)","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-04-03","slug":"/posts/til-json"},"frontmatter":{"title":"[TIL] JSON 유효하지 않은 문자열 제거","image":"https://velog.velcdn.com/images/aryumka/post/ed5979e8-49ef-4be8-9a1c-5b9203d2574f/image.png"}}},{"node":{"fields":{"date":"2024-05-04","slug":"/posts/til-test-container"},"frontmatter":{"title":"[TIL] Test Container","image":"https://velog.velcdn.com/images/aryumka/post/9fcbd346-bd6e-4097-bce9-b7c9468b5cfc/image.png"}}},{"node":{"fields":{"date":"2024-01-25","slug":"/posts/kotlin-reflection"},"frontmatter":{"title":"[JVM 톺아보기] 코틀린의 리플렉션(Reflection)","image":"https://velog.velcdn.com/images/aryumka/post/c9d716a4-0eef-4663-90e1-69631029d564/image.png"}}},{"node":{"fields":{"date":"2024-02-18","slug":"/posts/reinventing-di-framework"},"frontmatter":{"title":"[바퀴의 재발명] DI 프레임워크 직접 만들어보기","image":"https://velog.velcdn.com/images/aryumka/post/94394c32-2228-4acb-8be0-a82e13fa78a1/image.png"}}},{"node":{"fields":{"date":"2024-03-02","slug":"/posts/til-kotlin-jpa-test"},"frontmatter":{"title":"[TIL] Kotlin + JPA + Kotest + H2 DB","image":"https://velog.velcdn.com/images/aryumka/post/af776ead-b672-4d57-80bb-fe6fac180764/image.png"}}},{"node":{"fields":{"date":"2024-03-03","slug":"/posts/functional-exception"},"frontmatter":{"title":"[TIL] 예외를 함수로 처리","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-05-05","slug":"/posts/til-axon-framework"},"frontmatter":{"title":"[TIL] Axon Framework - Token","image":"/images/og.png"}}},{"node":{"fields":{"date":"2025-04-15","slug":"/posts/should-exception-be-thrown"},"frontmatter":{"title":"예외는 던져져야 할까?","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-04-22","slug":"/posts/rabbitmq-seven-patterns"},"frontmatter":{"title":"RabbitMQ 7가지 설계 패턴 (with Spring AMQP tutorial)","image":"https://velog.velcdn.com/images/aryumka/post/f2266935-81ba-47b8-9b4f-910d28c1aaef/image.png"}}},{"node":{"fields":{"date":"2024-05-12","slug":"/posts/kafka-axon-eventsourcing"},"frontmatter":{"title":"Kafka와 Axon Framework를 이용한 이벤트 소싱 - 1","image":"/images/og.png"}}}]}},"pageContext":{"slug":"/posts/til-kotlin-jpa-test","frontmatter":{"title":"[TIL] Kotlin + JPA + Kotest + H2 DB","categories":"dev","tags":["TIL","Kotlin","JPA","Test","Kotest","H2"],"series":"","cover":"","image":"https://velog.velcdn.com/images/aryumka/post/af776ead-b672-4d57-80bb-fe6fac180764/image.png","comments":true,"draft":false,"hide":false}}},"staticQueryHashes":["595849736","63159454"],"slicesMap":{}}