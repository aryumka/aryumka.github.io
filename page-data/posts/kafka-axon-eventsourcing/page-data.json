{"componentChunkName":"component---src-templates-post-tsx-content-file-path-src-posts-2024-05-12-kafka-axon-eventsourcing-mdx","path":"/posts/kafka-axon-eventsourcing/","result":{"data":{"site":{"siteMetadata":{"title":"aryumka.me | devlog"}},"mdx":{"body":"\n## 이벤트 소싱\n이벤트 소싱(Event Sourcing)은 도메인의 상태를 변경하는 모든 사건을 이벤트 스트림으로 저장하는 방식이다.\n\n계좌 잔액 관리를 예로 들어보자.\n\n전통적인 방식이라면 거래 내역을 따로 저장하고 해당 거래로 인해 발생한 잔액을 별도의 테이블에 저장할 것이다.\n\n이벤트 소싱으로 계좌 잔액을 관리한다면 거래내역이 아니라 거래내역으로 인해 발생한 이벤트를 저장하게 된다.\n현재 내 계좌에 남은 잔액은 수많은 거래(이벤트)들의 결과라고 볼 수 있다.\n\n이 때 잔액을 계산하는 로직은 이벤트 스트림을 통해 계산할 수 있다.\n\n## Kafka를 이용한 이벤트 스트리밍\n이벤트는 다양한 방법으로 처리할 수 있다.\n\n만약 이벤트를 발동하는 JVM과 이벤트를 처리하는 JVM이 다른 분산 환경이라면 브로커등의 미들웨어를 도입하여 안정적이고 효율적인 구현이 가능하다.\nKafka는 분산형 스트리밍 플랫폼으로 특히 대용량 이벤트 스트림을 처리하는데 적합하다. \n\n\n## Axon Framework의 이벤트 처리 방식\nAxon Framework는 이벤트 소싱을 통한 CQRS(Command Query Responsibility Segregation)와 DDD(Domain Driven Design)을 지원하는 프레임워크이다. \n\nAxon Framework는 이벤트를 처리하는 방식으로 크게 2가지 방식을 제공한다.\n1. Subscribing Event Processor - 순서가 보장되고 하나의 스레드에서 처리되어야 하는 작업에 적합하다. 연동된 미들웨어가 실패할 경우 이벤트 발행 자체가 실패하도록 강제한다. AMQP를 이용하는 경우 적절하다.\n2. Tracking Event Processor - 여러 스레드에서 각 프로세서가 작업을 분배하여 병렬 작업할 수 있도록 한다. Kafka가 실패해도 이벤트 발행 자체에는 영향을 주지 않는다. Kafka를 이용할 때 적합하다.\n\n예제에는 Tracking Event Processor를 사용하였다.\n\n## 예제\n\n### 0. docker-compose.yml\n[docker-compose.yaml](https://github.com/aryumka/axonkafka/blob/master/docker-compose.yaml)를 이용하여 Kafka와 Zookeeper를 설정한다.\n\n### 1. Spring Boot Kafka 설정\n```yaml\naxon:\n  axonserver:\n    enabled: false\n  serializer:\n    events: jackson\n  kafka:\n    fetcher:\n      enabled: true\n    clientid: kafka-axon-example\n    producer:\n      retries: 0\n      bootstrap-servers: localhost:29092\n    consumer:\n      event-processor-mode: tracking\n      bootstrap-servers: localhost:29092\n    properties:\n      security.protocol: PLAINTEXT\n```\n\n### 2. Axon 설정\n기본적으로 JPA를 Event Store로 사용하고 Tracking Event Processor를 사용한다. DB는 H2를 사용한다. \nToken Store는 InMemoryTokenStore를 사용한다. Token은 이벤트 스트림을 열 때 특정 이벤트의 위치를 특정하거나 특정한 위치에서 이벤트 스트림을 열기 위해 사용된다.\n```kotlin\n@SpringBootApplication\n@EnableScheduling\nclass KafkaAxonApplication {\n    @Bean\n    fun tokenStore() = InMemoryTokenStore()\n}\n\n@Configuration\n@ConditionalOnProperty(value = [\"axon.kafka.consumer.event-processor-mode\"], havingValue = \"tracking\")\nclass TrackingConfiguration {\n    @Autowired\n    fun configureStreamableKafkaSource(\n        configurer: EventProcessingConfigurer,\n        streamableKafkaMessageSource: StreamableKafkaMessageSource<String, ByteArray>\n    ) {\n        // Tracking Event Processor의 이름을 KAFKA_GROUP으로 설정하고 StreamableKafkaMessageSource를 사용하여 등록\n        configurer.registerTrackingEventProcessor(KAFKA_GROUP) { streamableKafkaMessageSource }\n    }\n}\n```\n\n### 3. Bank Client\n1초에 한번씩 입금요청을 처리하도록 한다.\n```kotlin\n@Component\npublic class BankClient {\n    // ...\n    @Scheduled(initialDelay = 10_000, fixedDelay = 100)\n    fun deposit() {\n        logger.debug { \"depositing $amount from account $accountId\" }\n        commandGateway.send<CompletableFuture<String>>(\n                DepositMoneyCommand(\n                        bankAccountId = accountId,\n                        amountOfMoney = amount.toLong()\n                )\n        )\n        amount = amount.inc()\n    }\n}\n```\n\n\n","tableOfContents":{"items":[{"url":"#이벤트-소싱","title":"이벤트 소싱"},{"url":"#kafka를-이용한-이벤트-스트리밍","title":"Kafka를 이용한 이벤트 스트리밍"},{"url":"#axon-framework의-이벤트-처리-방식","title":"Axon Framework의 이벤트 처리 방식"},{"url":"#예제","title":"예제","items":[{"url":"#0-docker-composeyml","title":"0. docker-compose.yml"},{"url":"#1-spring-boot-kafka-설정","title":"1. Spring Boot Kafka 설정"},{"url":"#2-axon-설정","title":"2. Axon 설정"},{"url":"#3-bank-client","title":"3. Bank Client"}]}]},"excerpt":"이벤트 소싱 이벤트 소싱(Event Sourcing)은 도메인의 상태를 변경하는 모든 사건을 이벤트 스트림으로 저장하는 방식이다.\n\n계좌 잔액 관리를 예로 들어보자.\n\n전통적인 방식이라면 거래 내역을 따로 저장하고 해당 거래로 인해 발생한 잔액을 별도의…","fields":{"slug":"/posts/kafka-axon-eventsourcing","date":"2024-05-12"},"frontmatter":{"title":"Kafka와 Axon Framework를 이용한 이벤트 소싱 - 1","categories":"dev","tags":["Kafka","AxonFramework","EventSourcing","CQRS","DDD","Java","SpringBoot"],"image":"/images/og.png","comments":true,"draft":false}},"allMdx":{"edges":[{"node":{"fields":{"date":"2023-04-10","slug":"/posts/jsoup-html-parser"},"frontmatter":{"title":"Jsoup을 이용하여 HTML Parser 만들기","image":"https://velog.velcdn.com/images/aryumka/post/251571e0-9d24-4ef3-aa0d-f4d8654212c3/image.png"}}},{"node":{"fields":{"date":"2023-12-24","slug":"/posts/properties-vs-yaml"},"frontmatter":{"title":"Properties vs YAML - 스프링부트 외부설정","image":"https://velog.velcdn.com/images/aryumka/post/9173f985-e7b4-4d03-9996-93a08c517845/image.png"}}},{"node":{"fields":{"date":"2023-03-18","slug":"/posts/spring-boot-tomcat"},"frontmatter":{"title":"스프링부트의 톰캣 실행","image":"https://velog.velcdn.com/images/aryumka/post/5b95b704-67df-48b2-bdde-620b629f10ae/image.png"}}},{"node":{"fields":{"date":"2023-12-25","slug":"/posts/mysql-date-type"},"frontmatter":{"title":"MySQL date 타입에 대하여: varchar(8)과의 비교를 중점으로","image":"https://velog.velcdn.com/images/aryumka/post/e84fde44-1e6e-436e-bf62-6749c6ca1845/image.png"}}},{"node":{"fields":{"date":"2023-12-28","slug":"/posts/holiday-til-1"},"frontmatter":{"title":"[연휴개발TIL] DAY1 - kotiln + kotest + Spring Data JPA","image":"https://velog.velcdn.com/images/aryumka/post/9173f985-e7b4-4d03-9996-93a08c517845/image.png"}}},{"node":{"fields":{"date":"2024-01-02","slug":"/posts/holiday-til-4"},"frontmatter":{"title":"[연휴개발TIL] DAY3","image":"https://velog.velcdn.com/images/aryumka/post/3e146a87-d66d-4ff3-953f-9da5e5c92441/image.png"}}},{"node":{"fields":{"date":"2023-12-31","slug":"/posts/holiday-til-3"},"frontmatter":{"title":"[연휴개발TIL] DAY3","image":"https://velog.velcdn.com/images/aryumka/post/0c169fc0-5d98-4cd2-9d50-04672ebc9d84/image.png"}}},{"node":{"fields":{"date":"2023-12-29","slug":"/posts/holiday-til-2"},"frontmatter":{"title":"[연휴개발TIL] DAY2 - Github Action + Mockk","image":"https://velog.velcdn.com/images/aryumka/post/6e45e3ee-1592-433f-a0e8-e69b23738caf/image.png"}}},{"node":{"fields":{"date":"2024-01-03","slug":"/posts/github-actions"},"frontmatter":{"title":"GitHub Actions 정리","image":"https://velog.velcdn.com/images/aryumka/post/07ec2107-424c-4a8c-9c11-005508653ee2/image.png"}}},{"node":{"fields":{"date":"2024-01-04","slug":"/posts/til-aws-elastic-ip-docker"},"frontmatter":{"title":"[TIL] aws 탄력적 ip + Docker 사용해보기","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-09","slug":"/posts/til-kotlin-binary"},"frontmatter":{"title":"[TIL] 코틀린 이진수 변환","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-07","slug":"/posts/til-practice-tdd"},"frontmatter":{"title":"[TIL] README, 테스트 작성과 코드 구현","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-15","slug":"/posts/til-resource"},"frontmatter":{"title":"[TIL] 리소스 위치 참조 시 / 쓰지 않기","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-10","slug":"/posts/til-java-static-block-kotlin-companion-object"},"frontmatter":{"title":"[TIL] Java의 static block vs Kotlin의 companion object","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-17","slug":"/posts/til-kotlin-inline-reflection"},"frontmatter":{"title":"[TIL] 코틀린 inline, reflection","image":"https://velog.velcdn.com/images/aryumka/post/14ac2014-f469-4a23-b3cd-d95c2e912efe/image.png"}}},{"node":{"fields":{"date":"2024-01-16","slug":"/posts/til-gradle-build-error"},"frontmatter":{"title":"[TIL] 인텔리제이 gradle 빌드 오류(feat. JDK 버젼 호환)","image":"https://velog.velcdn.com/images/aryumka/post/14ac2014-f469-4a23-b3cd-d95c2e912efe/image.png"}}},{"node":{"fields":{"date":"2024-01-14","slug":"/posts/reinventing-big-integer"},"frontmatter":{"title":"[바퀴의 재발명] BigInteger","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-24","slug":"/posts/query-if-null-return"},"frontmatter":{"title":"[TIL] 쿼리로 피벗 시 if 함수에서 의도된 Null 리턴","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-02-06","slug":"/posts/real-mysql"},"frontmatter":{"title":"[TIL] Real MySQL","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-02-07","slug":"/posts/til-kotlin-sort"},"frontmatter":{"title":"[TIL] Kotlin - sortedWith과 compareBy를 이용한 다중조건 정렬","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-02-01","slug":"/posts/jvm-permgen"},"frontmatter":{"title":"[JVM 톺아보기] JVM의 메서드 영역 (feat. PermGen space)","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-04-03","slug":"/posts/til-json"},"frontmatter":{"title":"[TIL] JSON 유효하지 않은 문자열 제거","image":"https://velog.velcdn.com/images/aryumka/post/ed5979e8-49ef-4be8-9a1c-5b9203d2574f/image.png"}}},{"node":{"fields":{"date":"2024-05-04","slug":"/posts/til-test-container"},"frontmatter":{"title":"[TIL] Test Container","image":"https://velog.velcdn.com/images/aryumka/post/9fcbd346-bd6e-4097-bce9-b7c9468b5cfc/image.png"}}},{"node":{"fields":{"date":"2024-01-25","slug":"/posts/kotlin-reflection"},"frontmatter":{"title":"[JVM 톺아보기] 코틀린의 리플렉션(Reflection)","image":"https://velog.velcdn.com/images/aryumka/post/c9d716a4-0eef-4663-90e1-69631029d564/image.png"}}},{"node":{"fields":{"date":"2024-02-18","slug":"/posts/reinventing-di-framework"},"frontmatter":{"title":"[바퀴의 재발명] DI 프레임워크 직접 만들어보기","image":"https://velog.velcdn.com/images/aryumka/post/94394c32-2228-4acb-8be0-a82e13fa78a1/image.png"}}},{"node":{"fields":{"date":"2024-03-02","slug":"/posts/til-kotlin-jpa-test"},"frontmatter":{"title":"[TIL] Kotlin + JPA + Kotest + H2 DB","image":"https://velog.velcdn.com/images/aryumka/post/af776ead-b672-4d57-80bb-fe6fac180764/image.png"}}},{"node":{"fields":{"date":"2024-03-03","slug":"/posts/functional-exception"},"frontmatter":{"title":"[TIL] 예외를 함수로 처리","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-05-05","slug":"/posts/til-axon-framework"},"frontmatter":{"title":"[TIL] Axon Framework - Token","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-04-22","slug":"/posts/rabbitmq-seven-patterns"},"frontmatter":{"title":"RabbitMQ 7가지 설계 패턴 (with Spring AMQP tutorial)","image":"https://velog.velcdn.com/images/aryumka/post/f2266935-81ba-47b8-9b4f-910d28c1aaef/image.png"}}},{"node":{"fields":{"date":"2024-05-12","slug":"/posts/kafka-axon-eventsourcing"},"frontmatter":{"title":"Kafka와 Axon Framework를 이용한 이벤트 소싱 - 1","image":"/images/og.png"}}},{"node":{"fields":{"date":"2025-04-15","slug":"/posts/should-exception-be-thrown"},"frontmatter":{"title":"예외는 던져져야 할까?","image":"https://velog.velcdn.com/images/aryumka/post/c2ff7c02-dbbb-4ca1-913c-b8c040251b78/image.png"}}}]}},"pageContext":{"slug":"/posts/kafka-axon-eventsourcing","series":{"title":"Axon Framework","items":[{"title":"Kafka와 Axon Framework를 이용한 이벤트 소싱 - 1","url":"/posts/kafka-axon-eventsourcing"}]},"frontmatter":{"title":"Kafka와 Axon Framework를 이용한 이벤트 소싱 - 1","categories":"dev","tags":["Kafka","AxonFramework","EventSourcing","CQRS","DDD","Java","SpringBoot"],"series":"Axon Framework","cover":"","image":"/images/og.png","comments":true,"draft":false,"hide":false}}},"staticQueryHashes":["595849736","63159454"],"slicesMap":{}}