{"componentChunkName":"component---src-templates-post-tsx-content-file-path-src-posts-2023-12-25-mysql-date-type-mdx","path":"/posts/mysql-date-type/","result":{"data":{"site":{"siteMetadata":{"title":"aryumka.me | devlog"}},"mdx":{"body":"\nimport Image from '@components/Image';\n\n년월일의 날짜정보를 저장할 때 `varchar(8)`을 이용하여 표현하는 것을 종종 볼 수 있는데요.\nMySQL의 `date` 타입을 이용하면 더욱 효율적으로 정보를 저장하고 조회할 수 있어 이에 대해 공유 드리고자 합니다.\n\n`date`타입은 'YYYY-MM-DD' 형식의 날짜 타입입니다. 시간을 저장하지 않습니다.\n\n<Image src=\"https://velog.velcdn.com/images/aryumka/post/3e4419ba-3859-4dd1-8588-2dacf815ab55/image.png\" caption=\"테이블에 저장된 date 타입\" />\n\n먼저 표를 통해 간략한 차이점을 알아보겠습니다.\n\n|         | varchar(8) | date |\n| ------- | ---------- | -----|\n|**size** | 9byte | 3byte| \n|**validation** | X | △ |   \n|**타 언어와 호환** | X | O |   \n|**비교 및 연산** | △ | O |   \n|**가독성** | 낮음 | 높음 |   \n\n아래에서 하나씩 살펴보겠습니다.\n\n### 1. size\n\n`varchar(8)` 사용 시 언뜻 하이픈(-) 없이 데이터를 압축, 저장할 수 있을 것만 같지만 실제로는 `date` 타입에 비해 3배 큰 용량을 차지하게 됩니다.\n\nMySQL에서 varchar는 `String` 데이타 타입 중 하나로 가변(variable) 문자(character) 타입을 의미합니다. 고정된 용량을 사용하는 `char`와 달리 `varchar`는 실제 용량을 표현하기 위한 prefix를 필요로 합니다.\n따라서 `varchar(255)` 이하에서는 1 byte, 이상에서는 2 byte의 용량이 필요합니다. ~~(1 byte = 8 bit, 즉 2^8=256, 0부터 255까지)~~\nUTF-8 인코딩방식에서는 하나의 문자 당 1바이트에서 최대 4바이트를 지원하지만 우리가 사용할 숫자로만 구성된 년월일의 경우 각 1바이트 * 8에 prefix인 1byte까지 **총 9 byte**를 필요로 합니다.\n\n반면 `date` 타입은 '1000-01-01' 부터 '9999-12-31' 까지의 값을 지원하며 3 byte의 용량을 필요로 합니다. 년, 월, 일을 나누어 인식하므로 최대 값('9999-12-31')도 **3 byte**로 충분히 표현할 수 있습니다.\n\n### 2. validation\n\n값 입력 시 `varchar(8)` 문자열은 각 문자열을 년, 월, 일로 잘라 각각이 유효한 값인지 검사하여야 하지만 실제 저희 프로그램에서는 자리 수 체크 정도만 진행되고 있습니다. '88888888'도 유효한 날짜로 인식됩니다.\n`date` 타입은 날짜 타입인 만큼 월과 년,월에 따른 일에 대해 유효하지 않은 경우 예외가 발생합니다. 예를 들어 **'1990-02-29' 또는 '2000-11-31' 같은 값은 입력할 수 없습니다.** \n그러나 모든 유효하지 않은 날짜를 막는 것은 아닙니다(00월이나 00일은 허용). 또 비즈니스마다 유효한 연도의 범위도 필요하므로 이 이상의 validation은 어플리케이션 단에서 로직을 통해 통제하는 것이 합리적으로 보입니다.\n\n### 3. 타 언어와 호환\n\nMySQL `date` 타입은 `java.sql.Date`로 리턴됩니다. 또 `java.lang.String`, `java.sql.Date`, `java.sql.Timestamp`와 같은 **객체**로 변환이 가능합니다.\n\n<Image src=\"https://velog.velcdn.com/images/aryumka/post/e84fde44-1e6e-436e-bf62-6749c6ca1845/image.png\" />\n\n[Java, JDBC, and MySQL Types](https://dev.mysql.com/doc/connector-j/8.1/en/connector-j-reference-type-conversions.html)\n\n즉 라이브러리에서 지원되는 **연산**이나 **비교** 등의 작업이 가능하다는 얘기입니다.\n\n`String` 타입으로 받더라도 저희 프로그램에서 사용하는 java와 javascript에서 날짜를 표현하는 객체는 'YYYY-MM-DD' 포맷의 문자열로 객체 생성 및 초기화가 가능합니다.\n\n**java 예시**\n```java \n    LocalDate date = LocalDate.parse(\"2022-01-13\");\n```\n**javascript 예시**\n```javascript\n    Date = new Date(\"2022-01-13\");\n```\n\n비즈니스 로직에서 **validation, 날짜 연산** 등을 위해 객체를 이용해야 할 경우가 많습니다. `date` 타입의 경우 **DB에서 조회한 문자열 그대로 별도의 가공 없이** 사용할 수 있습니다. 생산성과 코드 가독성이 향상됩니다.\n\n**java 로직 예시**\n```java \n    try{\n        LocalDate date = LocalDate.parse(\"2022-00-00\"); //DateTimeParseException 발생\n    }catch(DateTimeParseException e){\n        //...예외 처리 내용\n    }\n```\n\n반면 `varchar`를 이용한다면 문자열을 자른 후 각각 별도의 로직 구현을 통해 연산 및 계산하거나, 문자열을 다시 객체로 만들 수 있도록 별도의 가공을 해야합니다.\n\n### 4. 비교 및 연산\n\nMySQL에서는 날짜 연산을 위해 자체적으로 다양한 함수들을 제공합니다 [MYSQL 날짜 및 시간 함수](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html).\n`date`타입은 `datetime`, `timestamp` 등의 날짜 타입과 호환되므로 위 링크의 모든 함수 사용이 가능합니다.\n`varchar(8)`의 경우 `String` 타입이므로 바로 함수를 사용할 수 없습니다. *DATE()* 함수나 *STR_TO_DATE()* 함수로 가공 후 사용해야 합니다. 단순 문자열 비교는 가능하지만 더 구체적인 월 비교, 일 비교나 더 나아가 연산은 지원되지 않습니다.\n\n### 5. 가독성\n\nYYYY-MM-DD는 일반적으로 년, 월, 일을 인식하는 포맷입니다. \n현재 사용자가 보는 화면 또한 가독성을 위해 포맷팅 작업을 일일이 별도로 해주고 있는데 `date`를 사용하면 문자열 그대로 받아 사용하면 됩니다.\n\n위처럼 별도의 포맷팅이 없어도 아래와 같이 표현됩니다.\n\n<Image src=\"https://velog.velcdn.com/images/aryumka/post/f489f591-951c-41fd-bc7c-c3991509a9f5/image.png\" />\n\n사용자와 개발자 모두에게 가독성과 편의성을 향상시켜줍니다.\n\n### date 타입 칼럼에 입력 가능한 형식들\n- **YYYYMMDD, YYMMDD, YYYY-MM-DD, YYYY#MM#DD** 등 다양한 문자열 포맷으로 입력이 가능합니다. 사실상 년, 월, 일 사이 구분자가 어떤 것이어도 무관하며 연월일 6 자리도 인식 가능합니다. \n \n| 입력값 | 출력값 |\n| ----- | ----- |\n| '20200101', '2020#01#01', '200101', '20200101' | 2020-01-01 | \n\n- **숫자, String** 타입으로 입력이 가능합니다.\n\n| 입력값 | 출력값|\n| ------ | -----|\n| '20200101', 20200101| '2020-01-01' | \n\n- **0**도 입력 가능합니다.\n\n| 입력값 | 출력값|\n| ------ | -----|\n| 0 | '0000-00-00' | \n\n- **datetime타입**도 입력할 수 있습니다.\n\n| 입력값 | 출력값|\n| ----- | -----|\n| '2023-10-19 20:06:38' | '2023-10-19' | \n| *NOW()* | '2023-10-25' (오늘 날짜) | \n\n\n만약 드물지만 `date`를 'YYYYMMDD'의 plain한 문자열로 사용해야 한다면 *date_format()* 함수를 통해 문자열을 변환해 내려줄 수 있습니다.\n```sql\nselect date_format('2022-11-11', '%Y%m%d'); -- 20221111 출력\n```\n","tableOfContents":{"items":[{"url":"#1-size","title":"1. size"},{"url":"#2-validation","title":"2. validation"},{"url":"#3-타-언어와-호환","title":"3. 타 언어와 호환"},{"url":"#4-비교-및-연산","title":"4. 비교 및 연산"},{"url":"#5-가독성","title":"5. 가독성"},{"url":"#date-타입-칼럼에-입력-가능한-형식들","title":"date 타입 칼럼에 입력 가능한 형식들"}]},"excerpt":"년월일의 날짜정보를 저장할 때 을 이용하여 표현하는 것을 종종 볼 수 있는데요. MySQL의  타입을 이용하면 더욱 효율적으로 정보를 저장하고 조회할 수 있어 이에 대해 공유 드리고자 합니다. 타입은 'YYYY-MM-DD' 형식의 날짜 타입입니다…","fields":{"slug":"/posts/mysql-date-type","date":"2023-12-25"},"frontmatter":{"title":"MySQL date 타입에 대하여: varchar(8)과의 비교를 중점으로","categories":"dev","tags":["MySQL"],"image":"https://velog.velcdn.com/images/aryumka/post/e84fde44-1e6e-436e-bf62-6749c6ca1845/image.png","comments":true,"draft":false}},"allMdx":{"edges":[{"node":{"fields":{"date":"2023-03-18","slug":"/posts/spring-boot-tomcat"},"frontmatter":{"title":"스프링부트의 톰캣 실행","image":"https://velog.velcdn.com/images/aryumka/post/5b95b704-67df-48b2-bdde-620b629f10ae/image.png"}}},{"node":{"fields":{"date":"2023-04-10","slug":"/posts/jsoup-html-parser"},"frontmatter":{"title":"Jsoup을 이용하여 HTML Parser 만들기","image":"https://velog.velcdn.com/images/aryumka/post/251571e0-9d24-4ef3-aa0d-f4d8654212c3/image.png"}}},{"node":{"fields":{"date":"2023-12-24","slug":"/posts/properties-vs-yaml"},"frontmatter":{"title":"Properties vs YAML - 스프링부트 외부설정","image":"https://velog.velcdn.com/images/aryumka/post/9173f985-e7b4-4d03-9996-93a08c517845/image.png"}}},{"node":{"fields":{"date":"2023-12-25","slug":"/posts/mysql-date-type"},"frontmatter":{"title":"MySQL date 타입에 대하여: varchar(8)과의 비교를 중점으로","image":"https://velog.velcdn.com/images/aryumka/post/e84fde44-1e6e-436e-bf62-6749c6ca1845/image.png"}}},{"node":{"fields":{"date":"2023-12-28","slug":"/posts/holiday-til-1"},"frontmatter":{"title":"[연휴개발TIL] DAY1 - kotiln + kotest + Spring Data JPA","image":"https://velog.velcdn.com/images/aryumka/post/9173f985-e7b4-4d03-9996-93a08c517845/image.png"}}},{"node":{"fields":{"date":"2023-12-29","slug":"/posts/holiday-til-2"},"frontmatter":{"title":"[연휴개발TIL] DAY2 - Github Action + Mockk","image":"https://velog.velcdn.com/images/aryumka/post/6e45e3ee-1592-433f-a0e8-e69b23738caf/image.png"}}},{"node":{"fields":{"date":"2023-12-31","slug":"/posts/holiday-til-3"},"frontmatter":{"title":"[연휴개발TIL] DAY3","image":"https://velog.velcdn.com/images/aryumka/post/0c169fc0-5d98-4cd2-9d50-04672ebc9d84/image.png"}}},{"node":{"fields":{"date":"2024-01-02","slug":"/posts/holiday-til-4"},"frontmatter":{"title":"[연휴개발TIL] DAY3","image":"https://velog.velcdn.com/images/aryumka/post/3e146a87-d66d-4ff3-953f-9da5e5c92441/image.png"}}},{"node":{"fields":{"date":"2024-01-03","slug":"/posts/github-actions"},"frontmatter":{"title":"GitHub Actions 정리","image":"https://velog.velcdn.com/images/aryumka/post/07ec2107-424c-4a8c-9c11-005508653ee2/image.png"}}},{"node":{"fields":{"date":"2024-01-04","slug":"/posts/til-aws-elastic-ip-docker"},"frontmatter":{"title":"[TIL] aws 탄력적 ip + Docker 사용해보기","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-07","slug":"/posts/til-practice-tdd"},"frontmatter":{"title":"[TIL] README, 테스트 작성과 코드 구현","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-09","slug":"/posts/til-kotlin-binary"},"frontmatter":{"title":"[TIL] 코틀린 이진수 변환","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-10","slug":"/posts/til-java-static-block-kotlin-companion-object"},"frontmatter":{"title":"[TIL] Java의 static block vs Kotlin의 companion object","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-14","slug":"/posts/reinventing-big-integer"},"frontmatter":{"title":"[바퀴의 재발명] BigInteger","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-15","slug":"/posts/til-resource"},"frontmatter":{"title":"[TIL] 리소스 위치 참조 시 / 쓰지 않기","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-16","slug":"/posts/til-gradle-build-error"},"frontmatter":{"title":"[TIL] 인텔리제이 gradle 빌드 오류(feat. JDK 버젼 호환)","image":"https://velog.velcdn.com/images/aryumka/post/14ac2014-f469-4a23-b3cd-d95c2e912efe/image.png"}}},{"node":{"fields":{"date":"2024-01-17","slug":"/posts/til-kotlin-inline-reflection"},"frontmatter":{"title":"[TIL] 코틀린 inline, reflection","image":"https://velog.velcdn.com/images/aryumka/post/14ac2014-f469-4a23-b3cd-d95c2e912efe/image.png"}}},{"node":{"fields":{"date":"2024-01-24","slug":"/posts/query-if-null-return"},"frontmatter":{"title":"[TIL] 쿼리로 피벗 시 if 함수에서 의도된 Null 리턴","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-25","slug":"/posts/kotlin-reflection"},"frontmatter":{"title":"[JVM 톺아보기] 코틀린의 리플렉션(Reflection)","image":"https://velog.velcdn.com/images/aryumka/post/c9d716a4-0eef-4663-90e1-69631029d564/image.png"}}},{"node":{"fields":{"date":"2024-02-01","slug":"/posts/jvm-permgen"},"frontmatter":{"title":"[JVM 톺아보기] JVM의 메서드 영역 (feat. PermGen space)","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-02-06","slug":"/posts/real-mysql"},"frontmatter":{"title":"[TIL] Real MySQL","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-02-07","slug":"/posts/til-kotlin-sort"},"frontmatter":{"title":"[TIL] Kotlin - sortedWith과 compareBy를 이용한 다중조건 정렬","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-02-18","slug":"/posts/reinventing-di-framework"},"frontmatter":{"title":"[바퀴의 재발명] DI 프레임워크 직접 만들어보기","image":"https://velog.velcdn.com/images/aryumka/post/94394c32-2228-4acb-8be0-a82e13fa78a1/image.png"}}},{"node":{"fields":{"date":"2024-03-02","slug":"/posts/til-kotlin-jpa-test"},"frontmatter":{"title":"[TIL] Kotlin + JPA + Kotest + H2 DB","image":"https://velog.velcdn.com/images/aryumka/post/af776ead-b672-4d57-80bb-fe6fac180764/image.png"}}},{"node":{"fields":{"date":"2024-03-03","slug":"/posts/functional-exception"},"frontmatter":{"title":"[TIL] 예외를 함수로 처리","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-04-22","slug":"/posts/rabbitmq-seven-patterns"},"frontmatter":{"title":"RabbitMQ 7가지 설계 패턴 (with Spring AMQP tutorial)","image":"https://velog.velcdn.com/images/aryumka/post/f2266935-81ba-47b8-9b4f-910d28c1aaef/image.png"}}},{"node":{"fields":{"date":"2024-04-03","slug":"/posts/til-json"},"frontmatter":{"title":"[TIL] JSON 유효하지 않은 문자열 제거","image":"https://velog.velcdn.com/images/aryumka/post/ed5979e8-49ef-4be8-9a1c-5b9203d2574f/image.png"}}},{"node":{"fields":{"date":"2024-05-04","slug":"/posts/til-test-container"},"frontmatter":{"title":"[TIL] Test Container","image":"https://velog.velcdn.com/images/aryumka/post/9fcbd346-bd6e-4097-bce9-b7c9468b5cfc/image.png"}}},{"node":{"fields":{"date":"2024-05-05","slug":"/posts/til-axon-framework"},"frontmatter":{"title":"[TIL] Axon Framework - Token","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-05-12","slug":"/posts/kafka-axon-eventsourcing"},"frontmatter":{"title":"Kafka와 Axon Framework를 이용한 이벤트 소싱 - 1","image":"/images/og.png"}}}]}},"pageContext":{"slug":"/posts/mysql-date-type","frontmatter":{"title":"MySQL date 타입에 대하여: varchar(8)과의 비교를 중점으로","categories":"dev","tags":["MySQL"],"series":"","cover":"","image":"https://velog.velcdn.com/images/aryumka/post/e84fde44-1e6e-436e-bf62-6749c6ca1845/image.png","comments":true,"draft":false,"hide":false}}},"staticQueryHashes":["595849736","63159454"],"slicesMap":{}}