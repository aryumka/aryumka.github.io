{"componentChunkName":"component---src-templates-post-tsx-content-file-path-src-posts-2023-12-24-properties-vs-yaml-mdx","path":"/posts/properties-vs-yaml/","result":{"data":{"site":{"siteMetadata":{"title":"aryumka.me | devlog"}},"mdx":{"body":"\nimport Image from '@components/Image';\n\n## 개요\n\n스프링부트는 어플리케이션 코드의 변경을 최소화하기 위하여 설정파일, CLI Argument 등 다양한 방법으로 외부 설정을 주입받습니다.\n\n그리고 이러한 외부 설정은 운영, 테스트, 개발 등 실행환경에 따라 달라지게 됩니다.\n이를 위해 프로필 별 설정(Profile-specific Properties)이 필요하게 됩니다. 대개 프로필 별 설정파일을 통해 관리하게 됩니다.\n\n[스프링부트 공식 문서](https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto.properties-and-configuration)에서는 설정 파일을 이용할 때 두 가지 방법을 권장합니다.\n첫 번째로는 전통적인 방식으로 **properties**를 이용하는 방법과 두 번째로는 **yaml** 파일을 이용하는 방법입니다.\n공식 문서의 예제 코드 또한 위 두 가지 방법으로 제공됩니다.\n\n**properties 예시**\n```properties \nspring.application.name=cruncher\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\nspring.datasource.url=jdbc:mysql://localhost/test\nserver.port=9000\n```\n\n**yaml 예시**\n```yaml \nspring:\n  application:\n    name: \"cruncher\"\n  datasource:\n    driver-class-name: \"com.mysql.jdbc.Driver\"\n    url: \"jdbc:mysql://localhost/test\"\nserver:\n  port: 9000\n```\n\nyaml 파일로 설정 시 장점과 단점은 다음과 같습니다.\n\n## 장점\n\n### 1. 계층적 표현 가능\n\n계층적 표현을 통해 코드의 응집도와 가독성이 증가합니다. 같은 계층의 설정이라면 한 곳에 모아서 관리하기에 용이하며 각 설정의 구조도 한 눈에 파악할 수 있습니다.\n여러 번 반복해 쓸 필요 없이 하위의 각 설정으로 들여쓰기를 이용하여 추가할 수 있습니다.\n특히 어플리케이션이 커지고 설정이 복잡해진 경우 더욱 편리합니다.\n\n### 2. 중복코드 줄여줌\n\nproperties로 설정 시 모든 프로필에 동일한 설정이 적용될 경우 각 파일에 반복된 코드를 모두 넣어줘야 합니다.\n하지만 yaml을 이용하면 같은 파일에 `---` 구분자를 넣어 각 프로필을 설정할 수 있습니다. 프로필이 없는 설정, 즉 디폴트 설정은 모든 프로필에 동일하게 적용됩니다.\n아래 예제와 같이 공통으로 관리하는 설정과 각 프로필 별로 달라지는 설정을 나누어 관리할 수 있습니다.\n\n```yaml\n#공통 환경 설정\nserver:\n  shutdown: graceful\n  servlet:\n    jsp:\n      init-parameters:\n        mappedfile: false\n  jsp-servlet:\n    init-parameters:\n      development: true\n  max-http-header-size: 2MB\n\nspring:\n  datasource:\n    hikari:\n      max-lifetime: 180000\n      maximum-pool-size: 1\n      minimum-idle: 1\n      idle-timeout: 600000\n      pool-name: Logos-pi\n      connection-test-query: \"select 1+1\"\n  mvc:\n    view:\n      prefix: /WEB-INF/jsp/\n      suffix: .jsp\n  application:\n    name: ui\n  devtools:\n    livereload:\n      enabled: true\n\n--- #local 환경 설정\n\nspring:\n  profiles:\n    active: local\n  datasource:\n    hikari:\n      jdbc-url: \"jdbc:mariadb://127.0.0.1:3306/local?useUnicode=true&characterEncoding=utf8\"\n  tomcat:\n    maxActive: 5\n\nserver:\n  port: 8011\n\n--- #stg 환경 설정\nspring:\n  profiles: stg\n  server:\n    port: 8011\n    \n--- #prd 환경 설정\n\nserver:\n  port: 80\n\nspring:\n  profiles: prd\n  datasource:\n    tomcat:\n      maxActive: 50000\n    hikari:\n      jdbc-url: \"jdbc:mariadb://199.999.99.999:3306/prd?useUnicode=true&characterEncoding=utf8\"\n```\n\n\n\n### 3. 기타 유용한 장점\n\n**- yml 문법 사용 가능**\n\nyml은 xml, json처럼 데이터를 표현하는 양식이지만 문법은 상대적으로 이해하기 쉽고, 가독성이 좋도록 디자인 되었습니다. 또 모든 데이터를 리스트, 해쉬, 스칼라 데이터의 조합으로 적절히 표현할 수 있다는 믿음을 가지고 만들어졌습니다. \n\n<Image src=\"https://velog.velcdn.com/images/aryumka/post/9173f985-e7b4-4d03-9996-93a08c517845/image.png\" />\n\n[위키피디아에서 yaml 설명 보기](https://ko.wikipedia.org/wiki/YAML)\n이러한 yml의 문법은 스프링부트의 설정문서에서도 사용할 수 있습니다. \n\n배열을 예로 들자면 properties 에서는 아래와 같이 표현하던 것들을\n```properties\nmy.servers[0]=dev.example.com\nmy.servers[1]=another.example.com\n```\n\nyaml에서는 아래와 같이 `-`를 사용하거나\n```\nmy:\nservers:\n\t- dev.example.com\n\t- another.example.com\n```\n또는 이렇게 한 줄로 표현합니다.\n```\nmy:\n  servers: [dev.example.com, another.example.com]\n```\n\n자세한 문법은 [yaml 공식문서](https://yaml.org/spec/1.2.2/)또는 구글 검색을 통해 참고 바랍니다.\n\n**- UIF-8 인코딩 지원**\n\nproperties파일에 한글을 쓰면 인식을 못하여 글자가 깨지게 됩니다.\nIDE에서 설정하여 깨지지 않도록 하는 방법도 있지만 한 번 깨진 글자를 복구할 순 없습니다.\nyaml은 UTF-8 인코딩을 지원하므로 깨질 걱정 없이 한글로 주석 등을 달 수 있어 편리합니다.\n\n## 단점\n\n### 1. `@PropertySource` 애너테이션 사용 불가능\n\n스프링부트 공식문서에 나와있는 yaml의 단점입니다.\n하지만 `@Value` 애너테이션으로 대체할 수 있으며 설정파일 내 `placeholder`($\\{...}) 등 기본적인 사용 방식은 기존 properties와 동일합니다.\n\n\n### 2. 문법이 다소 엄격\n\n개행, 들여쓰기, 띄어쓰기 등을 철저하게 지켜야 합니다.\n특히 특수문자 같은 경우 url 등 일정 형식이 아닌 리터럴(ex. 비밀번호, 이메일)의 경우 리터럴`\"\"` 표시를 확실히 해주어야 합니다.\n`boolean`, `integer`, `float` 등 기본적인 타입은 모두 인식 가능합니다. \n상식 선에서 따라할 수 있는 것들로 몇 번 작성하면 금방 익숙해질만한 것들입니다.\n\n","tableOfContents":{"items":[{"url":"#개요","title":"개요"},{"url":"#장점","title":"장점","items":[{"url":"#1-계층적-표현-가능","title":"1. 계층적 표현 가능"},{"url":"#2-중복코드-줄여줌","title":"2. 중복코드 줄여줌"},{"url":"#3-기타-유용한-장점","title":"3. 기타 유용한 장점"}]},{"url":"#단점","title":"단점","items":[{"url":"#1-propertysource-애너테이션-사용-불가능","title":"1. @PropertySource 애너테이션 사용 불가능"},{"url":"#2-문법이-다소-엄격","title":"2. 문법이 다소 엄격"}]}]},"excerpt":"개요 스프링부트는 어플리케이션 코드의 변경을 최소화하기 위하여 설정파일, CLI Argument 등 다양한 방법으로 외부 설정을 주입받습니다.\n\n그리고 이러한 외부 설정은 운영, 테스트, 개발 등 실행환경에 따라 달라지게 됩니다. 이를 위해 프로필 별…","fields":{"slug":"/posts/properties-vs-yaml","date":"2023-12-24"},"frontmatter":{"title":"Properties vs YAML - 스프링부트 외부설정","categories":"dev","tags":["Spring"],"image":"https://velog.velcdn.com/images/aryumka/post/9173f985-e7b4-4d03-9996-93a08c517845/image.png","comments":true,"draft":false}},"allMdx":{"edges":[{"node":{"fields":{"date":"2023-03-18","slug":"/posts/spring-boot-tomcat"},"frontmatter":{"title":"스프링부트의 톰캣 실행","image":"https://velog.velcdn.com/images/aryumka/post/5b95b704-67df-48b2-bdde-620b629f10ae/image.png"}}},{"node":{"fields":{"date":"2023-04-10","slug":"/posts/jsoup-html-parser"},"frontmatter":{"title":"Jsoup을 이용하여 HTML Parser 만들기","image":"https://velog.velcdn.com/images/aryumka/post/251571e0-9d24-4ef3-aa0d-f4d8654212c3/image.png"}}},{"node":{"fields":{"date":"2023-12-24","slug":"/posts/properties-vs-yaml"},"frontmatter":{"title":"Properties vs YAML - 스프링부트 외부설정","image":"https://velog.velcdn.com/images/aryumka/post/9173f985-e7b4-4d03-9996-93a08c517845/image.png"}}},{"node":{"fields":{"date":"2023-12-25","slug":"/posts/mysql-date-type"},"frontmatter":{"title":"MySQL date 타입에 대하여: varchar(8)과의 비교를 중점으로","image":"https://velog.velcdn.com/images/aryumka/post/e84fde44-1e6e-436e-bf62-6749c6ca1845/image.png"}}},{"node":{"fields":{"date":"2023-12-28","slug":"/posts/holiday-til-1"},"frontmatter":{"title":"[연휴개발TIL] DAY1 - kotiln + kotest + Spring Data JPA","image":"https://velog.velcdn.com/images/aryumka/post/9173f985-e7b4-4d03-9996-93a08c517845/image.png"}}},{"node":{"fields":{"date":"2023-12-29","slug":"/posts/holiday-til-2"},"frontmatter":{"title":"[연휴개발TIL] DAY2 - Github Action + Mockk","image":"https://velog.velcdn.com/images/aryumka/post/6e45e3ee-1592-433f-a0e8-e69b23738caf/image.png"}}},{"node":{"fields":{"date":"2023-12-31","slug":"/posts/holiday-til-3"},"frontmatter":{"title":"[연휴개발TIL] DAY3","image":"https://velog.velcdn.com/images/aryumka/post/0c169fc0-5d98-4cd2-9d50-04672ebc9d84/image.png"}}},{"node":{"fields":{"date":"2024-01-02","slug":"/posts/holiday-til-4"},"frontmatter":{"title":"[연휴개발TIL] DAY3","image":"https://velog.velcdn.com/images/aryumka/post/3e146a87-d66d-4ff3-953f-9da5e5c92441/image.png"}}},{"node":{"fields":{"date":"2024-01-03","slug":"/posts/github-actions"},"frontmatter":{"title":"GitHub Actions 정리","image":"https://velog.velcdn.com/images/aryumka/post/07ec2107-424c-4a8c-9c11-005508653ee2/image.png"}}},{"node":{"fields":{"date":"2024-01-04","slug":"/posts/til-aws-elastic-ip-docker"},"frontmatter":{"title":"[TIL] aws 탄력적 ip + Docker 사용해보기","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-07","slug":"/posts/til-practice-tdd"},"frontmatter":{"title":"[TIL] README, 테스트 작성과 코드 구현","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-09","slug":"/posts/til-kotlin-binary"},"frontmatter":{"title":"[TIL] 코틀린 이진수 변환","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-10","slug":"/posts/til-java-static-block-kotlin-companion-object"},"frontmatter":{"title":"[TIL] Java의 static block vs Kotlin의 companion object","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-14","slug":"/posts/reinventing-big-integer"},"frontmatter":{"title":"[바퀴의 재발명] BigInteger","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-16","slug":"/posts/til-gradle-build-error"},"frontmatter":{"title":"[TIL] 인텔리제이 gradle 빌드 오류(feat. JDK 버젼 호환)","image":"https://velog.velcdn.com/images/aryumka/post/14ac2014-f469-4a23-b3cd-d95c2e912efe/image.png"}}},{"node":{"fields":{"date":"2024-01-15","slug":"/posts/til-resource"},"frontmatter":{"title":"[TIL] 리소스 위치 참조 시 / 쓰지 않기","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-17","slug":"/posts/til-kotlin-inline-reflection"},"frontmatter":{"title":"[TIL] 코틀린 inline, reflection","image":"https://velog.velcdn.com/images/aryumka/post/14ac2014-f469-4a23-b3cd-d95c2e912efe/image.png"}}},{"node":{"fields":{"date":"2024-01-24","slug":"/posts/query-if-null-return"},"frontmatter":{"title":"[TIL] 쿼리로 피벗 시 if 함수에서 의도된 Null 리턴","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-25","slug":"/posts/kotlin-reflection"},"frontmatter":{"title":"[JVM 톺아보기] 코틀린의 리플렉션(Reflection)","image":"https://velog.velcdn.com/images/aryumka/post/c9d716a4-0eef-4663-90e1-69631029d564/image.png"}}},{"node":{"fields":{"date":"2024-02-01","slug":"/posts/jvm-permgen"},"frontmatter":{"title":"[JVM 톺아보기] JVM의 메서드 영역 (feat. PermGen space)","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-02-06","slug":"/posts/real-mysql"},"frontmatter":{"title":"[TIL] Real MySQL","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-02-07","slug":"/posts/til-kotlin-sort"},"frontmatter":{"title":"[TIL] Kotlin - sortedWith과 compareBy를 이용한 다중조건 정렬","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-02-18","slug":"/posts/reinventing-di-framework"},"frontmatter":{"title":"[바퀴의 재발명] DI 프레임워크 직접 만들어보기","image":"https://velog.velcdn.com/images/aryumka/post/94394c32-2228-4acb-8be0-a82e13fa78a1/image.png"}}},{"node":{"fields":{"date":"2024-03-02","slug":"/posts/til-kotlin-jpa-test"},"frontmatter":{"title":"[TIL] Kotlin + JPA + Kotest + H2 DB","image":"https://velog.velcdn.com/images/aryumka/post/af776ead-b672-4d57-80bb-fe6fac180764/image.png"}}},{"node":{"fields":{"date":"2024-03-03","slug":"/posts/functional-exception"},"frontmatter":{"title":"[TIL] 예외를 함수로 처리","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-04-03","slug":"/posts/til-json"},"frontmatter":{"title":"[TIL] JSON 유효하지 않은 문자열 제거","image":"https://velog.velcdn.com/images/aryumka/post/ed5979e8-49ef-4be8-9a1c-5b9203d2574f/image.png"}}},{"node":{"fields":{"date":"2024-04-22","slug":"/posts/rabbitmq-seven-patterns"},"frontmatter":{"title":"RabbitMQ 7가지 설계 패턴 (with Spring AMQP tutorial)","image":"https://velog.velcdn.com/images/aryumka/post/f2266935-81ba-47b8-9b4f-910d28c1aaef/image.png"}}},{"node":{"fields":{"date":"2024-05-04","slug":"/posts/til-test-container"},"frontmatter":{"title":"[TIL] Test Container","image":"https://velog.velcdn.com/images/aryumka/post/9fcbd346-bd6e-4097-bce9-b7c9468b5cfc/image.png"}}},{"node":{"fields":{"date":"2024-05-05","slug":"/posts/til-axon-framework"},"frontmatter":{"title":"[TIL] Axon Framework - Token","image":"/images/og.png"}}}]}},"pageContext":{"slug":"/posts/properties-vs-yaml","frontmatter":{"title":"Properties vs YAML - 스프링부트 외부설정","categories":"dev","tags":["Spring"],"series":"","cover":"","image":"https://velog.velcdn.com/images/aryumka/post/9173f985-e7b4-4d03-9996-93a08c517845/image.png","comments":true,"draft":false,"hide":false}}},"staticQueryHashes":["595849736","63159454"],"slicesMap":{}}