{"componentChunkName":"component---src-templates-post-tsx-content-file-path-src-posts-2024-01-04-til-aws-elastic-ip-docker-mdx","path":"/posts/til-aws-elastic-ip-docker/","result":{"data":{"site":{"siteMetadata":{"title":"aryumka.me | devlog"}},"mdx":{"body":"\nimport Image from '@components/Image';\n\n### aws 탄력적 ip 설정\n인스턴스를 껐다 켰다 할 때마다 ip가 바뀌어서 너무 불편했다. 고정 ip를 생성해봤다. 너무너무 간단하다.\n인스턴스 > 네트워크 및 보안 > 탄력적 ip에서 생성\n\n<Image src=\"https://velog.velcdn.com/images/aryumka/post/285832a5-29dd-4373-97ae-d3e1449495ea/image.png\" />\n\n<Image src=\"https://velog.velcdn.com/images/aryumka/post/fce6cadf-f831-46c9-b225-d01bb70181a4/image.png\" caption=\"현재 ec2 인스턴스와 연결\" />\n\n<Image src=\"https://velog.velcdn.com/images/aryumka/post/74dd0c4d-5c12-49aa-86e0-6c613e3dea22/image.png\" caption=\"성공!\" />\n\n### Docker 사용해보기\n사용중인 OS는 윈도우지만 git Bash를 인텔리제이의 기본 터미널로 설정해주었다.\n\n<Image src=\"https://velog.velcdn.com/images/aryumka/post/4a7e1723-d886-4475-81d7-969eba5185f3/image.png\" />\n\n먼저 프로젝트 루트에 dockerfile을 만들어준다. dockerfile은 확장자가 없다.\n```\nFROM openjdk:19\nCMD [\"java\", \"-jar\", \"./build/libs/vc-erp-0.0.1-SNAPSHOT.jar\"]\n```\n`FROM` - 베이스 이미지이다.  \n`CMD` - 컨테이너가 시작할 때 실행할 명령어이다.\n아래 명령어를 실행하여 도커 빌드를 해줬다.\n```\n$ docker build . -t springbootapp\n```\n\n<Image src=\"https://velog.velcdn.com/images/aryumka/post/36ab57eb-4491-4564-b98d-80c168270d02/image.png\" />\n\n그리고 실행하기 위해 다음 명령을 입력했다.\n```\n$ docker run springbootapp\n```\n\n<Image src=\"https://velog.velcdn.com/images/aryumka/post/7e7cc0e4-5d28-4ccc-adc0-74fd1f21e6fa/image.png\" />\n\n위와 같은 에러가 난다.\n위와 같이 도커에서 해당 어플리케이션을 실행하기 위해서는 빌드한 jar가 도커 컨테이너 안에 있어야 하기 때문이다. 그러나 위 명령어를 통해 빌드한 파일은 현재 내 PC에만 존재한다. 따라서 위 파일을 컨테이너로 copy해주어야 한다. \n~~원격 서버에 빌드된 jar를 배포하는 것과 비슷하다.~~\n```\nCOPY ./build/libs/vc-erp-0.0.1-SNAPSHOT.jar /build/libs/vc-erp-0.0.1-SNAPSHOT.jar\n```\n[명령어] [현재파일경로] [복사할경로] 순으로 적어준다.\n\n다시 빌드 후 실행하면 일단 jar 실행은 잘 된다.\n\n<Image src=\"https://velog.velcdn.com/images/aryumka/post/82bdd78f-b619-4ec7-b254-2fb034763223/image.png\" />\n\n하지만 위의 jar가 실행이 안되었던 것과 비슷한 이유로 외부에서 컨테이너의 어플리케이션에 접근하기 위해서는 컨테이너의 포트를 열어줘야 한다.\n```\n$ docker run -p 50000:8080 springbootapp\n```\nrun 명령에 위와같은 -p [로컬 포트번호]:[외부포트] 옵션을 추가해준다\n\nhttp://localhost:8080 에 잘 접속된다.\n```\nWORKDIR /usr/src/app\n```\nworking directory는 위 명령어로 설정해준다. 설정 후 복사될 경로, 실행파일 경로 등을 상대경로로 바꾸어준다(./~~). \n```\n$ docker run -p 50000:8080 -v $(pwd):/usr/src/app springbootapp\n```\n실행 시 volume을 설정할 수도 있다.\nvolume: volume을 설정하면 호스트머신의 로컬의 파일을 컨테이너가 사용할 수 있으며 컨테이너끼리 데이터를 공유할 수도 있다.\n\n최종 dockerfile은 아래와 같다.\n```\nFROM openjdk:19\nWORKDIR /usr/src/app\nCOPY ./build/libs/vc-erp-0.0.1-SNAPSHOT.jar ./build/libs/vc-erp-0.0.1-SNAPSHOT.jar\nCMD [\"java\", \"-jar\", \"./build/libs/vc-erp-0.0.1-SNAPSHOT.jar\"]\n```","tableOfContents":{"items":[{"url":"#aws-탄력적-ip-설정","title":"aws 탄력적 ip 설정"},{"url":"#docker-사용해보기","title":"Docker 사용해보기"}]},"excerpt":"aws 탄력적 ip 설정 인스턴스를 껐다 켰다 할 때마다 ip가 바뀌어서 너무 불편했다. 고정 ip를 생성해봤다. 너무너무 간단하다. 인스턴스 > 네트워크 및 보안 > 탄력적 ip에서 생성\n\nDocker 사용해보기\n\n사용중인 OS는 윈도우지만…","fields":{"slug":"/posts/til-aws-elastic-ip-docker","date":"2024-01-04"},"frontmatter":{"title":"[TIL] aws 탄력적 ip + Docker 사용해보기","categories":"dev","tags":["TIL","AWS","Docker"],"image":"/images/og.png","comments":true,"draft":false}},"allMdx":{"edges":[{"node":{"fields":{"date":"2023-04-10","slug":"/posts/jsoup-html-parser"},"frontmatter":{"title":"Jsoup을 이용하여 HTML Parser 만들기","image":"https://velog.velcdn.com/images/aryumka/post/251571e0-9d24-4ef3-aa0d-f4d8654212c3/image.png"}}},{"node":{"fields":{"date":"2023-12-24","slug":"/posts/properties-vs-yaml"},"frontmatter":{"title":"Properties vs YAML - 스프링부트 외부설정","image":"https://velog.velcdn.com/images/aryumka/post/9173f985-e7b4-4d03-9996-93a08c517845/image.png"}}},{"node":{"fields":{"date":"2023-03-18","slug":"/posts/spring-boot-tomcat"},"frontmatter":{"title":"스프링부트의 톰캣 실행","image":"https://velog.velcdn.com/images/aryumka/post/5b95b704-67df-48b2-bdde-620b629f10ae/image.png"}}},{"node":{"fields":{"date":"2023-12-25","slug":"/posts/mysql-date-type"},"frontmatter":{"title":"MySQL date 타입에 대하여: varchar(8)과의 비교를 중점으로","image":"https://velog.velcdn.com/images/aryumka/post/e84fde44-1e6e-436e-bf62-6749c6ca1845/image.png"}}},{"node":{"fields":{"date":"2023-12-28","slug":"/posts/holiday-til-1"},"frontmatter":{"title":"[연휴개발TIL] DAY1 - kotiln + kotest + Spring Data JPA","image":"https://velog.velcdn.com/images/aryumka/post/9173f985-e7b4-4d03-9996-93a08c517845/image.png"}}},{"node":{"fields":{"date":"2024-01-02","slug":"/posts/holiday-til-4"},"frontmatter":{"title":"[연휴개발TIL] DAY3","image":"https://velog.velcdn.com/images/aryumka/post/3e146a87-d66d-4ff3-953f-9da5e5c92441/image.png"}}},{"node":{"fields":{"date":"2023-12-31","slug":"/posts/holiday-til-3"},"frontmatter":{"title":"[연휴개발TIL] DAY3","image":"https://velog.velcdn.com/images/aryumka/post/0c169fc0-5d98-4cd2-9d50-04672ebc9d84/image.png"}}},{"node":{"fields":{"date":"2023-12-29","slug":"/posts/holiday-til-2"},"frontmatter":{"title":"[연휴개발TIL] DAY2 - Github Action + Mockk","image":"https://velog.velcdn.com/images/aryumka/post/6e45e3ee-1592-433f-a0e8-e69b23738caf/image.png"}}},{"node":{"fields":{"date":"2024-01-03","slug":"/posts/github-actions"},"frontmatter":{"title":"GitHub Actions 정리","image":"https://velog.velcdn.com/images/aryumka/post/07ec2107-424c-4a8c-9c11-005508653ee2/image.png"}}},{"node":{"fields":{"date":"2024-01-04","slug":"/posts/til-aws-elastic-ip-docker"},"frontmatter":{"title":"[TIL] aws 탄력적 ip + Docker 사용해보기","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-09","slug":"/posts/til-kotlin-binary"},"frontmatter":{"title":"[TIL] 코틀린 이진수 변환","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-07","slug":"/posts/til-practice-tdd"},"frontmatter":{"title":"[TIL] README, 테스트 작성과 코드 구현","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-15","slug":"/posts/til-resource"},"frontmatter":{"title":"[TIL] 리소스 위치 참조 시 / 쓰지 않기","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-10","slug":"/posts/til-java-static-block-kotlin-companion-object"},"frontmatter":{"title":"[TIL] Java의 static block vs Kotlin의 companion object","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-17","slug":"/posts/til-kotlin-inline-reflection"},"frontmatter":{"title":"[TIL] 코틀린 inline, reflection","image":"https://velog.velcdn.com/images/aryumka/post/14ac2014-f469-4a23-b3cd-d95c2e912efe/image.png"}}},{"node":{"fields":{"date":"2024-01-16","slug":"/posts/til-gradle-build-error"},"frontmatter":{"title":"[TIL] 인텔리제이 gradle 빌드 오류(feat. JDK 버젼 호환)","image":"https://velog.velcdn.com/images/aryumka/post/14ac2014-f469-4a23-b3cd-d95c2e912efe/image.png"}}},{"node":{"fields":{"date":"2024-01-14","slug":"/posts/reinventing-big-integer"},"frontmatter":{"title":"[바퀴의 재발명] BigInteger","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-01-24","slug":"/posts/query-if-null-return"},"frontmatter":{"title":"[TIL] 쿼리로 피벗 시 if 함수에서 의도된 Null 리턴","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-02-06","slug":"/posts/real-mysql"},"frontmatter":{"title":"[TIL] Real MySQL","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-02-07","slug":"/posts/til-kotlin-sort"},"frontmatter":{"title":"[TIL] Kotlin - sortedWith과 compareBy를 이용한 다중조건 정렬","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-02-01","slug":"/posts/jvm-permgen"},"frontmatter":{"title":"[JVM 톺아보기] JVM의 메서드 영역 (feat. PermGen space)","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-04-03","slug":"/posts/til-json"},"frontmatter":{"title":"[TIL] JSON 유효하지 않은 문자열 제거","image":"https://velog.velcdn.com/images/aryumka/post/ed5979e8-49ef-4be8-9a1c-5b9203d2574f/image.png"}}},{"node":{"fields":{"date":"2024-05-04","slug":"/posts/til-test-container"},"frontmatter":{"title":"[TIL] Test Container","image":"https://velog.velcdn.com/images/aryumka/post/9fcbd346-bd6e-4097-bce9-b7c9468b5cfc/image.png"}}},{"node":{"fields":{"date":"2024-01-25","slug":"/posts/kotlin-reflection"},"frontmatter":{"title":"[JVM 톺아보기] 코틀린의 리플렉션(Reflection)","image":"https://velog.velcdn.com/images/aryumka/post/c9d716a4-0eef-4663-90e1-69631029d564/image.png"}}},{"node":{"fields":{"date":"2024-02-18","slug":"/posts/reinventing-di-framework"},"frontmatter":{"title":"[바퀴의 재발명] DI 프레임워크 직접 만들어보기","image":"https://velog.velcdn.com/images/aryumka/post/94394c32-2228-4acb-8be0-a82e13fa78a1/image.png"}}},{"node":{"fields":{"date":"2024-03-02","slug":"/posts/til-kotlin-jpa-test"},"frontmatter":{"title":"[TIL] Kotlin + JPA + Kotest + H2 DB","image":"https://velog.velcdn.com/images/aryumka/post/af776ead-b672-4d57-80bb-fe6fac180764/image.png"}}},{"node":{"fields":{"date":"2024-03-03","slug":"/posts/functional-exception"},"frontmatter":{"title":"[TIL] 예외를 함수로 처리","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-05-05","slug":"/posts/til-axon-framework"},"frontmatter":{"title":"[TIL] Axon Framework - Token","image":"/images/og.png"}}},{"node":{"fields":{"date":"2025-04-15","slug":"/posts/should-exception-be-thrown"},"frontmatter":{"title":"예외는 던져져야 할까?","image":"/images/og.png"}}},{"node":{"fields":{"date":"2024-04-22","slug":"/posts/rabbitmq-seven-patterns"},"frontmatter":{"title":"RabbitMQ 7가지 설계 패턴 (with Spring AMQP tutorial)","image":"https://velog.velcdn.com/images/aryumka/post/f2266935-81ba-47b8-9b4f-910d28c1aaef/image.png"}}},{"node":{"fields":{"date":"2024-05-12","slug":"/posts/kafka-axon-eventsourcing"},"frontmatter":{"title":"Kafka와 Axon Framework를 이용한 이벤트 소싱 - 1","image":"/images/og.png"}}}]}},"pageContext":{"slug":"/posts/til-aws-elastic-ip-docker","frontmatter":{"title":"[TIL] aws 탄력적 ip + Docker 사용해보기","categories":"dev","tags":["TIL","AWS","Docker"],"series":"","cover":"","image":"/images/og.png","comments":true,"draft":false,"hide":false}}},"staticQueryHashes":["595849736","63159454"],"slicesMap":{}}